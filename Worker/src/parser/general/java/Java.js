/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Java = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[2,4],$V2=[1,5],$V3=[2,5,18],$V4=[2,39],$V5=[1,21],$V6=[1,23],$V7=[1,24],$V8=[1,22],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[1,35],$Vg=[2,21,22,23,24,25,26,27,35],$Vh=[2,16],$Vi=[2,18,19,42],$Vj=[2,33,35,44],$Vk=[10,52],$Vl=[2,109],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,61],$Vu=[1,63],$Vv=[1,64],$Vw=[1,70],$Vx=[1,72],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,71],$VE=[1,75],$VF=[1,73],$VG=[1,74],$VH=[1,77],$VI=[1,78],$VJ=[1,86],$VK=[1,87],$VL=[2,16,29,30,31,33,35,89,97,102,103,105,106,108,109],$VM=[1,92],$VN=[1,93],$VO=[2,10,52],$VP=[2,107],$VQ=[2,10,11,52,73,74,75,76,77,78,79],$VR=[1,100],$VS=[1,101],$VT=[1,102],$VU=[1,103],$VV=[1,104],$VW=[1,105],$VX=[1,106],$VY=[1,107],$VZ=[1,108],$V_=[1,109],$V$=[1,110],$V01=[1,111],$V11=[1,112],$V21=[1,113],$V31=[2,10,11,52,73,74,75,76,77,78,79,87,88,90,91,92,93,94,95,96,97,98,99,100,101,119],$V41=[2,10,11,52,69,70,73,74,75,76,77,78,79,87,88,90,91,92,93,94,95,96,97,98,99,100,101,119],$V51=[2,30],$V61=[1,125],$V71=[1,148],$V81=[1,149],$V91=[1,126],$Va1=[1,136],$Vb1=[1,137],$Vc1=[1,138],$Vd1=[1,141],$Ve1=[1,142],$Vf1=[1,143],$Vg1=[1,144],$Vh1=[1,145],$Vi1=[1,146],$Vj1=[1,153],$Vk1=[1,151],$Vl1=[1,152],$Vm1=[2,10,11],$Vn1=[2,10,11,52,73,74,75,76,77,78,79,87,88,90,91,92,93,94,95,119],$Vo1=[1,178],$Vp1=[1,179],$Vq1=[2,13,14,18,19,21,22,23,24,25,26,27,33,35,42,64,65,66,111,112,116,127,131,132],$Vr1=[2,13,14,21,22,23,24,25,26,27,33,35,42,64,65,66,111,112,116,127,131,132],$Vs1=[1,197],$Vt1=[1,202],$Vu1=[1,203],$Vv1=[1,209],$Vw1=[1,207],$Vx1=[2,52],$Vy1=[2,10,11,52],$Vz1=[2,10,11,52,73,74,75,76,77,78,79,87,88,90,91,92,93,94,95,96,97,119],$VA1=[2,10,11,52,73,74,75,76,77,78,79,87,88,90,91,92,93,94,95,96,97,98,99,100,119],$VB1=[1,226],$VC1=[1,225],$VD1=[1,227],$VE1=[1,264],$VF1=[1,263],$VG1=[1,265],$VH1=[1,268],$VI1=[2,16,33,35,89,97,102,103,105,106,108,109],$VJ1=[1,280],$VK1=[1,279],$VL1=[1,281],$VM1=[2,112],$VN1=[1,292],$VO1=[1,293],$VP1=[2,13,14,21,22,23,24,25,26,27,33,35,39,52,64,65,66,111,112,116,127,131,132],$VQ1=[1,323],$VR1=[1,324],$VS1=[1,321],$VT1=[1,322],$VU1=[2,13,14,21,22,23,24,25,26,27,33,35,39,64,65,66,111,112,116,127,131,132],$VV1=[1,329],$VW1=[1,328],$VX1=[1,330],$VY1=[2,13,14,33,35],$VZ1=[1,351],$V_1=[1,352],$V$1=[1,362],$V02=[1,363],$V12=[1,368],$V22=[1,369],$V32=[2,42,118,120];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"init_java":3,"ini":4,"EOF":5,"class_stmt":6,"concatenate_values":7,"expresion":8,"concatenate_values_re":9,"COMA":10,"CLOSE_PARENTHESIS":11,"print":12,"PRINT":13,"PRINTLN":14,"print_stmt":15,"OPEN_PARENTHESIS":16,"identifier":17,"PUBLIC":18,"PRIVATE":19,"data_type":20,"INT":21,"STRING":22,"CHAR":23,"BOOLEAN":24,"FLOAT":25,"DOUBLE":26,"VOID":27,"entry_stmt":28,"INTINPUT":29,"FLOATINPUT":30,"CHARINPUT":31,"this_stmt":32,"THIS":33,"DOT":34,"IDENTIFICADOR":35,"extends_re":36,"EXTENDS":37,"CLASS":38,"OPEN_CURLY":39,"class_instructions":40,"class_instruction":41,"CLOSE_CURLY":42,"ides":43,"PUNTERO":44,"function_parameters":45,"function_parameters_re":46,"function_stmt":47,"instructions":48,"variable_stmt":49,"asignacion_variable":50,"variable_stmt_re":51,"COLON":52,"class_statements":53,"constructor_class":54,"instruction":55,"variable":56,"if_stmt":57,"else_stmt":58,"switch_stmt":59,"for_stmt":60,"while_stmt":61,"do_stmt":62,"metodo":63,"CONTINUE":64,"BREAK":65,"RETURN":66,"stmt_enclusure":67,"increm":68,"INCREMENTO":69,"DECREMENTO":70,"valor_variable":71,"metodo_asignacion":72,"IGUAL":73,"O_MAS":74,"O_MENOS":75,"O_POR":76,"O_DIV":77,"O_MOD":78,"O_POW":79,"igualacion_re":80,"asignacion":81,"asignacion_post":82,"nombre_variables":83,"nombre_variables_re":84,"parameters":85,"parameters_re":86,"AND":87,"OR":88,"NOT":89,"MENOR":90,"MENOR_IGUAL":91,"MAYOR":92,"MAYOR_IGUAL":93,"DIFERENTE":94,"COMPARACION":95,"SUMA":96,"RESTA":97,"POR":98,"DIV":99,"MOD":100,"POW":101,"ENTERO":102,"DECIMAL":103,"accion_increm":104,"CADENA":105,"CARACTER":106,"booleanos":107,"TRUE":108,"FALSE":109,"block_condition":110,"IF":111,"ELSE":112,"switch_instructions":113,"switch_instruction":114,"default_instructions":115,"SWITCH":116,"cases_stmt":117,"CASE":118,"SEMI_COLON":119,"DEFAULT":120,"this_asignacion":121,"for_accion":122,"declaraciones_post":123,"declaraciones_post_re":124,"declaracion_for":125,"declaracion_for_re":126,"FOR":127,"for_inicio":128,"for_condition":129,"for_asignacion":130,"WHILE":131,"DO":132,"while_do":133,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"COMA",11:"CLOSE_PARENTHESIS",13:"PRINT",14:"PRINTLN",16:"OPEN_PARENTHESIS",18:"PUBLIC",19:"PRIVATE",21:"INT",22:"STRING",23:"CHAR",24:"BOOLEAN",25:"FLOAT",26:"DOUBLE",27:"VOID",29:"INTINPUT",30:"FLOATINPUT",31:"CHARINPUT",33:"THIS",34:"DOT",35:"IDENTIFICADOR",37:"EXTENDS",38:"CLASS",39:"OPEN_CURLY",42:"CLOSE_CURLY",44:"PUNTERO",52:"COLON",64:"CONTINUE",65:"BREAK",66:"RETURN",69:"INCREMENTO",70:"DECREMENTO",73:"IGUAL",74:"O_MAS",75:"O_MENOS",76:"O_POR",77:"O_DIV",78:"O_MOD",79:"O_POW",87:"AND",88:"OR",89:"NOT",90:"MENOR",91:"MENOR_IGUAL",92:"MAYOR",93:"MAYOR_IGUAL",94:"DIFERENTE",95:"COMPARACION",96:"SUMA",97:"RESTA",98:"POR",99:"DIV",100:"MOD",101:"POW",102:"ENTERO",103:"DECIMAL",105:"CADENA",106:"CARACTER",108:"TRUE",109:"FALSE",111:"IF",112:"ELSE",116:"SWITCH",118:"CASE",119:"SEMI_COLON",120:"DEFAULT",127:"FOR",131:"WHILE",132:"DO"},
productions_: [0,[3,2],[4,2],[4,2],[4,0],[7,2],[7,2],[9,3],[9,3],[9,1],[12,1],[12,1],[15,3],[15,2],[15,3],[17,1],[17,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[28,1],[28,1],[28,1],[32,3],[32,2],[32,3],[32,1],[36,2],[36,2],[36,0],[6,6],[6,2],[6,3],[6,5],[40,3],[40,3],[40,2],[40,1],[43,1],[43,2],[45,3],[45,2],[45,1],[46,4],[46,3],[46,4],[46,1],[46,2],[47,5],[47,2],[47,3],[47,4],[49,3],[51,4],[51,3],[51,1],[53,1],[53,1],[53,1],[54,5],[54,2],[54,3],[54,4],[41,2],[41,1],[48,2],[48,2],[48,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,2],[55,2],[55,2],[55,2],[55,2],[55,2],[55,2],[55,2],[55,2],[55,2],[55,3],[55,3],[55,2],[67,2],[67,1],[67,1],[68,1],[68,1],[71,1],[71,1],[71,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[80,3],[80,0],[50,3],[50,0],[81,3],[81,1],[81,0],[82,3],[82,1],[83,3],[84,4],[84,3],[84,1],[84,1],[56,2],[56,2],[56,3],[56,2],[56,3],[85,2],[85,2],[85,1],[86,3],[86,2],[86,1],[8,3],[8,3],[8,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,1],[8,1],[8,2],[8,2],[8,1],[8,1],[8,1],[8,1],[8,1],[107,1],[107,1],[104,1],[104,1],[63,3],[110,2],[110,2],[110,2],[57,4],[57,2],[57,3],[58,2],[113,2],[113,2],[113,2],[113,2],[115,2],[115,2],[115,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,1],[114,2],[114,2],[114,2],[114,2],[114,2],[114,2],[114,2],[114,2],[114,3],[114,2],[114,3],[59,6],[59,2],[59,3],[59,4],[59,6],[117,5],[117,3],[117,4],[117,3],[117,2],[117,2],[117,1],[121,2],[122,1],[122,1],[122,1],[123,2],[124,3],[124,3],[124,2],[124,1],[125,4],[125,2],[125,2],[126,3],[126,3],[126,1],[126,1],[60,6],[60,2],[60,3],[60,4],[60,5],[128,1],[129,2],[129,2],[130,1],[61,4],[61,4],[61,4],[62,3],[62,3],[133,3],[133,2],[133,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return reversaArreglo($$[$0-1]);
break;
case 2: case 128: case 209: case 216:

        $$[$0].push($$[$0-1]);
        this.$=$$[$0];
    
break;
case 3:
addSyntaxError("Se espera una clase de java", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 4: case 9: case 41: case 46: case 59: case 107: case 109: case 112: case 119: case 127: case 130: case 203: case 212: case 219:
this.$=[];
break;
case 5:

            $$[$0].push($$[$0-1]);
            this.$= reversaArreglo($$[$0]);
        
break;
case 6:
addSyntaxError("Se esperaba mas parametros o \')\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 7: case 69: case 168: case 172:

            $$[$0].push($$[$0-1]);
            this.$=$$[$0];
        
break;
case 8: case 198:
addSyntaxError("Se esperaba una expresion", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 10:
this.$=TIPO_PRINT.PRINT;
break;
case 11:
this.$=TIPO_PRINT.PRINTLN;
break;
case 12:

            this.$ = instruccionesApi.nuevoImprimir($$[$0],$$[$0-2], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
        
break;
case 13: case 53: case 64: case 165: case 193: case 221: case 235:
addSyntaxError("Se esperaba \'(\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 14:
addSyntaxError("Error de parametros, agregar parametros o un cierre \')\'", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));
break;
case 15:
this.$=TIPO_VISIBILIDAD.PUBLIC;
break;
case 16:
this.$=TIPO_VISIBILIDAD.PRIVATE;
break;
case 17:
this.$=TIPO_DATO.INT;
break;
case 18:
this.$=TIPO_DATO.STRING;
break;
case 19:
this.$=TIPO_DATO.CHAR;
break;
case 20:
this.$=TIPO_DATO.BOOLEAN;
break;
case 21: case 22:
this.$=TIPO_DATO.FLOAT;
break;
case 23:
this.$=TIPO_DATO.VOID;
break;
case 24:
this.$=TIPO_VALOR.INPUT_INT;
break;
case 25:
this.$=TIPO_VALOR.INPUT_FLOAT;
break;
case 26:
this.$=TIPO_VALOR.INPUT_CHAR;
break;
case 27:
this.$=instruccionesApi.nuevoValor($$[$0],null, TIPO_VALOR.THIS_IDENTIFICADOR,lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 28:
addSyntaxError("Agregar \'.\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 29: case 194: case 214:
addSyntaxError("Se esperaba un identificador", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 30:
this.$=instruccionesApi.nuevoValor($$[$0],null, TIPO_VALOR.IDENTIFICADOR,lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 31: case 61: case 68: case 72: case 73: case 74: case 75: case 76: case 77: case 92: case 96: case 97: case 151: case 175: case 176: case 177: case 178: case 179: case 180: case 205: case 206: case 207: case 225: case 228: case 234:
this.$=$$[$0];
break;
case 32:
addSyntaxError("Se esperaba el nombre de otra clase a extender", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 33:
this.$=null;
break;
case 34:

            this.$ = instruccionesApi.nuevaClase(TIPO_VISIBILIDAD.PUBLIC, $$[$0-3], $$[$0-2],reversaArreglo($$[$0]), null, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
        
break;
case 35:
addSyntaxError("Se esperaba \'class\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 36:
addSyntaxError("Agregar un identificador a la clase", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 37:
addSyntaxError("Se esperaba {", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));
break;
case 38:

            if($$[$0-1].rol == TIPO_INSTRUCCION.VARIABLE){
                let arregloVar = $$[$0-1].arreglo;
                for(let index=0; index<arregloVar.length; index++){
                    let helperV = arregloVar[index];
                    helperV.visibilidad = $$[$0-2];
                }
            }else{
                $$[$0-1].visibilidad = $$[$0-2];
            }            
            $$[$0].push($$[$0-1]);
            this.$=$$[$0];        
        
break;
case 39:

            addSyntaxError("No es un miembro, agregar un miembro con modificador \'public\' o \'private\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
            this.$=$$[$0];
        
break;
case 40:

            addSyntaxError("Se esperaba una variable o funcion", $$[$0-1], linea(this._$.first_line),columna(this._$.first_column));
            this.$=$$[$0];
        
break;
case 42:
var arreglo = []; arreglo.push($$[$0]); arreglo.push(false); this.$=arreglo; 
break;
case 43:
var arreglo = []; arreglo.push($$[$0]); arreglo.push(true); this.$=arreglo;
break;
case 44:

            var parametro = instruccionesApi.nuevoParametro($$[$0-1][0], $$[$0-2],$$[$0-1][1], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
            $$[$0].push(parametro);
            this.$=reversaArreglo($$[$0]);
        
break;
case 45:
addSyntaxError("Agregar un identificador", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 47:

            var parametro2 = instruccionesApi.nuevoParametro($$[$0-1][0], $$[$0-2],$$[$0-1][1], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
            $$[$0].push(parametro2);
            this.$= $$[$0];
        
break;
case 48:
addSyntaxError("Se esperaba un tipo mas identificador, ejemplo: \'int x\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 49:
addSyntaxError("Agregar un identificador", $$[$0], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 50: case 71: case 170: case 174:

            this.$=[];
        
break;
case 51:
addSyntaxError("Se esperaba \')\'", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 52:
            
            this.$ = instruccionesApi.nuevaFuncion(null, $$[$0-4],null, reversaArreglo($$[$0]), $$[$0-2], lenguaje, linea(this._$.first_line), columna(this._$.first_column))
        
break;
case 54:
addSyntaxError("Se esperaba parametros o \')\'", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));
break;
case 55:
addSyntaxError("No es una declaracion", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 56:

            var id = instruccionesApi.nuevoValor($$[$0-2],null, TIPO_VALOR.IDENTIFICADOR,lenguaje, linea(this._$.first_line), columna(this._$.first_column));
            for(var index=0; index<$$[$0-1].length; index++){
                $$[$0-1][index].id= id;
                $$[$0].push($$[$0-1][index]);
            }
            $$[$0].push(instruccionesApi.nuevaDeclaracion(null, id,[], null, lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
            this.$=reversaArreglo($$[$0]);
        
break;
case 57:

            var id = instruccionesApi.nuevoValor($$[$0-2],null, TIPO_VALOR.IDENTIFICADOR,lenguaje, linea(this._$.first_line), columna(this._$.first_column));
            for(var index=0; index<$$[$0-1].length; index++){
                $$[$0-1][index].id = id;
                $$[$0].push($$[$0-1][index]);
            }
            $$[$0].push(instruccionesApi.nuevaDeclaracion(null, id,[], null, lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
            this.$=$$[$0];
        
break;
case 58:
addSyntaxError("Se esperaba un identificador", $$[$0], linea(this._$.first_line), columna(this._$.first_column)); this.$=$$[$0];
break;
case 60:
this.$=instruccionesApi.nuevaVariable($$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 62:
addSyntaxError("Se esperaba modificadores de la clase, pueden ser public o private", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 63:

            this.$ = instruccionesApi.nuevoConstructor(null, $$[$0-4], reversaArreglo($$[$0]), $$[$0-2], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
        
break;
case 65:
addSyntaxError("Se esperaban parametros o un cierre \')\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 66:
addSyntaxError("Se esperaba \'}\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 67:

            
            if($$[$0].rol == TIPO_INSTRUCCION.VARIABLE){
                let variableArreglo = $$[$0].arreglo;
                for(var index=0; index< variableArreglo.length; index++){
                    let varD = variableArreglo[index];
                    varD.tipo = $$[$0-1];
                }
            }else{
               $$[$0].tipo = $$[$0-1]; 
            }
            this.$=$$[$0];
        
break;
case 70: case 169: case 173:
addSyntaxError("Se esperaba una declaracion", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 78: case 80: case 82: case 146: case 161: case 181: case 183: case 185: case 226:
this.$=$$[$0-1];
break;
case 79: case 81: case 83: case 85: case 87: case 89: case 118: case 124: case 171: case 182: case 184: case 186: case 188: case 191: case 218: case 227:
addSyntaxError("Se esperaba \';\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 84: case 187:
this.$=instruccionesApi.nuevoContinue(linea(this._$.first_line), columna(this._$.first_column));
break;
case 86:
this.$=instruccionesApi.nuevoBreak(linea(this._$.first_line), columna(this._$.first_column));
break;
case 88: case 189:
this.$=instruccionesApi.nuevoReturn($$[$0-1], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 90:
addSyntaxError("Se esperaba un valor a retornar", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 91:
this.$=reversaArreglo($$[$0]);
break;
case 93:
addSyntaxError("Se esperaba una declaracion o \'{\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 94: case 158:
this.$=TIPO_OPERACION.INCREMENTO;
break;
case 95: case 159:
this.$=TIPO_OPERACION.DECREMENTO;
break;
case 98:
addSyntaxError("Se esperaba una expresion o valor par asignar", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 99:
this.$=TIPO_OPERACION.IGUAL;
break;
case 100:
this.$=TIPO_OPERACION.SUMA;
break;
case 101:
this.$=TIPO_OPERACION.RESTA;
break;
case 102:
this.$=TIPO_OPERACION.MULTIPLICACION;
break;
case 103:
this.$=TIPO_OPERACION.DIVISION;
break;
case 104:
this.$=TIPO_OPERACION.MOD;
break;
case 105:
this.$=TIPO_OPERACION.POW;
break;
case 106:

        var valorAsignado = instruccionesApi.nuevaAsignacion_O(null,[], $$[$0-2], $$[$0-1], lenguaje, linea(this._$.first_line), columna(this._$.first_column)  );
        $$[$0].push(valorAsignado);
        this.$=$$[$0];
    
break;
case 108:

        $$[$0].push(instruccionesApi.nuevaAsignacion_O(null,[], $$[$0-2], $$[$0-1], lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
        this.$=reversaArreglo($$[$0]);
    
break;
case 110: case 113:

        $$[$0].push(instruccionesApi.nuevaAsignacion_O(null,[], $$[$0-2], $$[$0-1], lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
        this.$ = reversaArreglo($$[$0]);
    
break;
case 111:

        var arreglo = [];
        arreglo.push(instruccionesApi.nuevaAsignacion_O(null,[], $$[$0], null, lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
        this.$ = arreglo;
    
break;
case 114:

        var expresion = instruccionesApi.nuevoValor("1",null,TIPO_VALOR.ENTERO, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
        var arreglo = [];
        arreglo.push(instruccionesApi.nuevaAsignacion_O(null,[], $$[$0], expresion, lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
        this.$ = arreglo;
    
break;
case 115:

        for(var index=0; index<$$[$0-1].length; index++){
            $$[$0-1][index].id = $$[$0-2];
            $$[$0].push($$[$0-1][index]);
        }
        $$[$0].push(instruccionesApi.nuevaDeclaracion(null, $$[$0-2],[],null, lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
        this.$=reversaArreglo($$[$0]);
    
break;
case 116:

        for(var index=0; index<$$[$0-1].length; index++){
            $$[$0-1][index].id = $$[$0-2];
            $$[$0].push($$[$0-1][index]);
        }
        $$[$0].push(instruccionesApi.nuevaDeclaracion(null, $$[$0-2],[], null, lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
        this.$=$$[$0];
    
break;
case 117:
addSyntaxError("Se esperaba una variable", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 120:

        for(var index=0; index<$$[$0].length; index++){
            if($$[$0][index].rol == TIPO_INSTRUCCION.DECLARACION){
                $$[$0][index].tipo = $$[$0-1];
                $$[$0][index].visibilidad = TIPO_VISIBILIDAD.LOCAL;
            }
        }
        this.$= instruccionesApi.nuevaVariable($$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
    
break;
case 121:
addSyntaxError("Se esperaba un identificador (variable) ", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 122:

        for(var index=0; index<$$[$0-1].length; index++){
            $$[$0-1][index].id = $$[$0-2];
        }
        this.$ = instruccionesApi.nuevaVariable($$[$0-1], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
    
break;
case 123:
addSyntaxError("Una asignacion era esperada", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 125: case 208:

        $$[$0].push($$[$0-1]);
        this.$=reversaArreglo($$[$0]);
    
break;
case 126: case 129: case 163:
addSyntaxError("Se esperaba una expresion", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));
break;
case 131:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.AND, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 132:
this.$=instruccionesApi.operacionAritmetica($$[$0-2], $$[$0], TIPO_OPERACION.OR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 133:
this.$=instruccionesApi.operacionUnaria($$[$0], TIPO_OPERACION.NOT, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 134:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.MENOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 135:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.MENOR_IGUAL, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 136:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 137:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR_IGUAL, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 138:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 139:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0],TIPO_OPERACION.COMPARACION, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 140:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.SUMA, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 141:
this.$=instruccionesApi.operacionAritmetica($$[$0-2], $$[$0], TIPO_OPERACION.RESTA, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 142:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 143:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 144:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0],TIPO_OPERACION.MOD, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 145:
this.$=instruccionesApi.operacionAritmetica($$[$0-2], $$[$0], TIPO_OPERACION.POW, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 147:
this.$=instruccionesApi.nuevoValor($$[$0],null, TIPO_VALOR.ENTERO, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 148:
this.$=instruccionesApi.nuevoValor($$[$0],null, TIPO_VALOR.DECIMAL, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 149:
this.$=instruccionesApi.operacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 150:
this.$=instruccionesApi.operacionUnaria($$[$0-1], $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 152:
this.$=instruccionesApi.nuevoValor($$[$0],null, TIPO_VALOR.CADENA, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 153:
this.$=instruccionesApi.nuevoValor($$[$0],null, TIPO_VALOR.CARACTER, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 154:
this.$=instruccionesApi.nuevoValor($$[$0],null, TIPO_VALOR.BOOLEAN, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 155:
this.$=instruccionesApi.nuevoValor($$[$0],null, TIPO_VALOR.METODO, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 156:
this.$="true";
break;
case 157:
this.$="false";
break;
case 160:

        var newMetodo = instruccionesApi.nuevoMetodo($$[$0-2], $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
        this.$= newMetodo;
    
break;
case 162: case 195:
addSyntaxError("Se esperaba \')\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 164:

        this.$ = instruccionesApi.nuevoIf($$[$0-1], $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
    
break;
case 166: case 223: case 236:
addSyntaxError("Se esperaba una condicion", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 167:

        var else_ = instruccionesApi.nuevoElse(null, null, null, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
        if(!Array.isArray($$[$0])){
            if($$[$0].rol == TIPO_INSTRUCCION.IF){
                else_.condicion = $$[$0].condicion;
                else_.instrucciones = $$[$0].instrucciones;
            }else{
                console.log("ERROR EN ELSE_STMT");
            }
        }else{
            else_.instrucciones = $$[$0];
        }
        this.$=else_;
    
break;
case 190:
addSyntaxError("Se esperaba un valor para retornar", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 192:

        this.$=instruccionesApi.nuevoSwitch($$[$0-3], reversaArreglo($$[$0]), lenguaje, linea(this._$.first_line), columna(this._$.first_column));
    
break;
case 196:
addSyntaxError("Se esperaba \'{\'", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));
break;
case 197:

        $$[$0].push(instruccionesApi.nuevoCase($$[$0-3], reversaArreglo($$[$0-1]), lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
        this.$= $$[$0];
    
break;
case 199:
addSyntaxError("Se esperaba \':\'", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 200:

        var defaultArray = [];
        defaultArray.push(instruccionesApi.nuevoDefault(reversaArreglo($$[$0]), lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
        this.$=defaultArray;
    
break;
case 201:
addSyntaxError("Se esperaba \':\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 202:
addSyntaxError("Se esperaba un caso o \'}\'", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 204:

            for(var index=0; index<$$[$0].length; index++){
                $$[$0][index].id = $$[$0-1];
            }
            this.$ = $$[$0];
        
break;
case 210:

        addSyntaxError("Se esperaba una accion", ", "+$$[$0-1], linea(this._$.first_line), columna(this._$.first_column));
        this.$=$$[$0];
        
break;
case 211:
addSyntaxError("Se esperaba \';\'", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 213:

        for(var index=0; index<$$[$0-1].length; index++){
                $$[$0-1][index].id = $$[$0-2];
            }
        $$[$0].push(instruccionesApi.nuevaDeclaracion(TIPO_VISIBILIDAD.LOCAL, $$[$0-2],[], $$[$0-3], lenguaje, linea(this._$.first_line), columna(this._$.first_column)));            
        this.$ = reversaArreglo($$[$0]);
    
break;
case 215:
$$[$0].push($$[$0-1]); this.$=reversaArreglo($$[$0]);
break;
case 217:

        addSyntaxError("Se esperaba una expresion", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));
        this.$=$$[$0];
    
break;
case 220:

        this.$= instruccionesApi.nuevoFor($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
    
break;
case 222:
addSyntaxError("Se esperaba una asignacion", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 224:
addSyntaxError("Se esperaba una asignacion o accion", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 229:

        this.$ = instruccionesApi.nuevoWhile($$[$0-1], $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
    
break;
case 230:
addSyntaxError("Se esperaba \'(\'", $$[$0-2], linea(this._$.first_line), columna(this._$.first_column));
break;
case 231:
addSyntaxError("Se esperaba una condicion", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));
break;
case 232:

        this.$ = instruccionesApi.nuevoDoWhile($$[$0-1], $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
    
break;
case 233:
addSyntaxError("Agregar un while", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,18:$V2},{1:[3]},{5:[1,6]},{2:$V0,4:7,5:$V1,6:3,18:$V2},{2:$V0,4:8,5:$V1,6:3,18:$V2},{2:[1,10],38:[1,9]},{1:[2,1]},{5:[2,2]},{5:[2,3]},{2:[1,12],35:[1,11]},o($V3,[2,35]),o($V4,[2,33],{36:13,37:[1,14]}),o($V3,[2,36]),{2:[1,16],39:[1,15]},{2:[1,18],35:[1,17]},{2:$V5,17:20,18:$V6,19:$V7,40:19,42:$V8},o($V3,[2,37]),o($V4,[2,31]),o($V4,[2,32]),o($V3,[2,34]),{2:[1,26],20:27,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,35:[1,36],41:25,54:28},{2:$V5,17:20,18:$V6,19:$V7,40:37,42:$V8},o($V3,[2,41]),o($Vg,[2,15]),o($Vg,$Vh),{2:$V5,17:20,18:$V6,19:$V7,40:38,42:$V8},{2:$V5,17:20,18:$V6,19:$V7,40:39,42:$V8},{2:[1,43],35:[1,44],47:42,49:41,53:40},o($Vi,[2,68]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),o($Vj,[2,22]),o($Vj,[2,23]),{2:[1,46],16:[1,45]},o($V3,[2,40]),o($V3,[2,38]),o($V3,$V4),o($Vi,[2,67]),o($Vi,[2,60]),o($Vi,[2,61]),o($Vi,[2,62]),o($Vk,$Vl,{50:47,72:50,2:[1,49],16:[1,48],73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs}),{2:[1,59],11:$Vt,20:60,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,45:58},o($Vi,[2,64]),{10:$Vu,51:62,52:$Vv},{2:[1,66],11:$Vt,20:60,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,45:65},o($Vi,[2,53]),{2:$Vw,8:68,16:$Vx,28:69,29:$Vy,30:$Vz,31:$VA,32:76,33:$VB,35:$VC,63:80,71:67,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},o($VL,[2,99]),o($VL,[2,100]),o($VL,[2,101]),o($VL,[2,102]),o($VL,[2,103]),o($VL,[2,104]),o($VL,[2,105]),{2:[1,89],39:[1,88]},o($Vi,[2,65]),{2:[1,91],35:$VM,43:90,44:$VN},o($V4,[2,46]),o($Vi,[2,56]),{2:[1,95],35:[1,94]},o($Vi,[2,59]),{2:[1,97],39:[1,96]},o($Vi,[2,54]),o($VO,$VP,{80:98,72:99,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs}),o($VQ,[2,96],{87:$VR,88:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),o($VQ,[2,97]),o($VQ,[2,98]),{8:114,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:115,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},o($V31,[2,147]),o($V31,[2,148]),{8:116,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},o($V31,[2,151],{104:117,69:[1,118],70:[1,119]}),o($V31,[2,152]),o($V31,[2,153]),o($V31,[2,154]),o($V31,[2,155]),o($VQ,[2,24]),o($VQ,[2,25]),o($VQ,[2,26]),{2:[1,121],34:[1,120]},o($V41,$V51,{16:[1,122]}),o($V31,[2,156]),o($V31,[2,157]),{2:$V61,12:147,13:$V71,14:$V81,15:135,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,42:$V91,48:123,55:124,56:127,57:128,58:129,59:130,60:131,61:132,62:133,63:134,64:$Va1,65:$Vb1,66:$Vc1,111:$Vd1,112:$Ve1,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},o($Vi,[2,66]),{2:$Vj1,10:$Vk1,11:$Vl1,46:150},o($V4,[2,45]),o($Vm1,[2,42]),{35:[1,154]},o($Vk,$Vl,{72:50,50:155,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs}),{10:$Vu,51:156,52:$Vv},{2:$V61,12:147,13:$V71,14:$V81,15:135,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,42:$V91,48:157,55:124,56:127,57:128,58:129,59:130,60:131,61:132,62:133,63:134,64:$Va1,65:$Vb1,66:$Vc1,111:$Vd1,112:$Ve1,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},o($Vi,[2,55]),o($VO,[2,108]),{2:$Vw,8:68,16:$Vx,28:69,29:$Vy,30:$Vz,31:$VA,32:76,33:$VB,35:$VC,63:80,71:158,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:159,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:160,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:161,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:162,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:163,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:164,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:165,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:166,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:167,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:168,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:169,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:170,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:171,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{8:172,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},o($Vn1,[2,133],{96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),{11:[1,173],87:$VR,88:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21},o($V31,[2,149]),o($V31,[2,150]),o($V31,[2,158]),o($V31,[2,159]),{2:[1,175],35:[1,174]},o($V41,[2,28]),{2:$Vo1,8:177,11:$Vp1,16:$Vx,32:76,33:$VB,35:$VC,63:80,85:176,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},o($Vi,[2,63]),{2:$V61,12:147,13:$V71,14:$V81,15:135,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,42:$V91,48:180,55:124,56:127,57:128,58:129,59:130,60:131,61:132,62:133,63:134,64:$Va1,65:$Vb1,66:$Vc1,111:$Vd1,112:$Ve1,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},{2:$V61,12:147,13:$V71,14:$V81,15:135,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,42:$V91,48:181,55:124,56:127,57:128,58:129,59:130,60:131,61:132,62:133,63:134,64:$Va1,65:$Vb1,66:$Vc1,111:$Vd1,112:$Ve1,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},o($Vq1,[2,71]),o($Vr1,[2,72]),o($Vr1,[2,73]),o($Vr1,[2,74]),o($Vr1,[2,75]),o($Vr1,[2,76]),o($Vr1,[2,77]),{2:[1,183],52:[1,182]},{2:[1,185],52:[1,184]},{2:[1,187],52:[1,186]},{2:[1,189],52:[1,188]},{2:[1,191],52:[1,190]},{2:[1,193],8:192,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{2:[1,195],32:196,33:$VB,35:$Vs1,83:194},{2:[1,199],68:201,69:$Vt1,70:$Vu1,72:200,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,82:198},{2:[1,205],16:[1,204]},{2:$Vv1,12:147,13:$V71,14:$V81,15:135,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,39:$Vw1,55:208,56:127,57:128,58:129,59:130,60:131,61:132,62:133,63:134,64:$Va1,65:$Vb1,66:$Vc1,67:206,111:$Vd1,112:$Ve1,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},{2:[1,211],16:[1,210]},{2:[1,213],16:[1,212]},{2:[1,215],16:[1,214]},{2:$Vv1,12:147,13:$V71,14:$V81,15:135,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,39:$Vw1,55:208,56:127,57:128,58:129,59:130,60:131,61:132,62:133,63:134,64:$Va1,65:$Vb1,66:$Vc1,67:216,111:$Vd1,112:$Ve1,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},{2:[1,218],16:[1,217]},o($Vh,[2,10]),o($Vh,[2,11]),o($V4,[2,44]),{2:[1,220],20:219,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf},o($V4,[2,50]),{2:$Vj1,10:$Vk1,11:$Vl1,46:221},o($Vm1,[2,43]),{10:$Vu,51:222,52:$Vv},o($Vi,[2,58]),o($Vi,$Vx1),o($Vy1,$VP,{72:99,80:223,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs}),o([2,10,11,52,73,74,75,76,77,78,79,87,88,119],[2,131],{90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),o([2,10,11,52,73,74,75,76,77,78,79,88,119],[2,132],{87:$VR,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),o($Vn1,[2,134],{96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),o($Vn1,[2,135],{96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),o($Vn1,[2,136],{96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),o($Vn1,[2,137],{96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),o($Vn1,[2,138],{96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),o($Vn1,[2,139],{96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21}),o($Vz1,[2,140],{98:$V$,99:$V01,100:$V11,101:$V21}),o($Vz1,[2,141],{98:$V$,99:$V01,100:$V11,101:$V21}),o($VA1,[2,142],{101:$V21}),o($VA1,[2,143],{101:$V21}),o($VA1,[2,144],{101:$V21}),o($V31,[2,145]),o($V31,[2,146]),o($V41,[2,27]),o($V41,[2,29]),o($V31,[2,160]),{2:$VB1,10:$VC1,11:$VD1,86:224,87:$VR,88:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21},{2:$Vo1,8:177,11:$Vp1,16:$Vx,32:76,33:$VB,35:$VC,63:80,85:228,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},o($V31,[2,127]),o($Vq1,[2,69]),o($Vq1,[2,70]),o($Vr1,[2,78]),o($Vr1,[2,79]),o($Vr1,[2,80]),o($Vr1,[2,81]),o($Vr1,[2,82]),o($Vr1,[2,83]),o($Vr1,[2,84]),o($Vr1,[2,85]),o($Vr1,[2,86]),o($Vr1,[2,87]),{2:[1,230],52:[1,229],87:$VR,88:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21},o($Vr1,[2,90]),o($Vr1,[2,120]),o($Vr1,[2,121]),o($VO,$Vl,{72:50,50:231,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs}),o([2,10,52,69,70,73,74,75,76,77,78,79],$V51),{2:[1,233],52:[1,232]},o($Vr1,[2,123]),{2:$Vw,8:68,16:$Vx,28:69,29:$Vy,30:$Vz,31:$VA,32:76,33:$VB,35:$VC,63:80,71:234,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},o($Vx1,[2,114]),o($Vy1,[2,94]),o($Vy1,[2,95]),{2:[1,236],8:237,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK,110:235},o($Vr1,[2,165]),o($Vr1,[2,167]),{2:$V61,12:147,13:$V71,14:$V81,15:135,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,42:$V91,48:238,55:124,56:127,57:128,58:129,59:130,60:131,61:132,62:133,63:134,64:$Va1,65:$Vb1,66:$Vc1,111:$Vd1,112:$Ve1,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},o($Vr1,[2,92]),o($Vr1,[2,93]),{2:[1,240],35:[1,239]},o($Vr1,[2,193]),{2:[1,242],20:244,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:246,33:$VB,35:$Vs1,121:245,125:243,128:241},o($Vr1,[2,221]),{2:[1,248],8:237,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK,110:247},{2:[1,250],8:237,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK,110:249},{2:[1,252],131:[1,253],133:251},{2:[1,255],7:254,8:256,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},o($Vy1,[2,13]),{2:[1,258],35:$VM,43:257,44:$VN},{2:$Vj1,10:$Vk1,11:$Vl1,46:259},o($V4,[2,51]),o($Vi,[2,57]),o($Vy1,[2,106]),o($V31,[2,125]),{8:260,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{2:$VB1,10:$VC1,11:$VD1,86:261},o($V31,[2,130]),o($V31,[2,126]),o($Vr1,[2,88]),o($Vr1,[2,89]),{2:$VE1,10:$VF1,52:$VG1,84:262},o($Vr1,[2,122]),o($Vr1,[2,124]),o($Vx1,$VP,{72:99,80:266,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs}),{2:$Vv1,12:147,13:$V71,14:$V81,15:135,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,39:$Vw1,55:208,56:127,57:128,58:129,59:130,60:131,61:132,62:133,63:134,64:$Va1,65:$Vb1,66:$Vc1,67:267,111:$Vd1,112:$Ve1,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},o($Vr1,[2,166],{11:$VH1}),{2:[1,270],11:[1,269],87:$VR,88:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21},o($Vr1,[2,91]),{2:[1,272],11:[1,271]},o($Vr1,[2,194]),{2:[1,274],8:275,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK,129:273},o($Vr1,[2,222]),o($VI1,[2,225]),{2:[1,277],32:276,33:$VB,35:$Vs1},{2:$VJ1,10:$VK1,52:$VL1,126:278},o($Vy1,$VM1,{81:282,72:283,68:284,69:$Vt1,70:$Vu1,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs}),{2:$Vv1,12:147,13:$V71,14:$V81,15:135,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,39:$Vw1,55:208,56:127,57:128,58:129,59:130,60:131,61:132,62:133,63:134,64:$Va1,65:$Vb1,66:$Vc1,67:285,111:$Vd1,112:$Ve1,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},{2:$Vv1,11:$VH1,12:147,13:$V71,14:$V81,15:135,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,39:$Vw1,55:208,56:127,57:128,58:129,59:130,60:131,61:132,62:133,63:134,64:$Va1,65:$Vb1,66:$Vc1,67:286,111:$Vd1,112:$Ve1,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},{2:$Vv1,12:147,13:$V71,14:$V81,15:135,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,39:$Vw1,55:208,56:127,57:128,58:129,59:130,60:131,61:132,62:133,63:134,64:$Va1,65:$Vb1,66:$Vc1,67:287,111:$Vd1,112:$Ve1,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},{11:$VH1},o($Vx1,[2,232]),o($Vx1,[2,233]),{2:[1,289],16:[1,288]},o($Vy1,[2,12]),o($Vy1,[2,14]),{2:[1,291],9:290,10:$VN1,11:$VO1,87:$VR,88:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21},{2:$Vj1,10:$Vk1,11:$Vl1,46:294},{2:$Vj1,10:$Vk1,11:$Vl1,46:295},o($V4,[2,48]),{2:$VB1,10:$VC1,11:$VD1,86:296,87:$VR,88:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21},o($V31,[2,129]),o($Vr1,[2,115]),{2:[1,298],32:297,33:$VB,35:$Vs1},o($Vr1,[2,118]),o($Vr1,[2,119]),o($Vx1,[2,113]),o($Vr1,[2,164]),o($VP1,[2,163]),o($VP1,[2,161]),o($VP1,[2,162]),{2:[1,300],39:[1,299]},o($Vr1,[2,195]),{2:[1,302],12:147,13:$V71,14:$V81,15:307,32:246,33:$VB,35:$VC,63:306,121:305,122:304,123:303,130:301},o($Vr1,[2,223]),{2:[1,309],52:[1,308],87:$VR,88:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21},o($VO,$VM1,{72:283,68:284,81:310,69:$Vt1,70:$Vu1,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs}),o($VI1,[2,214]),o($VI1,[2,215]),{2:[1,312],32:246,33:$VB,35:$Vs1,121:311},o($VI1,[2,218]),o($VI1,[2,219]),o($Vy1,[2,204]),{2:$Vw,8:68,16:$Vx,28:69,29:$Vy,30:$Vz,31:$VA,32:76,33:$VB,35:$VC,63:80,71:313,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},o($Vy1,[2,111]),o($Vr1,[2,229]),o($Vr1,[2,231]),o($Vr1,[2,230]),{2:[1,315],8:237,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK,110:314},o($Vx1,[2,235]),o($Vy1,[2,5]),o($Vy1,[2,6]),{2:[1,317],8:316,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},o($Vy1,[2,9]),o($V4,[2,47]),o($V4,[2,49]),o($V31,[2,128]),o($VO,$Vl,{72:50,50:318,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs}),{2:$VE1,10:$VF1,52:$VG1,84:319},{2:$VQ1,42:$VR1,117:320,118:$VS1,120:$VT1},{2:$VQ1,42:$VR1,117:325,118:$VS1,120:$VT1},{2:$Vv1,12:147,13:$V71,14:$V81,15:135,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,39:$Vw1,55:208,56:127,57:128,58:129,59:130,60:131,61:132,62:133,63:134,64:$Va1,65:$Vb1,66:$Vc1,67:326,111:$Vd1,112:$Ve1,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},o($Vr1,[2,224]),o($VU1,[2,228]),{2:$VV1,10:$VW1,11:$VX1,124:327},o($Vm1,[2,205]),o($Vm1,[2,206]),o($Vm1,[2,207]),o($VY1,[2,226]),o($VY1,[2,227]),{2:$VJ1,10:$VK1,52:$VL1,126:331},{2:$VJ1,10:$VK1,52:$VL1,126:332},{2:$VJ1,10:$VK1,52:$VL1,126:333},o($Vy1,$VP,{72:99,80:334,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs}),o($Vx1,[2,234]),o($Vx1,[2,236],{11:$VH1}),{9:335,10:$VN1,11:$VO1,87:$VR,88:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21},{9:336,10:$VN1,11:$VO1},{2:$VE1,10:$VF1,52:$VG1,84:337},o($Vr1,[2,117]),o($Vr1,[2,192]),{2:[1,339],8:338,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},{2:[1,341],119:[1,340]},{2:$VQ1,42:$VR1,117:342,118:$VS1,120:$VT1},o($Vr1,[2,203]),o($Vr1,[2,196]),o($Vr1,[2,220]),o($VU1,[2,208]),{2:[1,344],12:147,13:$V71,14:$V81,15:307,32:246,33:$VB,35:$VC,63:306,121:305,122:343},{2:$VV1,10:$VW1,11:$VX1,124:345},o($VU1,[2,212]),o($VI1,[2,213]),o($VI1,[2,216]),o($VI1,[2,217]),o($Vy1,[2,110]),o($Vy1,[2,7]),o($Vy1,[2,8]),o($Vr1,[2,116]),{2:[1,347],87:$VR,88:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21,119:[1,346]},{2:$VQ1,42:$VR1,117:348,118:$VS1,120:$VT1},{2:$VZ1,12:147,13:$V71,14:$V81,15:361,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,42:$V_1,56:353,57:354,58:355,59:356,60:357,61:358,62:359,63:360,64:$V$1,66:$V02,111:$Vd1,112:$Ve1,114:350,115:349,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},o($Vr1,[2,201]),o($Vr1,[2,202]),{2:$VV1,10:$VW1,11:$VX1,124:364},{2:$VV1,10:$VW1,11:$VX1,124:365},o($VU1,[2,211]),{2:$V12,12:147,13:$V71,14:$V81,15:361,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,56:353,57:354,58:355,59:356,60:357,61:358,62:359,63:360,64:$V$1,65:$V22,66:$V02,111:$Vd1,112:$Ve1,113:366,114:367,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},{2:$VQ1,42:$VR1,117:370,118:$VS1,120:$VT1},o($Vr1,[2,198]),o($Vr1,[2,200]),{2:$VZ1,12:147,13:$V71,14:$V81,15:361,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,42:$V_1,56:353,57:354,58:355,59:356,60:357,61:358,62:359,63:360,64:$V$1,66:$V02,111:$Vd1,112:$Ve1,114:350,115:371,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},{2:$VZ1,12:147,13:$V71,14:$V81,15:361,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,42:$V_1,56:353,57:354,58:355,59:356,60:357,61:358,62:359,63:360,64:$V$1,66:$V02,111:$Vd1,112:$Ve1,114:350,115:372,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},o($Vr1,[2,174]),o($Vr1,[2,175]),o($Vr1,[2,176]),o($Vr1,[2,177]),o($Vr1,[2,178]),o($Vr1,[2,179]),o($Vr1,[2,180]),{2:[1,374],52:[1,373]},{2:[1,376],52:[1,375]},{2:[1,378],52:[1,377]},{2:[1,380],52:[1,379]},{2:[1,382],8:381,16:$Vx,32:76,33:$VB,35:$VC,63:80,89:$VD,97:$VE,102:$VF,103:$VG,105:$VH,106:$VI,107:79,108:$VJ,109:$VK},o($VU1,[2,209]),o($VU1,[2,210]),{2:$VQ1,42:$VR1,117:383,118:$VS1,120:$VT1},{2:$V12,12:147,13:$V71,14:$V81,15:361,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,56:353,57:354,58:355,59:356,60:357,61:358,62:359,63:360,64:$V$1,65:$V22,66:$V02,111:$Vd1,112:$Ve1,113:384,114:367,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},{2:$V12,12:147,13:$V71,14:$V81,15:361,20:139,21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf,32:140,33:$VB,35:$VC,56:353,57:354,58:355,59:356,60:357,61:358,62:359,63:360,64:$V$1,65:$V22,66:$V02,111:$Vd1,112:$Ve1,113:385,114:367,116:$Vf1,127:$Vg1,131:$Vh1,132:$Vi1},{2:[1,387],52:[1,386]},o($Vr1,[2,199]),o($Vr1,[2,172]),o($Vr1,[2,173]),o($Vr1,[2,181]),o($Vr1,[2,182]),o($Vr1,[2,183]),o($Vr1,[2,184]),o($Vr1,[2,185]),o($Vr1,[2,186]),o($Vr1,[2,187]),o($Vr1,[2,188]),{2:[1,389],52:[1,388],87:$VR,88:$VS,90:$VT,91:$VU,92:$VV,93:$VW,94:$VX,95:$VY,96:$VZ,97:$V_,98:$V$,99:$V01,100:$V11,101:$V21},o($Vr1,[2,190]),o($Vr1,[2,197]),o($V32,[2,168]),o($V32,[2,169]),o($V32,[2,170]),o($V32,[2,171]),o($Vr1,[2,189]),o($Vr1,[2,191])],
defaultActions: {6:[2,1],7:[2,2],8:[2,3]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //import
    var ErrorLexico = require('../../../error/LexicalError.js');
    var ErrorSintactico = require('../../../error/SyntaxError.js');
    //Errores
    var erroresLexicos = [];
    var erroresSintacticos = [];

    //Lineas extras
    var lineNumber = 0;
    var columnNumber=0;

    module.exports.setLineNumber = function(line){
        lineNumber = line;
    }

    module.exports.setColumnNumber = function(column){
        columnNumber=column;
    }

    module.exports.setErroresLexicos = function(errors){
        erroresLexicos = errors;
    }

    module.exports.setErroresSintacticos = function(errors){
        erroresSintacticos = errors;
    }

    function getLexicalErrors(){
        return lexicalErrorsArray;
    }

    function addLexicalError(lexema, linea, column){   
        try{
            var errorLexico = new ErrorLexico(lexema, linea, column);
            erroresLexicos.push(errorLexico);
        }catch(ex){
            console.log(ex);
        }                  
    }

    function addSyntaxError(descripcion, token, line, column){
		try{
			var errorSintactico = new ErrorSintactico(descripcion, token, line, column);
			erroresSintacticos.push(errorSintactico);
		}catch(ex){
			console.log(ex);
		}
	}

    const TIPO_VISIBILIDAD = require('../../../api/Instrucciones').TIPO_VISIBILIDAD;
    const TIPO_LENGUAJE = require('../../../api/Instrucciones').TIPO_LENGUAJE;
    const TIPO_DATO = require('../../../api/Instrucciones').TIPO_DATO;
    const TIPO_VALOR = require('../../../api/Instrucciones').TIPO_VALOR;
    const TIPO_OPERACION = require('../../../api/Instrucciones').TIPO_OPERACION;
    const TIPO_INSTRUCCION = require('../../../api/Instrucciones').TIPO_INSTRUCCION;
    const TIPO_PRINT = require('../../../api/Instrucciones').TIPO_PRINT;
    const instruccionesApi = require('../../../api/InstruccionesApi').instruccionesApi;
    const lenguaje = TIPO_LENGUAJE.JAVA;

    function reversaArreglo(arreglo){
        var aux = [];
        for(var index=arreglo.length-1; index>=0; index--){
            aux.push(arreglo[index]);
        }
        return aux;
    }

   function linea(linea){
        return linea + lineNumber;
    }

    function columna(column){
        return column + columnNumber;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*ignore*/;
break;
case 1:/*ignore*/;
break;
case 2:/*ignore*/;
break;
case 3: 
                return 'PACKAGE';
            
break;
case 4: 
            return 93;       
            
break;
case 5: 
            return 91;       
            
break;
case 6: 
    return 94;               
            
break;
case 7:return 95;
break;
case 8: 
                           return 87;       
            
break;
case 9:return 44;
break;
case 10: 
                           return 88;       
            
break;
case 11: 
                           return 89;       
            
break;
case 12: 
                           return 74;       
            
break;
case 13: 
                           return 75;       
            
break;
case 14: 
                           return 77;       
            
break;
case 15: 
                           return 76;       
            
break;
case 16: 
                           return 78;       
            
break;
case 17: 
                           return 79;       
            
break;
case 18: 
                           return 73;       
            
break;
case 19: 
                           return 69;       
            
break;
case 20: 
                           return 70;       
            
break;
case 21: 
                           return 96;       
            
break;
case 22: 
                           return 97;       
            
break;
case 23: 
                           return 98;       
            
break;
case 24: 
                           return 99;       
            
break;
case 25: 
                           return 100;       
            
break;
case 26: 
                           return 101;       
            
break;
case 27: 
                           return 92;       
            
break;
case 28: 
                           return 90;       
            
break;
case 29: 
                           return 21;       
            
break;
case 30: 
                           return 25;       
            
break;
case 31: 
                           return 26;       
            
break;
case 32: 
                           return 24;       
            
break;
case 33: 
                           return 23;       
            
break;
case 34: 
                           return 22;       
            
break;
case 35: 
                           return 27;       
            
break;
case 36: 
                           return 108;       
            
break;
case 37: 
                           return 109;       
           
break;
case 38: 
                           return 16;       
            
break;
case 39: 
                           return 11;       
           
break;
case 40: 
                           /*return 'OPEN_BRACKET';*/    
            
break;
case 41: 
                           /*return 'CLOSE_BRACKET';*/
            
break;
case 42: 
                           return 39;       
            
break;
case 43: 
                           return 42;       
            
break;
case 44: 
                           return 52;       
            
break;
case 45: 
                           return 119;       
            
break;
case 46: 
                           return 10;       
            
break;
case 47: 
                           return 18;       
            
break;
case 48: 
                           return 19;       
            
break;
case 49: 
                           return 29;       
            
break;
case 50: 
                           return 30;       
            
break;
case 51: 
                           return 31;       
            
break;
case 52:
        
                           return 66;       
    
break;
case 53: 
                           return 127;       
            
break;
case 54: 
                           return 131;       
            
break;
case 55: 
                           return 132;       
            
break;
case 56:return 37;
break;
case 57: 
                           return 116;       
            
break;
case 58: 
                           return 120;       
            
break;
case 59: 
                           return 111;       
            
break;
case 60: 
                           return 112;       
            
break;
case 61: 
                           return 13;       
            
break;
case 62: 
                           return 14;       
            
break;
case 63: 
                           return 64;       
            
break;
case 64: 
                           return 65;       
            
break;
case 65: 
                           return 118;       
            
break;
case 66: 
                           return 38;       
            
break;
case 67: 
                           return 33;       
            
break;
case 68: 
                           yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                    return 105; 
            
break;
case 69: 
                           yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); 
                    return 106;
            
break;
case 70: 
                           return 103;       
            
break;
case 71: 
                           return 102;       
            
break;
case 72: 
                           return 35;       
            
break;
case 73: return 34; 
break;
case 74:return 5;
break;
case 75: addLexicalError(yy_.yytext, linea(yy_.yylloc.first_line), columna(yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:\s+)/,/^(?:(\/\/.*))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:package\b)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:==)/,/^(?:&&)/,/^(?:&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\/=)/,/^(?:\*=)/,/^(?:%=)/,/^(?:\^=)/,/^(?:=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:>)/,/^(?:<)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:intinput\b)/,/^(?:floatinput\b)/,/^(?:charinput\b)/,/^(?:return\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:extends\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:class\b)/,/^(?:this\b)/,/^(?:"[^\"]*")/,/^(?:'[^\']')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:[aA-zZ|"_"|"$"]([aA-zZ]|[0-9]|_|\$)*)/,/^(?:\.)/,/^(?:$)/,/^(?:.+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Java;
exports.Parser = Java.Parser;
exports.parse = function () { return Java.parse.apply(Java, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}