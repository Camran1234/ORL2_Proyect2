/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Python = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,28,31,36,38,40,46,47,48,52,53,54,55,56,61,63],$V1=[1,2],$V2=[1,42],$V3=[1,34],$V4=[1,35],$V5=[1,36],$V6=[1,37],$V7=[1,38],$V8=[1,39],$V9=[1,40],$Va=[1,41],$Vb=[1,48],$Vc=[1,49],$Vd=[1,50],$Ve=[1,51],$Vf=[1,52],$Vg=[1,53],$Vh=[1,54],$Vi=[2,65,66,67,68,69,70,71],$Vj=[2,105],$Vk=[1,68],$Vl=[2,5],$Vm=[1,70],$Vn=[1,71],$Vo=[1,72],$Vp=[1,73],$Vq=[1,74],$Vr=[1,75],$Vs=[1,76],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[1,80],$Vx=[1,81],$Vy=[1,82],$Vz=[1,83],$VA=[2,6,8,9,11,12,13,14,15,16,17,18,19,20,21,22,34,37,38,65,66,67,68,69,70,71],$VB=[1,95],$VC=[2,4,5,10,18,23,24,25,26,27,28],$VD=[2,6,8,9,11,12,13,14,15,16,34,37,38,65,66,67,68,69,70,71],$VE=[2,6],$VF=[2,38],$VG=[2,116],$VH=[2,38,65,66,67,68,69,70,71],$VI=[2,109],$VJ=[1,132],$VK=[2,58],$VL=[1,147],$VM=[2,6,8,9,11,12,13,14,15,16,17,18,34,37,38,65,66,67,68,69,70,71],$VN=[2,6,8,9,11,12,13,14,15,16,17,18,19,20,21,34,37,38,65,66,67,68,69,70,71],$VO=[2,33],$VP=[1,153],$VQ=[2,37],$VR=[2,80],$VS=[1,190];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"input":3,"INPUT":4,"OPEN_PARENTHESIS":5,"CLOSE_PARENTHESIS":6,"expresion":7,"AND":8,"OR":9,"NOT":10,"MAYOR":11,"MAYOR_IGUAL":12,"MENOR":13,"MENOR_IGUAL":14,"DIFERENTE":15,"COMPARACION":16,"SUMA":17,"RESTA":18,"POR":19,"DIV":20,"MOD":21,"POW":22,"LIT_ENTERO":23,"LIT_DECIMAL":24,"LIT_CADENA":25,"LIT_TRUE":26,"LIT_FALSE":27,"IDENTIFICADOR":28,"ini":29,"statements":30,"EOF":31,"parameters":32,"parameters_re":33,"COMA":34,"function_stmt":35,"DEF":36,"SEMI_COLON":37,"SPACE":38,"statement":39,"INDENTATION":40,"var_stmt":41,"if_stmt":42,"for_stmt":43,"while_stmt":44,"print_stmt":45,"CONTINUE":46,"BREAK":47,"RETURN":48,"print_parameter":49,"print_parameter_re":50,"print_method":51,"PRINT":52,"PRINTLN":53,"IF":54,"ELIF":55,"ELSE":56,"for_parameters":57,"for_parameters_re":58,"rango":59,"RANGE":60,"FOR":61,"IN":62,"WHILE":63,"igualaciones":64,"IGUAL":65,"O_MAS":66,"O_RESTA":67,"O_POR":68,"O_DIV":69,"O_POW":70,"O_MOD":71,"nombre_variables":72,"nombre_variables_re":73,"expresiones":74,"expresiones_re":75,"asignacion":76,"asignacion_re":77,"$accept":0,"$end":1},
terminals_: {2:"error",4:"INPUT",5:"OPEN_PARENTHESIS",6:"CLOSE_PARENTHESIS",8:"AND",9:"OR",10:"NOT",11:"MAYOR",12:"MAYOR_IGUAL",13:"MENOR",14:"MENOR_IGUAL",15:"DIFERENTE",16:"COMPARACION",17:"SUMA",18:"RESTA",19:"POR",20:"DIV",21:"MOD",22:"POW",23:"LIT_ENTERO",24:"LIT_DECIMAL",25:"LIT_CADENA",26:"LIT_TRUE",27:"LIT_FALSE",28:"IDENTIFICADOR",31:"EOF",34:"COMA",36:"DEF",37:"SEMI_COLON",38:"SPACE",40:"INDENTATION",46:"CONTINUE",47:"BREAK",48:"RETURN",52:"PRINT",53:"PRINTLN",54:"IF",55:"ELIF",56:"ELSE",60:"RANGE",61:"FOR",62:"IN",63:"WHILE",65:"IGUAL",66:"O_MAS",67:"O_RESTA",68:"O_POR",69:"O_DIV",70:"O_POW",71:"O_MOD"},
productions_: [0,[3,3],[3,2],[3,3],[7,3],[7,3],[7,2],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,3],[29,2],[29,2],[32,2],[32,0],[33,3],[33,3],[33,0],[35,7],[35,2],[35,3],[35,5],[35,6],[35,7],[30,2],[30,2],[30,2],[30,2],[30,2],[30,0],[39,1],[39,1],[39,1],[39,1],[39,1],[39,2],[39,2],[39,2],[39,2],[39,3],[49,2],[50,3],[50,0],[51,1],[51,1],[45,5],[45,2],[45,3],[45,4],[45,5],[42,4],[42,2],[42,3],[42,4],[42,4],[42,2],[42,3],[42,4],[42,3],[42,2],[42,3],[57,2],[58,3],[58,3],[58,0],[59,4],[59,2],[59,3],[59,4],[43,6],[43,2],[43,3],[43,4],[43,5],[43,6],[44,4],[44,2],[44,3],[44,4],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[72,2],[73,3],[73,3],[73,0],[74,2],[75,3],[75,3],[75,0],[76,3],[76,3],[76,2],[77,3],[77,3],[77,3],[77,0],[41,3],[41,2],[41,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=TIPO_VALOR.INPUT;
break;
case 2: case 36: case 62:
addSyntaxError("Se esperaba \'(\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 3: case 64:
addSyntaxError("Se esperaba \')\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 4:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OEPRACION.AND, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 5:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.OR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 6:
this.$=instruccionesApi.operacionUnaria($$[$0], TIPO_OPERACION.NOT, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 7:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR, lenguaje , linea(this._$.first_line), columna(this._$.first_column));
break;
case 8:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_IGUAL, lenguaje, linea(this._$.first_line), columna(this._$.first_column) );
break;
case 9:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0],TIPO_OPERACION.MENOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column) );
break;
case 10:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_IGUAL, lenguaje, linea(this._$.first_line), columna(this._$.first_column) );
break;
case 11:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0],TIPO_OPERACION.DIFERENTE, lenguaje, linea(this._$.first_line), columna(this._$.first_column) );
break;
case 12:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0],TIPO_OPERACION.COMPARACION, lenguaje, linea(this._$.first_line), columna(this._$.first_column) );
break;
case 13:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0],TIPO_OPERACION.SUMA, lenguaje , linea(this._$.first_line), columna(this._$.first_column));
break;
case 14:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0],TIPO_OPERACION.RESTA, lenguaje , linea(this._$.first_line), columna(this._$.first_column));
break;
case 15:
this.$= instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 16:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.DIV, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 17:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.MOD, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 18:
this.$=instruccionesApi.operacionAritmetica($$[$0-2], $$[$0], TIPO_OPERACION.POW, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 19:
this.$=instruccionesApi.operacionUnaria($$[$0], TIPO_OPERACION.RESTA, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 20:
this.$=instruccionesApi.nuevoValor(parseInt($$[$0].toString()),null, TIPO_VALOR.ENTERO, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 21:
this.$=instruccionesApi.nuevoValor(parseFloat($$[$0].toString()),null,TIPO_VALOR.DECIMAL, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 22:
this.$=instruccionesApi.nuevoValor($$[$0].toString(),null, TIPO_VALOR.CADENA, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 23:
this.$=instruccionesApi.nuevoValor("true",null, TIPO_VALOR.BOOLEAN, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 24:
this.$=instruccionesApi.nuevoValor("false",null, TIPO_VALOR.BOOLEAN, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 25:
this.$=instruccionesApi.nuevoValor($$[$0].toString(),null, TIPO_VALOR.IDENTIFICADOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 26:
this.$=$$[$0-1];
break;
case 27:

        return $$[$0-1];
    
break;
case 28:
addSyntaxError("Se esperaba una funcion1",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 29:

        $$[$0].push(instruccionesApi.nuevoParametro($$[$0-1], TIPO_DATO.ANY, TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column)));
        this.$=reversaArreglo($$[$0]);
    
break;
case 30: case 33: case 45: case 58: case 80: case 105: case 109: case 116:
this.$=[];
break;
case 31:

        $$[$0].push(instruccionesApi.nuevoParametro($$[$0-1], TIPO_DATO.ANY, TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column)));
        this.$=$$[$0];
    
break;
case 32:
addSyntaxError("Se esperaba otro parametro",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column)); this.$=$$[$0];
break;
case 34:

        this.$ = instruccionesApi.nuevaFuncion(TIPO_VISIBILIDAD.PUBLIC, $$[$0-5],TIPO_DATO.ANY, [], $$[$0-3], TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column));
    
break;
case 35: case 86:
addSyntaxError("Se esperaba un identificador",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 37: case 84:
addSyntaxError("Se esperaba \')\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 38: case 68: case 72: case 75: case 89: case 93:
addSyntaxError("Se esperaba \':\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 39: case 54: case 65: case 69: case 73: case 76: case 90: case 94:
addSyntaxError("Se esperaba un salto de linea",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 40:

        if($$[$0-1].length>0){
            agregarInstrucciones($$[$0], $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));
        }else{
            var token = "";
            if($$[$0].rol == TIPO_INSTRUCCION.VARIABLE){
                token = $$[$0].arreglo[$$[$0].length-1].id[0].valor;
            }else{
                token = $$[$0].rol;
            }
            addSyntaxError("Se esperaba una funcion2", token, linea(this._$.first_line), columna(this._$.first_column));
        }
        this.$=$$[$0-1];
    
break;
case 41:

        if(indentacionAcumulada==0){
            instruccionAcumulada = [];
            instruccionAcumulada.push($$[$0]);
            $$[$0-1].push($$[$0]);
        }else{
            addSyntaxError("Indentacion no esperada, la funcion no lleva indentacion","def "+$$[$0-1].id,linea(this._$.first_line), columna(this._$.first_column));
        }
        indentacionAcumulada=0;
        this.$=$$[$0-1];
    
break;
case 42:
indentacionAcumulada=0;this.$=$$[$0-1];
break;
case 43:
indentacionAcumulada+=$$[$0];this.$=$$[$0-1];
break;
case 44:
addSyntaxError("Se esperaba una funcion3",$$[$0],linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0-1];
break;
case 46: case 47: case 48: case 49: case 50:
this.$=$$[$0];
break;
case 51:
this.$=instruccionesApi.nuevoContinue( linea(this._$.first_line), columna(this._$.first_column));
break;
case 52:
addSyntaxError("Se esperaba salto de linea",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 53:
this.$=instruccionesApi.nuevoBreak(linea(this._$.first_line), columna(this._$.first_column));
break;
case 55:
this.$=instruccionesApi.nuevoReturn($$[$0-1], TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column));
break;
case 56:

        $$[$0].push($$[$0-1]);
        this.$ = reversaArreglo($$[$0]);
    
break;
case 57:

        $$[$0].push($$[$0-1]);
        this.$ = $$[$0];
    
break;
case 59:
this.$=TIPO_PRINT.PRINT;
break;
case 60:
this.$=TIPO_PRINT.PRINTLN;
break;
case 61:

        this.$= instruccionesApi.nuevoImprimir($$[$0-2], TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column));
    
break;
case 63:
addSyntaxError("Se esperaba una cadena",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 66:

        this.$ = instruccionesApi.nuevoIf($$[$0-2], null, TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column));
    
break;
case 67: case 71: case 92:
addSyntaxError("Se esperaba una condicion",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 70:

        this.$ = instruccionesApi.nuevoElse($$[$0-2], null, null, TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column));
    
break;
case 74:
this.$=instruccionesApi.nuevoElse(null, null, null, TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column));
break;
case 77: case 106:

        $$[$0].push($$[$0-1]);
        this.$=reversaArreglo($$[$0]);
    
break;
case 78:

        $$[$0].push($$[$0-1]);
        this.$=$$[$0];
    
break;
case 79:
addSyntaxError("Se esperaba otra parametro",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column));
break;
case 81:

        this.$ = $$[$0-1];
    
break;
case 82: case 83:
addSyntaxError("Se esperaba indicar un rango",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 85:

        var valor_inicial = instruccionesApi.nuevaDeclaracion(TIPO_VISIBILIDAD.PUBLIC, $$[$0-4],[], TIPO_DATO.INT, TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column));
        var valor_accion = instruccionesApi.nuevoValor(parseInt("1"),null,TIPO_VALOR.ENTERO, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
        var accion_post = instruccionesApi.nuevaAsignacion_O($$[$0-4],[],TIPO_OPERACION.INCREMENTO,valor_accion,TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column));
        this.$ = instruccionesApi.nuevoFor(valor_inicial, $$[$0-2], accion_post, null, TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column));
    
break;
case 87:
addSyntaxError("Se esperaba la palabra reservada \'in\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 88:
addSyntaxError("Se esperaba un rango",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 91:
this.$=instruccionesApi.nuevoWhile($$[$0-2], null, TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column));
break;
case 95:
this.$=TIPO_OPERACION.IGUAL;
break;
case 96:
this.$=TIPO_OPERACION.SUMA;
break;
case 97:
this.$=TIPO_OPERACION.RESTA;
break;
case 98:
this.$=TIPO_OPERACION.MULTIPLICACION;
break;
case 99:
this.$=TIPO_OPERACION.DIVISION;
break;
case 100:
this.$=TIPO_OPERACION.POW;
break;
case 101:
this.$=TIPO_OPERACION.MOD;
break;
case 102:

        $$[$0].push(instruccionesApi.nuevoValor($$[$0-1],null, TIPO_VALOR.IDENTIFICADOR,lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
        this.$=reversaArreglo($$[$0]);
    
break;
case 103:

        $$[$0].push(instruccionesApi.nuevoValor($$[$0-1],null, TIPO_VALOR.IDENTIFICADOR,lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
        this.$=$$[$0];
    
break;
case 104:
addSyntaxError("Se esperaba un identificador", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 107:

        $$[$0].push($$[$0-2]);
        this.$=$$[$0];
    
break;
case 108:
addSyntaxError("Se esperaba una expresion", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 110:

        var nuevaIgualacion = instruccionesApi.nuevaAsignacion_O(null,[], $$[$0-2], $$[$0-1], TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column));
        $$[$0].push(nuevaIgualacion);
        this.$=reversaArreglo($$[$0]);
    
break;
case 111:

        var valor = instruccionesApi.nuevoValor("input()",null,$$[$0-1], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
        var nuevaIgualacion = instruccionesApi.nuevaAsignacion_O(null,[], $$[$0-2], valor, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
        $$[$0].push(nuevaIgualacion);
        this.$=reversaArreglo($$[$0]);
        
break;
case 112: case 118:
addSyntaxError("Se esperaba una asignacion",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 113:

        var nuevaIgualacion = instruccionesApi.nuevaAsignacion_O(null,[], $$[$0-2],$$[$0-1],TIPO_LENGUAJE.PYTHON, linea(this._$.first_line), columna(this._$.first_column));
        $$[$0].push(nuevaIgualacion);
        this.$=$$[$0];
    
break;
case 114:

        var valor = instruccionesApi.nuevoValor("input()",null,$$[$0-1], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
        var nuevaIgualacion = instruccionesApi.nuevaAsignacion_O(null,[], $$[$0-2], valor, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
        $$[$0].push(nuevaIgualacion);
        this.$=$$[$0];
    
break;
case 115:
addSyntaxError("Se esperaba una expresion",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 117:

        for(var index=0; index<$$[$0-1].length; index++){
            $$[$0-1][index].id = $$[$0-2];
        }
        this.$=instruccionesApi.nuevaVariable($$[$0-1], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
    
break;
case 119:
addSyntaxError("Se esperaba un salto de linea", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
}
},
table: [o($V0,[2,45],{29:1,30:2}),{1:[3],2:[1,3]},{2:[1,9],28:[1,26],31:[1,4],35:6,36:[1,18],38:[1,7],39:5,40:[1,8],41:10,42:11,43:12,44:13,45:14,46:[1,15],47:[1,16],48:[1,17],51:25,52:[1,27],53:[1,28],54:[1,20],55:[1,21],56:[1,22],61:[1,23],63:[1,24],72:19},o($V1,[2,28]),o($V1,[2,27]),o($V0,[2,40]),o($V0,[2,41]),o($V0,[2,42]),o($V0,[2,43]),o($V0,[2,44]),o($V0,[2,46]),o($V0,[2,47]),o($V0,[2,48]),o($V0,[2,49]),o($V0,[2,50]),{2:[1,30],38:[1,29]},{2:[1,32],38:[1,31]},{5:$V2,7:33,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{2:[1,44],28:[1,43]},{2:[1,46],64:47,65:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh,76:45},{2:[1,56],5:$V2,7:55,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{2:[1,58],5:$V2,7:57,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{2:[1,60],37:[1,59]},{2:[1,62],28:[1,61]},{2:[1,64],5:$V2,7:63,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{2:[1,66],5:[1,65]},o($Vi,$Vj,{73:67,34:$Vk}),o($Vl,[2,59]),o($Vl,[2,60]),o($V0,[2,51]),o($V0,[2,52]),o($V0,[2,53]),o($V0,[2,54]),{8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,38:[1,69]},{5:$V2,7:84,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:85,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},o($VA,[2,20]),o($VA,[2,21]),o($VA,[2,22]),o($VA,[2,23]),o($VA,[2,24]),o($VA,[2,25]),{5:$V2,7:86,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{2:[1,88],5:[1,87]},o($V0,[2,35]),{2:[1,90],38:[1,89]},o($V0,[2,118]),{2:[1,93],3:92,4:$VB,5:$V2,7:94,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va,74:91},o($VC,[2,95]),o($VC,[2,96]),o($VC,[2,97]),o($VC,[2,98]),o($VC,[2,99]),o($VC,[2,100]),o($VC,[2,101]),{2:[1,97],8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,37:[1,96]},o($V0,[2,67]),{2:[1,99],8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,37:[1,98]},o($V0,[2,71]),{2:[1,101],38:[1,100]},o($V0,[2,75]),{2:[1,103],62:[1,102]},o($V0,[2,86]),{2:[1,105],8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,37:[1,104]},o($V0,[2,92]),{2:[1,107],5:$V2,7:108,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va,49:106},o($V0,[2,62]),o($Vi,[2,102]),{2:[1,110],28:[1,109]},o($V0,[2,55]),{5:$V2,7:111,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:112,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:113,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:114,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:115,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:116,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:117,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:118,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:119,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:120,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:121,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:122,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:123,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{5:$V2,7:124,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},o($VD,$VE,{17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($VA,[2,19]),{6:[1,125],8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz},o($VE,[2,30],{32:126,28:[1,127]}),o($V0,[2,36]),o($V0,[2,117]),o($V0,[2,119]),o($VF,$VG,{77:128,64:129,65:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh}),o($VF,$VG,{64:129,77:130,65:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh}),o($VF,[2,112]),o($VH,$VI,{75:131,8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,34:$VJ}),{2:[1,134],5:[1,133]},{2:[1,136],38:[1,135]},o($V0,[2,68]),{2:[1,138],38:[1,137]},o($V0,[2,72]),o($V0,[2,74]),o($V0,[2,76]),{2:[1,140],59:139,60:[1,141]},o($V0,[2,87]),{2:[1,143],38:[1,142]},o($V0,[2,93]),{2:[1,145],6:[1,144]},o($V0,[2,63]),o($VE,$VK,{50:146,8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,34:$VL}),o($Vi,$Vj,{73:148,34:$Vk}),o($Vi,$Vj,{73:149,34:$Vk}),o([2,6,8,9,34,37,38,65,66,67,68,69,70,71],[2,4],{11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o([2,6,9,34,37,38,65,66,67,68,69,70,71],$Vl,{8:$Vm,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($VD,[2,7],{17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($VD,[2,8],{17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($VD,[2,9],{17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($VD,[2,10],{17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($VD,[2,11],{17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($VD,[2,12],{17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($VM,[2,13],{19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($VM,[2,14],{19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($VN,[2,15],{22:$Vz}),o($VN,[2,16],{22:$Vz}),o($VN,[2,17],{22:$Vz}),o($VA,[2,18]),o($VA,[2,26]),{2:[1,151],6:[1,150]},o($VE,$VO,{33:152,34:$VP}),o($VF,[2,110]),{2:[1,156],3:155,4:$VB,5:$V2,7:94,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va,74:154},o($VF,[2,111]),o($VH,[2,106]),{2:[1,158],5:$V2,7:157,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},{2:[1,160],6:[1,159]},o($VH,[2,2]),o($V0,[2,66]),o($V0,[2,69]),o($V0,[2,70]),o($V0,[2,73]),{2:[1,162],37:[1,161]},o($V0,[2,88]),{2:[1,164],5:[1,163]},o($V0,[2,91]),o($V0,[2,94]),{2:[1,166],38:[1,165]},o($V0,[2,64]),o($VE,[2,56]),{5:$V2,7:167,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},o($Vi,[2,103]),o($Vi,[2,104]),{2:[1,169],37:[1,168]},o($V0,$VQ),o($VE,[2,29]),{2:[1,171],28:[1,170]},o($VF,$VG,{64:129,77:172,65:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh}),o($VF,$VG,{64:129,77:173,65:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh}),o($VF,$VG,{64:129,77:174,65:$Vb,66:$Vc,67:$Vd,68:$Ve,69:$Vf,70:$Vg,71:$Vh}),o($VH,$VI,{75:175,8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,34:$VJ}),o($VH,$VI,{75:176,34:$VJ}),o($VH,[2,1]),o($VH,[2,3]),{2:[1,178],38:[1,177]},o($V0,[2,89]),{2:[1,180],5:$V2,7:181,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va,57:179},o($VQ,[2,82]),o($V0,[2,61]),o($V0,[2,65]),o($VE,$VK,{50:182,8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,34:$VL}),{2:[1,184],38:[1,183]},o($V0,$VF),o($VE,$VO,{33:185,34:$VP}),o($VE,$VO,{33:186,34:$VP}),o($VF,[2,113]),o($VF,[2,114]),o($VF,[2,115]),o($VH,[2,107]),o($VH,[2,108]),o($V0,[2,85]),o($V0,[2,90]),{2:[1,188],6:[1,187]},o($VQ,[2,83]),o($VE,$VR,{58:189,8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,34:$VS}),o($VE,[2,57]),o($V0,[2,34]),o($V0,[2,39]),o($VE,[2,31]),o($VE,[2,32]),o($VQ,[2,81]),o($VQ,[2,84]),o($VE,[2,77]),{2:[1,192],5:$V2,7:191,10:$V3,18:$V4,23:$V5,24:$V6,25:$V7,26:$V8,27:$V9,28:$Va},o($VE,$VR,{58:193,8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,34:$VS}),o($VE,$VR,{58:194,34:$VS}),o($VE,[2,78]),o($VE,[2,79])],
defaultActions: {},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //imports
    var ErrorLexico = require ('../../../error/LexicalError');
    var ErrorSintactico = require('../../../error/SyntaxError');
    //variables
    var erroresLexicos=[];
    var erroresSintacticos=[];
    var indentation=0;
    var estado=0;
    var lineNumber=0;
    var columnNumber=0;

    //control indentacion


    module.exports.getErroresLexico = function(){
        return erroresLexicos;
    }

    module.exports.getErroresSintacticos = function(){
        return erroresSintacticos;
    }

    module.exports.setLineNumber = function(line){
        lineNumber = line;
    }

    module.exports.setColumnNumber = function(column){
        columnNumber = column;
    }

    module.exports.setErroresLexicos = function(error){
        erroresLexicos = error;
    }

    module.exports.setErroresSintacticos = function(error){
        erroresSintacticos = error;
    }

    function addLexicalError(lexema, linea, column){   
        try{
            var errorLexico = new ErrorLexico(lexema, linea, column);
            erroresLexicos.push(errorLexico);
        }catch(ex){
            console.log(ex);
        }                  
    }

    function addSyntaxError(descripcion, token, line, column){
		try{
			var errorSintactico = new ErrorSintactico(descripcion, token, line, column);
			erroresSintacticos.push(errorSintactico);
		}catch(ex){
			console.log(ex);
		}
	}


    const TIPO_VISIBILIDAD = require('../../../api/Instrucciones').TIPO_VISIBILIDAD;
    const TIPO_LENGUAJE = require('../../../api/Instrucciones').TIPO_LENGUAJE;
    const TIPO_DATO = require('../../../api/Instrucciones').TIPO_DATO;
    const TIPO_VALOR = require('../../../api/Instrucciones').TIPO_VALOR;
    const TIPO_OPERACION = require('../../../api/Instrucciones').TIPO_OPERACION;
    const TIPO_INSTRUCCION = require('../../../api/Instrucciones').TIPO_INSTRUCCION;
    const TIPO_SWITCH = require('../../../api/Instrucciones').TIPO_SWITCH;
    const instruccionesApi = require('../../../api/InstruccionesApi').instruccionesApi;
    const TIPO_PRINT = require('../../../api/Instrucciones').TIPO_PRINT;
    const lenguaje = TIPO_LENGUAJE.PYTHON;
    var indentacionAcumulada=0;
    var indentacionActual=[];
    var instruccionAcumulada = [];

    function reversaArreglo(arreglo){
        let array = [];
        for(let index=arreglo.length-1; index>=0; index--){
            array.push(arreglo[index]);
        }

        return array;
    }

    function agregarInstruccionAcumulada(stmt, linea, columna){
        let helper = instruccionAcumulada.length-1;
        let helperInstructions = instruccionAcumulada[helper].instrucciones;
        let actualstmt = instruccionAcumulada[helper].instrucciones[helperInstructions.length-1];
        if(actualstmt.rol == TIPO_INSTRUCCION.IF ||
        actualstmt.rol == TIPO_INSTRUCCION.ELSE ||
        actualstmt.rol == TIPO_INSTRUCCION.WHILE ||
        actualstmt.rol == TIPO_INSTRUCCION.FOR ){
            instruccionAcumulada.push(actualstmt);
            instruccionAcumulada[instruccionAcumulada.length-1].instrucciones.push(stmt);            
        }else{
            addSyntaxError("Bloque de indentacion esperado para la declaracion", stmt.rol, linea, columna);
        }
    }

    function agregarInstrucciones(stmt, arreglo, linea, columna){
        if(indentacionActual.length==0){
            if(indentacionAcumulada==0){
                addSyntaxError("Bloque de indentacion esperado para la declaracion", stmt.rol, linea, columna);
            }else{
                indentacionActual.push(indentacionAcumulada);
                instruccionAcumulada[instruccionAcumulada.length-1].instrucciones.push(stmt);
            }
        }else {
            if(indentacionAcumulada==0){
                addSyntaxError("Error de indentacion: Bloque de indentacion esperado para la declaracion", stmt.rol, linea, columna);
            }else if(indentacionAcumulada > indentacionActual[indentacionActual.length-1]){
                indentacionActual.push(indentacionAcumulada);
                agregarInstruccionAcumulada(stmt, linea,columna);
            }else if(indentacionAcumulada < indentacionActual[indentacionActual.length-1]){
                var aux = [];
                //creamos una copia
                for(var index=0; index<indentacionActual.length; index++){
                    aux.push(indentacionActual[index]);
                }
                //Manejamos y buscamos la nueva indentacion
                var flag = false;
                var instruccionesEliminadas=0;
                for(var index=indentacionActual.length-1; index>=0; index--){
                    if(indentacionAcumulada==indentacionActual[index]){
                        flag=true;
                        break;
                    }else{  
                        aux.pop();
                        instruccionesEliminadas++;
                    }
                }
                if(flag){
                    indentacionActual = aux;
                    if(instruccionesEliminadas != 0){
                        for(var index=0; index<instruccionesEliminadas; index++){
                            instruccionAcumulada.pop();
                        }
                        instruccionAcumulada[instruccionAcumulada.length-1].instrucciones.push(stmt);
                    }else{
                        addSyntaxError("Se esperaba una instruccion", stmt.rol, linea, column);
                    }
                    
                }else{
                    addSyntaxError("Error de indentacion: se requiere un bloque de indentacion del mismo nivel que las demas declaraciones",stmt.rol, linea, columna);
                }
            }else if(indentacionAcumulada == indentacionActual[indentacionActual.length-1]){
                instruccionAcumulada[instruccionAcumulada.length-1].instrucciones.push(stmt);
            }
        }
        indentacionAcumulada=0;
        return arreglo;
    }

 function linea(linea){
        return linea + lineNumber;
    }

    function columna(column){
        return column + columnNumber;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
        indentation=0;
            if(estado==0){
                /*ignore*/
            }else if(estado==1){
                estado=0;
            }else if(estado==2){
                estado=0;
            }
        return 38;
        
break;
case 1:
            if(estado==1){
                /*ignore*/
            }else if(estado==2){
                /*ignore*/
            }else{
                yy_.yytext = 4;
                return 40;
            }            
        
break;
case 2:
            if(estado==1){
                /*ignore*/
            }else if(estado==2){
                /*ignore*/
            }else{
                yy_.yytext=1;
                return 40;
            }
        
break;
case 3:/*ignore*/;
break;
case 4:/*ignore*/;
break;
case 5:
                        if(estado==1){
                            /*ignore*/
                        }else if(estado==2){
                            yy_.yytext = yy_.yytext.substr(3,yy_.yyleng-6);
                            estado=2;
                            
                            return'LIT_CADENA';
                        }else{
                            indentation=0;
                            estado=1;
                        }
                    
break;
case 6:
                estado=2;
             return'DEF';

        
break;
case 7:
             estado=2;
 return'PRINT';
            
break;
case 8:
                estado=2;
 return'PRINTLN';
            
break;
case 9:
                estado=2;
 return'IF';
                
break;
case 10:
                estado=2;
 return'ELSE';
            
break;
case 11:
                estado=2;
 return'ELIF';
            
break;
case 12:
                estado=2;
 return'INPUT';
            
break;
case 13:
                estado=2;
 return'RETURN';
                  
break;
case 14:
                estado=2;
 return'WHILE';
            
break;
case 15:
                estado=2;
 return'BREAK';
            
break;
case 16:

                estado=2;
 return'CONTINUE';
            
break;
case 17:
                estado=2;
 return'FOR';
            
break;
case 18:
                estado=2;
 return'IN';
            
break;
case 19:
                estado=2;
 return'RANGE';
            
break;
case 20:
                estado=2;
 return'AND';
            
break;
case 21:
                estado=2;
 return'OR';
            
break;
case 22:
                estado=2;
 return'NOT';
            
break;
case 23:
                estado=2;
 return'OPEN_PARENTHESIS';
            
break;
case 24:
                estado=2;
 return'CLOSE_PARENTHESIS';
            
break;
case 25:
                estado=2;
 return'OPEN_BRACKET';
            
break;
case 26:
                estado=2;
 return'CLOSE_BRACKET';
            
break;
case 27:
                estado=2;
 return'OPEN_CURLY';
            
break;
case 28:
                estado=2;
 return'CLOSE_CURLY';
            
break;
case 29:
                estado=2;
 return'COMA';
            
break;
case 30:
                estado=2;
 return'MAYOR_IGUAL';
            
break;
case 31:
                estado=2;
 return'MAYOR';
            
break;
case 32:
                estado=2;
 return'MENOR';
            
break;
case 33:
                estado=2;
 return'MENOR_IGUAL';
            
break;
case 34:
                estado=2;
 return'DIFERENTE';
            
break;
case 35:
                estado=2;
 return'COMPARACION';
            
break;
case 36:
                estado=2;
 return'O_SUMA';
            
break;
case 37:
                estado=2;
 return'O_RESTA';
            
break;
case 38:
                estado=2;
 return'O_DIV';
            
break;
case 39:
                estado=2;
 return'O_POR';
            
break;
case 40:
                estado=2;
 return'O_MOD';
            
break;
case 41:
                estado=2;
 return'O_POW';
            
break;
case 42:
                estado=2;
 return'IGUAL';
            
break;
case 43:
                estado=2;
 return'SEMI_COLON';
            
break;
case 44:
                estado=2;
 return'SUMA';
            
break;
case 45:
                estado=2;
 return'RESTA';
            
break;
case 46:
                estado=2;
 return'DIV';
            
break;
case 47:
                estado=2;
 return'POR';
            
break;
case 48:
                estado=2;
 return'MOD';
            
break;
case 49:
                estado=2;
 return'POW';
            
break;
case 50:
                estado=2;
 return'LIT_DECIMAL';
            
break;
case 51:
                estado=2;
 return'LIT_ENTERO';
            
break;
case 52:estado=2;return'LIT_CADENA';
break;
case 53:estado=2;return'LIT_CADENA';
break;
case 54:
                estado=2;
 return'LIT_TRUE';
            
break;
case 55:
                estado=2;
 return'LIT_FALSE';
            
break;
case 56:
                estado=2;
 return'IDENTIFICADOR';
            
break;
case 57:                             
        addLexicalError(yy_.yytext, linea(yy_.yylloc.first_line), columna(yy_.yylloc.first_column));
    
break;
case 58:return'EOF';
break;
}
},
rules: [/^(?:\n)/,/^(?:\t)/,/^(?: )/,/^(?:\s)/,/^(?:#[^\n]*\n)/,/^(?:([\"][\"][\"][^\"]*([^\"][^\"]*)*[\"][\"][\"]|[\'][\'][\'][^\']*([^\'][^\']*)*[\'][\'][\']))/,/^(?:def\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:elif\b)/,/^(?:input\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:range\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:<=)/,/^(?:!=)/,/^(?:==)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\/=)/,/^(?:\*=)/,/^(?:%=)/,/^(?:\^=)/,/^(?:=)/,/^(?::)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*)/,/^(?:%)/,/^(?:\^)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:([\"][^\"]*[\"]))/,/^(?:([\'''][^\']*[\']))/,/^(?:True\b)/,/^(?:False\b)/,/^(?:[aA-zZ|"_"]([aA-zZ]|[0-9]|_)*)/,/^(?:.+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Python;
exports.Parser = Python.Parser;
exports.parse = function () { return Python.parse.apply(Python, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}