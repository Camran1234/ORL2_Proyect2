/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var C = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,50,54],$V1=[2,65],$V2=[1,22],$V3=[1,45],$V4=[1,46],$V5=[1,40],$V6=[1,47],$V7=[1,43],$V8=[1,44],$V9=[1,41],$Va=[1,42],$Vb=[1,37],$Vc=[1,38],$Vd=[1,50],$Ve=[1,56],$Vf=[1,57],$Vg=[1,58],$Vh=[1,54],$Vi=[1,48],$Vj=[1,49],$Vk=[1,51],$Vl=[1,52],$Vm=[1,53],$Vn=[2,9,13,15,18,20,22,24,26,50,54,58,71,72,76,78,79,80,82,89,90,91,92,94],$Vo=[2,9,13,15,18,20,22,24,26,50,54,58,63,71,72,76,78,79,80,82,89,90,91,92,94,98],$Vp=[1,85],$Vq=[1,86],$Vr=[1,87],$Vs=[2,15],$Vt=[2,86,87,88],$Vu=[2,11,65],$Vv=[1,134],$Vw=[1,129],$Vx=[1,123],$Vy=[1,124],$Vz=[1,125],$VA=[1,126],$VB=[1,127],$VC=[1,128],$VD=[1,131],$VE=[2,11],$VF=[2,2],$VG=[2,6,7,11,29,32,33,35,36,37,38,39,40,41,42,43,65,99],$VH=[2,6,65],$VI=[2,77],$VJ=[1,163],$VK=[1,164],$VL=[1,165],$VM=[1,166],$VN=[1,167],$VO=[1,168],$VP=[1,169],$VQ=[1,170],$VR=[1,171],$VS=[1,172],$VT=[1,173],$VU=[2,6,11],$VV=[2,6,7,11,29,32,33,35,36,37,38,65,99],$VW=[2,9,13,15,18,20,22,24,26,63,71,72,76,78,79,80,82,89,90,91,92,94,98],$VX=[2,28,86,87,88],$VY=[2,6,7,11,29,32,33,35,36,37,38,39,40,65,99],$VZ=[2,63,98],$V_=[2,6,7,11,28,29,32,33,35,36,37,38,39,40,41,42,43,65,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"parametros":3,"expresion":4,"parametros_re":5,"COMA":6,"paremetros_re":7,"metodo_stmt":8,"METODO":9,"OPEN_PARENTHESIS":10,"CLOSE_PARENTHESIS":11,"metodo_clase_stmt":12,"METODO_CLASE":13,"variable_clase":14,"IDENTIFICADOR":15,"asignacion_clase":16,"clase_stmt":17,"CLASE":18,"clean_stmt":19,"CLEAN_SCREEN":20,"getch_stmt":21,"GETCH":22,"scan_stmt":23,"SCANF":24,"print_stmt":25,"PRINTF":26,"nuevo_arreglo":27,"OPEN_BRACKET":28,"CLOSE_BRACKET":29,"nuevo_arreglo_re":30,"arreglo_stmt":31,"AND":32,"OR":33,"NOT":34,"MAYOR":35,"MENOR":36,"COMPARACION":37,"DIFERENTE":38,"SUMA":39,"RESTA":40,"POR":41,"DIV":42,"MOD":43,"LIT_ENTERO":44,"LIT_DECIMAL":45,"LIT_CARACTER":46,"LIT_STRING":47,"PUNTERO":48,"paqueteria":49,"INCLUDE":50,"PAQUETERIA":51,"ini":52,"code_c":53,"EOF":54,"main":55,"VOID":56,"MAIN":57,"OPEN_CURLY":58,"statements":59,"empty_statements":60,"statement":61,"block_statements":62,"CLOSE_CURLY":63,"var_stmt":64,"COLON":65,"if_stmt":66,"for_stmt":67,"while_stmt":68,"do_stmt":69,"switch_stmt":70,"CONTINUE":71,"BREAK":72,"accion_for":73,"clase_Stmt":74,"for_params":75,"FOR":76,"data_type":77,"INT":78,"FLOAT":79,"CHAR":80,"const_data":81,"CONST":82,"arreglo":83,"arreglo_re":84,"valor_asignacion":85,"IGUAL":86,"INCREMENTO":87,"DECREMENTO":88,"IF":89,"ELSE":90,"WHILE":91,"DO":92,"while_do":93,"SWITCH":94,"cases":95,"case_stmt":96,"default_stmt":97,"CASE":98,"SEMI_COLON":99,"DEFAULT":100,"$accept":0,"$end":1},
terminals_: {2:"error",6:"COMA",7:"paremetros_re",9:"METODO",10:"OPEN_PARENTHESIS",11:"CLOSE_PARENTHESIS",13:"METODO_CLASE",15:"IDENTIFICADOR",18:"CLASE",20:"CLEAN_SCREEN",22:"GETCH",24:"SCANF",26:"PRINTF",28:"OPEN_BRACKET",29:"CLOSE_BRACKET",32:"AND",33:"OR",34:"NOT",35:"MAYOR",36:"MENOR",37:"COMPARACION",38:"DIFERENTE",39:"SUMA",40:"RESTA",41:"POR",42:"DIV",43:"MOD",44:"LIT_ENTERO",45:"LIT_DECIMAL",46:"LIT_CARACTER",47:"LIT_STRING",48:"PUNTERO",50:"INCLUDE",51:"PAQUETERIA",54:"EOF",56:"VOID",57:"MAIN",58:"OPEN_CURLY",63:"CLOSE_CURLY",65:"COLON",71:"CONTINUE",72:"BREAK",74:"clase_Stmt",76:"FOR",78:"INT",79:"FLOAT",80:"CHAR",82:"CONST",86:"IGUAL",87:"INCREMENTO",88:"DECREMENTO",89:"IF",90:"ELSE",91:"WHILE",92:"DO",94:"SWITCH",98:"CASE",99:"SEMI_COLON",100:"DEFAULT"},
productions_: [0,[3,2],[3,0],[5,3],[5,3],[5,0],[8,4],[8,2],[8,4],[12,4],[12,2],[12,4],[14,3],[14,3],[14,0],[16,1],[16,3],[16,3],[17,3],[17,2],[19,3],[19,2],[19,3],[21,3],[21,2],[21,3],[23,4],[23,2],[23,4],[25,4],[25,2],[25,4],[27,4],[27,2],[27,3],[30,4],[30,3],[30,4],[30,0],[31,2],[4,3],[4,3],[4,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,2],[4,1],[4,1],[4,3],[49,2],[49,2],[52,2],[53,2],[53,2],[53,1],[53,1],[55,6],[55,2],[55,3],[55,4],[55,5],[55,6],[60,2],[60,0],[62,2],[62,2],[62,1],[59,2],[59,1],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,2],[61,1],[61,1],[61,1],[61,2],[61,2],[61,1],[61,2],[61,2],[61,2],[61,2],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[75,5],[75,2],[75,3],[75,4],[75,5],[67,5],[67,2],[67,3],[67,4],[67,5],[77,1],[77,1],[77,1],[81,2],[81,2],[81,1],[83,4],[83,2],[83,3],[83,0],[84,4],[84,3],[84,4],[84,0],[85,2],[85,2],[85,2],[85,1],[85,1],[64,4],[64,2],[64,4],[64,2],[64,2],[66,5],[66,2],[66,3],[66,4],[66,5],[66,2],[66,2],[68,5],[68,2],[68,3],[68,4],[68,5],[69,5],[69,2],[69,4],[69,5],[93,4],[93,2],[93,3],[93,4],[70,7],[70,2],[70,3],[70,4],[70,5],[70,7],[95,2],[95,1],[95,0],[96,4],[96,2],[96,3],[97,3],[97,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
addSyntaxError("Se esperaba un parametro",$$[$0],this._$.first_line, this._$.first_column);
break;
case 7: case 10: case 21: case 24: case 27: case 30: case 72: case 123: case 152: case 159: case 168: case 172:
addSyntaxError("Se esperaba \'(\'",$$[$0],this._$.first_line, this._$.first_column);
break;
case 8: case 11: case 17: case 22: case 25: case 31: case 73: case 125: case 154: case 161: case 170: case 174:
addSyntaxError("Se esperaba \')\'",$$[$0],this._$.first_line, this._$.first_column);
break;
case 13: case 147: case 173:
addSyntaxError("Se esperaba un identificador",$$[$0],this._$.first_line, this._$.first_column);
break;
case 19:
addSyntaxError("Esperaba un identificador",$$[$0],this._$.first_line, this._$.first_column);
break;
case 28:
addSyntaxError("Se esperaba \')\'",$$[$0-1],this._$.first_line, this._$.first_column);
break;
case 33: case 36:
addSyntaxError("Se esperaba un valor de arreglo",$$[$0],this._$.first_line, this._$.first_column);
break;
case 34: case 37: case 135: case 139:
addSyntaxError("Se esperaba \']\'",$$[$0],this._$.first_line, this._$.first_column);
break;
case 64:
addSyntaxError("Se esperaba una direccion de paqueteria",$$[$0],this._$.first_line, this._$.first_column);
break;
case 67:
addSyntaxError("Se esperaba \'include\'",$$[$0],this._$.first_line, this._$.first_column);
break;
case 69:
addSyntaxError("Se esperaba una funcion main",$$[$0],this._$.first_line, this._$.first_column);
break;
case 71:
addSyntaxError("Se esperaba la palabra \'main\'",$$[$0],this._$.first_line, this._$.first_column);
break;
case 74: case 79: case 164: case 175:
addSyntaxError("Se esperaba \'{\'",$$[$0],this._$.first_line, this._$.first_column);
break;
case 75: case 165: case 176:
addSyntaxError("Se esperaba \'}\'",$$[$0],this._$.first_line, this._$.first_column);
break;
case 84: case 86: case 88: case 90: case 92: case 94: case 96: case 98: case 103: case 106: case 108: case 118: case 120:
addSyntaxError("Se esperaba \';\'",$$[$0],this._$.first_line, this._$.first_column);
break;
case 119: case 153: case 160: case 169:
addSyntaxError("Se esperaba una condicion",$$[$0],this._$.first_line, this._$.first_column);
break;
case 121: case 126:
addSyntaxError("Se esperaba una declaracion",$$[$0],this._$.first_line, this._$.first_column);
break;
case 124:
addSyntaxError("No se especificaron los parametros del for",$$[$0],this._$.first_line, this._$.first_column);
break;
case 131:
addSyntaxError("Se esperaba un tipo de dato (int, float, char)",$$[$0],this._$.first_line, this._$.first_column);
break;
case 134: case 138:
addSyntaxError("Se esperaba una expresion",$$[$0],this._$.first_line, this._$.first_column);
break;
case 143:
addSyntaxError("Se esperaba un valor par asignar",$$[$0],this._$.first_line, this._$.first_column);
break;
case 148:
addSyntaxError("Se esperaba un valor para asignar",$$[$0],this._$.first_line, this._$.first_column);
break;
case 150:
addSyntaxError("Se espera un valor para asignar",$$[$0],this._$.first_line, this._$.first_column);
break;
case 155: case 157:
addSyntaxError("Se esperaba una declaracion o \'{\'",$$[$0],this._$.first_line, this._$.first_column);
break;
case 162:
addSyntaxError("Se esperaba una condicion o \'{\'",$$[$0],this._$.first_line, this._$.first_column);
break;
case 166:
addSyntaxError("Se esperaba un while",$$[$0],this._$.first_line, this._$.first_column);
break;
case 181:
addSyntaxError("Se esperaba un valor de caso",$$[$0],this._$.first_line, this._$.first_column);
break;
case 182: case 184:
addSyntaxError("Se esperaba \':\'",$$[$0],this._$.first_line, this._$.first_column);
break;
}
},
table: [{2:[1,4],52:1,53:2,55:3,56:[1,5]},{1:[3]},{2:[1,8],49:7,50:[1,9],54:[1,6]},o($V0,[2,68]),o($V0,[2,69]),{2:[1,11],57:[1,10]},{1:$V1},o($V0,[2,66]),o($V0,[2,67]),{2:[1,13],51:[1,12]},{2:[1,15],10:[1,14]},o($V0,[2,71]),o($V0,[2,63]),o($V0,[2,64]),{2:[1,17],11:[1,16]},o($V0,[2,72]),{2:[1,19],58:[1,18]},o($V0,[2,73]),{2:[1,21],59:20,63:$V2},o($V0,[2,74]),o($V0,[2,70],{61:23,64:24,23:25,25:26,19:27,21:28,8:29,12:30,17:31,66:32,67:33,68:34,69:35,70:36,81:39,77:55,9:$V3,13:$V4,15:$V5,18:$V6,20:$V7,22:$V8,24:$V9,26:$Va,71:$Vb,72:$Vc,76:$Vd,78:$Ve,79:$Vf,80:$Vg,82:$Vh,89:$Vi,90:$Vj,91:$Vk,92:$Vl,94:$Vm}),o($V0,[2,75]),o($Vn,[2,82]),o($Vn,[2,81]),{2:[1,60],65:[1,59]},{2:[1,62],65:[1,61]},{2:[1,64],65:[1,63]},{2:[1,66],65:[1,65]},{2:[1,68],65:[1,67]},{2:[1,70],65:[1,69]},{2:[1,72],65:[1,71]},{2:[1,74],65:[1,73]},o($Vo,[2,99]),o($Vo,[2,100]),o($Vo,[2,101]),{2:[1,76],65:[1,75]},o($Vo,[2,104]),{2:[1,78],65:[1,77]},{2:[1,80],65:[1,79]},{2:[1,82],15:[1,81]},{2:[1,84],85:83,86:$Vp,87:$Vq,88:$Vr},{2:[1,89],10:[1,88]},{2:[1,91],10:[1,90]},{2:[1,93],10:[1,92]},{2:[1,95],10:[1,94]},{2:[1,97],10:[1,96]},{2:[1,99],10:[1,98]},{2:[1,101],15:[1,100]},{2:[1,103],10:[1,102]},{2:[1,105],8:29,9:$V3,12:30,13:$V4,15:$V5,17:31,18:$V6,19:27,20:$V7,21:28,22:$V8,23:25,24:$V9,25:26,26:$Va,59:106,61:107,62:104,63:$V2,64:24,66:32,67:33,68:34,69:35,70:36,71:$Vb,72:$Vc,76:$Vd,77:55,78:$Ve,79:$Vf,80:$Vg,81:39,82:$Vh,89:$Vi,90:$Vj,91:$Vk,92:$Vl,94:$Vm},{2:[1,109],10:[1,108]},{2:[1,111],10:[1,110]},{2:[1,113],58:[1,112]},{2:[1,115],10:[1,114]},{2:[1,117],77:116,78:$Ve,79:$Vf,80:$Vg},o($Vs,[2,132]),o($Vs,[2,127]),o($Vs,[2,128]),o($Vs,[2,129]),o($Vo,[2,83]),o($Vo,[2,84]),o($Vo,[2,85]),o($Vo,[2,86]),o($Vo,[2,87]),o($Vo,[2,88]),o($Vo,[2,89]),o($Vo,[2,90]),o($Vo,[2,91]),o($Vo,[2,92]),o($Vo,[2,93]),o($Vo,[2,94]),o($Vo,[2,95]),o($Vo,[2,96]),o($Vo,[2,97]),o($Vo,[2,98]),o($Vo,[2,102]),o($Vo,[2,103]),o($Vo,[2,105]),o($Vo,[2,106]),o($Vo,[2,107]),o($Vo,[2,108]),o($Vt,[2,136],{83:118,28:[1,119]}),o($Vu,[2,147]),o($Vu,[2,149]),o($Vu,[2,150]),{2:[1,122],4:120,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,21:121,22:$V8,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($Vu,[2,144]),o($Vu,[2,145]),o($VE,$VF,{31:130,8:132,12:133,3:135,4:136,9:$V3,10:$Vv,13:$V4,15:$Vw,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($Vu,[2,27]),o($VE,$VF,{31:130,8:132,12:133,4:136,3:137,9:$V3,10:$Vv,13:$V4,15:$Vw,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($Vu,[2,30]),{2:[1,139],11:[1,138]},o($Vu,[2,21]),{2:[1,141],11:[1,140]},o($Vu,[2,24]),o($VE,$VF,{31:130,8:132,12:133,4:136,3:142,9:$V3,10:$Vv,13:$V4,15:$Vw,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VG,[2,7]),o($VE,$VF,{31:130,8:132,12:133,4:136,3:143,9:$V3,10:$Vv,13:$V4,15:$Vw,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VG,[2,10]),o($VH,[2,14],{16:144,14:145,10:[1,146]}),o($V1,[2,19]),{2:[1,148],4:147,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($Vo,[2,152]),o($Vo,[2,156]),o($Vo,[2,157]),{2:[1,150],8:29,9:$V3,12:30,13:$V4,15:$V5,17:31,18:$V6,19:27,20:$V7,21:28,22:$V8,23:25,24:$V9,25:26,26:$Va,58:[1,149],61:23,64:24,66:32,67:33,68:34,69:35,70:36,71:$Vb,72:$Vc,76:$Vd,77:55,78:$Ve,79:$Vf,80:$Vg,81:39,82:$Vh,89:$Vi,90:$Vj,91:$Vk,92:$Vl,94:$Vm},o($Vo,[2,80]),{2:[1,152],15:$V5,64:153,75:151,77:55,78:$Ve,79:$Vf,80:$Vg,81:39,82:$Vh},o($Vo,[2,123]),{2:[1,155],4:154,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($Vo,[2,159]),o([2,9,13,15,18,20,22,24,26,63,71,72,76,78,79,80,82,89,90,91,92,94],$VI,{60:156}),o($V1,[2,164]),{2:[1,158],15:[1,157]},o($Vo,[2,172]),o($Vs,[2,130]),o($Vs,[2,131]),{2:[1,160],85:159,86:$Vp,87:$Vq,88:$Vr},{2:[1,162],4:161,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($Vu,[2,141],{32:$VJ,33:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT}),o($Vu,[2,142]),o($Vu,[2,143]),{4:174,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{4:175,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($VG,[2,53]),o($VG,[2,54]),o($VG,[2,55]),o($VG,[2,56]),o($VG,[2,57],{27:176,28:[1,177]}),o($VG,[2,58]),{15:[1,178]},o($VG,[2,60]),o($VG,[2,61]),{4:179,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{2:[1,181],11:[1,180]},o($VU,[2,5],{5:182,7:[1,183],32:$VJ,33:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT}),{2:[1,185],11:[1,184]},o($Vu,[2,20]),o($Vu,[2,22]),o($Vu,[2,23]),o($Vu,[2,25]),{2:[1,187],11:[1,186]},{2:[1,189],11:[1,188]},o($V1,[2,18]),o($V1,$Vs,{6:[1,190]}),o($VE,$VF,{31:130,8:132,12:133,4:136,3:191,9:$V3,10:$Vv,13:$V4,15:$Vw,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),{2:[1,193],11:[1,192],32:$VJ,33:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT},o($Vo,[2,153]),o($Vo,[2,78]),o($Vo,[2,79]),{2:[1,195],11:[1,194]},o($Vo,[2,124]),{2:[1,197],65:[1,196]},{2:[1,199],11:[1,198],32:$VJ,33:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT},o($Vo,[2,160]),{2:[1,201],8:29,9:$V3,12:30,13:$V4,15:$V5,17:31,18:$V6,19:27,20:$V7,21:28,22:$V8,23:25,24:$V9,25:26,26:$Va,61:202,63:[1,200],64:24,66:32,67:33,68:34,69:35,70:36,71:$Vb,72:$Vc,76:$Vd,77:55,78:$Ve,79:$Vf,80:$Vg,81:39,82:$Vh,89:$Vi,90:$Vj,91:$Vk,92:$Vl,94:$Vm},{2:[1,204],11:[1,203]},o($Vo,[2,173]),o($Vu,[2,146]),o($Vu,[2,148]),{2:[1,206],29:[1,205],32:$VJ,33:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT},o($Vt,[2,134]),{4:207,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{4:208,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{4:209,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{4:210,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{4:211,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{4:212,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{4:213,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{4:214,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{4:215,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{4:216,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{4:217,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($VV,[2,42],{39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT}),o($VG,[2,52]),o($VG,[2,39]),{2:[1,219],4:218,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($VG,[2,59]),{11:[1,220],32:$VJ,33:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT},o($Vu,[2,26]),o($Vu,[2,28]),o($VE,[2,1],{6:[1,221]}),{6:[1,222]},o($Vu,[2,29]),o($Vu,[2,31]),o($VG,[2,6]),o($VG,[2,8]),o($VG,[2,9]),o($VG,$VE),{2:[1,224],15:[1,223]},{2:[1,226],11:[1,225]},{2:[1,228],8:29,9:$V3,12:30,13:$V4,15:$V5,17:31,18:$V6,19:27,20:$V7,21:28,22:$V8,23:25,24:$V9,25:26,26:$Va,59:106,61:107,62:227,63:$V2,64:24,66:32,67:33,68:34,69:35,70:36,71:$Vb,72:$Vc,76:$Vd,77:55,78:$Ve,79:$Vf,80:$Vg,81:39,82:$Vh,89:$Vi,90:$Vj,91:$Vk,92:$Vl,94:$Vm},o($Vo,[2,154]),{2:[1,230],8:29,9:$V3,12:30,13:$V4,15:$V5,17:31,18:$V6,19:27,20:$V7,21:28,22:$V8,23:25,24:$V9,25:26,26:$Va,59:106,61:107,62:229,63:$V2,64:24,66:32,67:33,68:34,69:35,70:36,71:$Vb,72:$Vc,76:$Vd,77:55,78:$Ve,79:$Vf,80:$Vg,81:39,82:$Vh,89:$Vi,90:$Vj,91:$Vk,92:$Vl,94:$Vm},o($Vo,[2,125]),{2:[1,232],4:231,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($VE,[2,118]),{2:[1,234],8:29,9:$V3,12:30,13:$V4,15:$V5,17:31,18:$V6,19:27,20:$V7,21:28,22:$V8,23:25,24:$V9,25:26,26:$Va,59:106,61:107,62:233,63:$V2,64:24,66:32,67:33,68:34,69:35,70:36,71:$Vb,72:$Vc,76:$Vd,77:55,78:$Ve,79:$Vf,80:$Vg,81:39,82:$Vh,89:$Vi,90:$Vj,91:$Vk,92:$Vl,94:$Vm},o($Vo,[2,161]),{2:[1,236],91:[1,237],93:235},o($V1,[2,165]),o($VW,[2,76]),{2:[1,239],58:[1,238]},o($Vo,[2,174]),o($VX,[2,140],{84:240}),o($Vt,[2,135]),o([2,6,7,11,29,32,33,65,99],[2,40],{35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT}),o([2,6,7,11,29,33,65,99],[2,41],{32:$VJ,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT}),o($VV,[2,43],{39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT}),o($VV,[2,44],{39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT}),o($VV,[2,45],{39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT}),o($VV,[2,46],{39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT}),o($VY,[2,47],{41:$VR,42:$VS,43:$VT}),o($VY,[2,48],{41:$VR,42:$VS,43:$VT}),o($VG,[2,49]),o($VG,[2,50]),o($VG,[2,51]),{2:[1,242],29:[1,241],32:$VJ,33:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT},o($VG,[2,33]),o($VG,[2,62]),{4:243,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{2:[1,244]},o($VH,[2,12]),o($VH,[2,13]),o($V1,[2,16]),o($V1,[2,17]),o($Vo,[2,151]),o($Vo,[2,155]),o($Vo,[2,122]),o($Vo,[2,126]),{2:[1,246],32:$VJ,33:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT,65:[1,245]},o($VE,[2,119]),o($Vo,[2,158]),o($Vo,[2,162]),o($V1,[2,163]),o($V1,[2,166]),{2:[1,248],10:[1,247]},o($VZ,[2,179],{95:249,97:250,100:[1,251]}),o($Vo,[2,175]),o($Vt,[2,133],{28:[1,252]}),o($V_,[2,38],{30:253}),o($VG,[2,34]),o($VU,[2,3],{32:$VJ,33:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT}),o($VU,[2,4]),{2:[1,255],8:257,9:$V3,12:258,13:$V4,15:$V5,19:262,20:$V7,21:263,22:$V8,23:261,24:$V9,25:260,26:$Va,64:256,73:254,74:[1,259],77:55,78:$Ve,79:$Vf,80:$Vg,81:39,82:$Vh},o($VE,[2,120]),{2:[1,265],4:264,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($V1,[2,168]),{2:[1,267],63:[1,266],96:268,98:[1,269]},o($VZ,[2,178]),{2:[1,271],99:[1,270]},{2:[1,273],4:272,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($VG,[2,32],{28:[1,274]}),o($VE,[2,117]),o($VE,[2,121]),o($VE,[2,109]),o($VE,[2,110]),o($VE,[2,111]),o($VE,[2,112]),o($VE,[2,113]),o($VE,[2,114]),o($VE,[2,115]),o($VE,[2,116]),{2:[1,276],11:[1,275],32:$VJ,33:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT},o($V1,[2,169]),o($Vo,[2,171]),o($Vo,[2,176]),o($VZ,[2,177]),{2:[1,278],4:277,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($VW,$VI,{60:279}),o($VZ,[2,184]),{2:[1,281],29:[1,280],32:$VJ,33:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT},o($VX,[2,138]),{2:[1,283],4:282,8:132,9:$V3,10:$Vv,12:133,13:$V4,15:$Vw,31:130,34:$Vx,40:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($V1,[2,167]),o($V1,[2,170]),{2:[1,285],32:$VJ,33:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT,99:[1,284]},o($VZ,[2,181]),o($VZ,[2,183],{64:24,23:25,25:26,19:27,21:28,8:29,12:30,17:31,66:32,67:33,68:34,69:35,70:36,81:39,77:55,61:202,9:$V3,13:$V4,15:$V5,18:$V6,20:$V7,22:$V8,24:$V9,26:$Va,71:$Vb,72:$Vc,76:$Vd,78:$Ve,79:$Vf,80:$Vg,82:$Vh,89:$Vi,90:$Vj,91:$Vk,92:$Vl,94:$Vm}),o($VX,[2,137]),o($VX,[2,139]),{2:[1,287],29:[1,286],32:$VJ,33:$VK,35:$VL,36:$VM,37:$VN,38:$VO,39:$VP,40:$VQ,41:$VR,42:$VS,43:$VT},o($V_,[2,36]),o($VW,$VI,{60:288}),o($VZ,[2,182]),o($V_,[2,35]),o($V_,[2,37]),o($VZ,[2,180],{64:24,23:25,25:26,19:27,21:28,8:29,12:30,17:31,66:32,67:33,68:34,69:35,70:36,81:39,77:55,61:202,9:$V3,13:$V4,15:$V5,18:$V6,20:$V7,22:$V8,24:$V9,26:$Va,71:$Vb,72:$Vc,76:$Vd,78:$Ve,79:$Vf,80:$Vg,82:$Vh,89:$Vi,90:$Vj,91:$Vk,92:$Vl,94:$Vm})],
defaultActions: {6:[2,65]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//import
	var ErrorLexico = require ('../../error/LexicalError');
    var ErrorSintactico = require('../../error/SyntaxError');
	//variables
	let erroresLexicos = [];
	let erroresSintacticos = [];
	let lineNumber=0;
	let columnNumber=0;

	function getErroresLexicos(){
		return erroresLexicos;
	}

	function getErroresSintacticos(){
		return erroresSintacticos;
	}

	function setLineNumber(line){
		this.lineNumber=line;
	}

	function setColumnNumber(column){
		this.columnNumber=column
	}

	function addLexicalError(lexema, line, column){
		try{
			let errorLexico = new ErrorLexico(lexema, line+lineNumber, column+columnNumber);
			erroresLexicos.push(errorLexico);
		}catch(ex){
			console.log(ex);
		}
	}

	function addSyntaxError(descripcion, token, line, column){
		try{
			let errorSintactico = new ErrorSintactico(descripcion, token, line+lineNumber, column+columnNumber);
			erroresLexicos.push(errorSintactico);
		}catch(ex){
			console.log(ex);
		}
	}


	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:console.log("metodo clase: "+yy_.yytext);return 13;
break;
case 2:console.log("metodo: "+yy_.yytext);return 9;
break;
case 3:console.log("clas: "+yy_.yytext);return 18;
break;
case 4:return 89;
break;
case 5:return 90;
break;
case 6:return 94;
break;
case 7:return 91;
break;
case 8:return 50;
break;
case 9:return 51;
break;
case 10:return 76;
break;
case 11:return 92;
break;
case 12:return 78;
break;
case 13:return 80;
break;
case 14:return 79;
break;
case 15:return 82;
break;
case 16:return 98;
break;
case 17:return 72;
break;
case 18:return 100;
break;
case 19:return 71;
break;
case 20:return 24;
break;
case 21:return 26;
break;
case 22:return 20;
break;
case 23:return 22;
break;
case 24:return 56;
break;
case 25:return 57;
break;
case 26:return 44;
break;
case 27:return 45;
break;
case 28:return 46;
break;
case 29:return 47;
break;
case 30:return 15;
break;
case 31:return 35;
break;
case 32:return 36;
break;
case 33:return 37;
break;
case 34:return 38;
break;
case 35:return 32;
break;
case 36:return 33;
break;
case 37:return 34;
break;
case 38:return 87;
break;
case 39:return 88;
break;
case 40:return 39;
break;
case 41:return 40;
break;
case 42:return 41;
break;
case 43:return 42;
break;
case 44:return 43;
break;
case 45:return 86;
break;
case 46:return 28;
break;
case 47:return 29;
break;
case 48:return 58;
break;
case 49:return 63;
break;
case 50:return 10;
break;
case 51:return 11;
break;
case 52:return 65;
break;
case 53:return 99;
break;
case 54:return 48;
break;
case 55:return 6;
break;
case 56:return 54;
break;
case 57:/*ignore*/;
break;
case 58:/*ignore*/;
break;
case 59: 
	console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
	addLexicalError(yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column);
	
break;
}
},
rules: [/^(?:\s+)/,/^(?:(((JAVA)(\.([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*)))(\.([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*))))/,/^(?:((PY)(\.([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*))))/,/^(?:((JAVA)(\.([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*))))/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:while\b)/,/^(?:#include\b)/,/^(?:("["PY"|"JAVA"]((\.([aA-zZ|"_"|"-"|0-9|","|"$"|"\("|"\)"|"\["|"\]"|"\{"|"\}"]+))+|\.\*)"))/,/^(?:for\b)/,/^(?:do\b)/,/^(?:int\b)/,/^(?:char\b)/,/^(?:float\b)/,/^(?:const\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:continue\b)/,/^(?:scanf\b)/,/^(?:printf\b)/,/^(?:clrscr\b)/,/^(?:getch\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:([0-9]+\b))/,/^(?:([0-9]+(\.[0-9]+)\b))/,/^(?:('[^\']'))/,/^(?:("[^\"]*"))/,/^(?:([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*))/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?::)/,/^(?:&)/,/^(?:,)/,/^(?:$)/,/^(?:(\/\/.*))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:.+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = C;
exports.Parser = C.Parser;
exports.parse = function () { return C.parse.apply(C, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}