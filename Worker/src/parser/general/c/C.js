/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var C = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,10],$V2=[1,11],$V3=[2,86],$V4=[1,8],$V5=[1,12],$V6=[1,15],$V7=[1,16],$V8=[1,17],$V9=[1,13],$Va=[2,11,60,90,91,92],$Vb=[2,153],$Vc=[1,31],$Vd=[2,15],$Ve=[2,15,18,56,58,62,82,83,84,86],$Vf=[2,11,60],$Vg=[2,163],$Vh=[1,44],$Vi=[1,45],$Vj=[1,46],$Vk=[1,61],$Vl=[1,60],$Vm=[1,62],$Vn=[1,55],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,57],$Vv=[2,14],$Vw=[1,66],$Vx=[1,73],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[2,6,11,32,37,38,40,41,42,43,44,45,46,47,48,60,106],$VK=[2,69],$VL=[2,11],$VM=[2,2],$VN=[2,157],$VO=[1,106],$VP=[2,6,11,32,37,38,40,41,42,43,60,106],$VQ=[2,5],$VR=[1,128],$VS=[2,6,11,32,37,38,40,41,42,43,44,45,60,106],$VT=[2,60],$VU=[1,167],$VV=[1,165],$VW=[1,166],$VX=[1,149],$VY=[1,163],$VZ=[1,164],$V_=[1,170],$V$=[1,168],$V01=[1,169],$V11=[1,171],$V21=[1,172],$V31=[1,173],$V41=[2,47],$V51=[1,178],$V61=[2,9,13,15,18,20,22,25,29,56,58,62,69,75,76,80,82,83,84,86,93,94,95,96,98],$V71=[2,9,13,15,18,20,22,25,29,69,75,76,80,82,83,84,86,93,94,95,96,98],$V81=[1,215],$V91=[2,52],$Va1=[1,230],$Vb1=[2,94],$Vc1=[2,36],$Vd1=[1,262],$Ve1=[2,9,10,13,15,39,45,49,50,51,52,53],$Vf1=[2,9,13,15,18,20,22,25,29,82,83,84,86],$Vg1=[2,195],$Vh1=[1,315],$Vi1=[1,316],$Vj1=[2,69,105,107],$Vk1=[2,224],$Vl1=[1,347],$Vm1=[1,351];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"parametros":3,"expresion":4,"parametros_re":5,"COMA":6,"paremetros_re":7,"metodo_stmt":8,"METODO":9,"OPEN_PARENTHESIS":10,"CLOSE_PARENTHESIS":11,"metodo_clase_stmt":12,"METODO_CLASE":13,"variable_clase":14,"IDENTIFICADOR":15,"asignacion_clase":16,"clase_stmt":17,"CLASE":18,"clean_stmt":19,"CLEAN_SCREEN":20,"getch_stmt":21,"GETCH":22,"scan_parametros":23,"scan_stmt":24,"SCANF":25,"print_parametros":26,"print_parametros_re":27,"print_stmt":28,"PRINTF":29,"nuevo_arreglo":30,"OPEN_BRACKET":31,"CLOSE_BRACKET":32,"nuevo_arreglo_re":33,"arreglo_stmt":34,"magnitud":35,"magnitud_re":36,"AND":37,"OR":38,"NOT":39,"MAYOR":40,"MENOR":41,"COMPARACION":42,"DIFERENTE":43,"SUMA":44,"RESTA":45,"POR":46,"DIV":47,"MOD":48,"LIT_ENTERO":49,"LIT_DECIMAL":50,"LIT_CARACTER":51,"LIT_STRING":52,"PUNTERO":53,"ini":54,"code_c":55,"EOF":56,"paqueteria":57,"INCLUDE":58,"var_stmt":59,"COLON":60,"main":61,"VOID":62,"MAIN":63,"OPEN_CURLY":64,"statements":65,"empty_statements":66,"statement":67,"block_statements":68,"CLOSE_CURLY":69,"if_stmt":70,"for_stmt":71,"while_stmt":72,"do_stmt":73,"switch_stmt":74,"CONTINUE":75,"BREAK":76,"accion_for":77,"for_inicio":78,"for_condicion":79,"FOR":80,"data_type":81,"INT":82,"FLOAT":83,"CHAR":84,"const_data":85,"CONST":86,"arreglo":87,"arreglo_re":88,"valor_asignacion":89,"IGUAL":90,"INCREMENTO":91,"DECREMENTO":92,"IF":93,"ELSE":94,"WHILE":95,"DO":96,"while_do":97,"SWITCH":98,"cases":99,"case_stmt":100,"default_stmt":101,"switch_statement":102,"switch_instructions":103,"default_instructions":104,"CASE":105,"SEMI_COLON":106,"DEFAULT":107,"$accept":0,"$end":1},
terminals_: {2:"error",6:"COMA",7:"paremetros_re",9:"METODO",10:"OPEN_PARENTHESIS",11:"CLOSE_PARENTHESIS",13:"METODO_CLASE",15:"IDENTIFICADOR",18:"CLASE",20:"CLEAN_SCREEN",22:"GETCH",25:"SCANF",29:"PRINTF",31:"OPEN_BRACKET",32:"CLOSE_BRACKET",37:"AND",38:"OR",39:"NOT",40:"MAYOR",41:"MENOR",42:"COMPARACION",43:"DIFERENTE",44:"SUMA",45:"RESTA",46:"POR",47:"DIV",48:"MOD",49:"LIT_ENTERO",50:"LIT_DECIMAL",51:"LIT_CARACTER",52:"LIT_STRING",53:"PUNTERO",56:"EOF",58:"INCLUDE",60:"COLON",62:"VOID",63:"MAIN",64:"OPEN_CURLY",69:"CLOSE_CURLY",75:"CONTINUE",76:"BREAK",80:"FOR",82:"INT",83:"FLOAT",84:"CHAR",86:"CONST",90:"IGUAL",91:"INCREMENTO",92:"DECREMENTO",93:"IF",94:"ELSE",95:"WHILE",96:"DO",98:"SWITCH",105:"CASE",106:"SEMI_COLON",107:"DEFAULT"},
productions_: [0,[3,2],[3,0],[5,3],[5,3],[5,0],[8,4],[8,2],[8,4],[12,4],[12,2],[12,4],[14,3],[14,3],[14,0],[16,1],[16,3],[16,3],[17,3],[17,2],[19,3],[19,2],[19,3],[21,3],[21,2],[21,3],[23,3],[23,2],[23,3],[24,4],[24,2],[24,3],[24,4],[26,2],[27,3],[27,3],[27,0],[28,4],[28,2],[28,3],[28,4],[30,4],[30,2],[30,3],[33,4],[33,3],[33,4],[33,0],[34,2],[35,4],[35,0],[36,4],[36,0],[4,3],[4,3],[4,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,3],[4,1],[4,1],[4,3],[54,2],[57,2],[57,2],[55,2],[55,3],[55,3],[55,3],[55,3],[55,2],[55,2],[55,0],[61,6],[61,2],[61,3],[61,4],[61,5],[61,6],[66,2],[66,0],[68,2],[68,1],[65,2],[65,1],[67,2],[67,2],[67,2],[67,2],[67,2],[67,2],[67,2],[67,2],[67,2],[67,2],[67,2],[67,2],[67,2],[67,2],[67,2],[67,2],[67,1],[67,1],[67,1],[67,2],[67,2],[67,1],[67,2],[67,2],[67,2],[67,2],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[77,1],[78,2],[78,2],[79,2],[79,2],[71,7],[71,2],[71,3],[71,4],[71,5],[71,6],[71,7],[81,1],[81,1],[81,1],[85,2],[85,2],[85,1],[87,4],[87,2],[87,3],[87,0],[88,4],[88,3],[88,4],[88,0],[89,2],[89,2],[89,2],[89,1],[89,1],[89,0],[59,4],[59,2],[59,3],[70,5],[70,2],[70,3],[70,4],[70,5],[70,2],[70,2],[72,5],[72,2],[72,3],[72,4],[72,5],[73,5],[73,2],[73,4],[73,5],[97,4],[97,2],[97,3],[97,4],[74,7],[74,2],[74,3],[74,4],[74,5],[74,7],[99,2],[99,1],[99,0],[102,2],[102,2],[102,2],[102,2],[102,2],[102,2],[102,2],[102,2],[102,2],[102,2],[102,2],[102,2],[102,2],[102,2],[102,2],[102,2],[102,1],[102,1],[102,1],[102,2],[102,2],[102,1],[102,2],[102,2],[103,2],[103,2],[103,2],[104,2],[104,0],[100,4],[100,2],[100,3],[100,4],[101,3],[101,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 33:

		$$[$0].push($$[$0-1]);
		this.$=reversaArreglo($$[$0]);
	
break;
case 2: case 5: case 14: case 36: case 47: case 50: case 52: case 86: case 94: case 98: case 153: case 157: case 163: case 195: case 221: case 224:
this.$=[];
break;
case 3: case 34: case 79: case 93: case 97: case 193: case 220: case 223:

		$$[$0].push($$[$0-1]);
		this.$=$$[$0];
	
break;
case 4:
addSyntaxError("Se esperaba un parametro",$$[$0],linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 6:
this.$ = instruccionesApi.nuevoMetodo($$[$0-3], $$[$0-1], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 7: case 10: case 21: case 24: case 30: case 38: case 89: case 138: case 168: case 175: case 184: case 188:
addSyntaxError("Se esperaba \'(\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 8: case 11: case 17: case 22: case 25: case 40: case 90: case 170: case 177: case 186: case 190:
addSyntaxError("Se esperaba \')\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 9:
this.$ = instruccionesApi.nuevoMetodo($$[$0-3],$$[$0-1], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 12:

		var id = instruccionesApi.nuevoValor($$[$0-1], null, null, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
		var asignacionClase = instruccionesApi.nuevaDeclaracion(TIPO_VISIBILIDAD.LOCAL, id, null, null, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
		$$[$0].push(asignacionClase);
	 	this.$=$$[$0];
		 
break;
case 13:
addSyntaxError("Se esperaba un identificador",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 15:
this.$=instruccionesApi.tipoAsignacion($$[$0], "declaracion");
break;
case 16:
this.$=instruccionesApi.tipoAsignacion($$[$0-1], "asignacion");
break;
case 18:

		var arreglo = [];
		var id = instruccionesApi.nuevoValor($$[$0-1], null, null, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
		if($$[$0].rol == "declaracion"){
			arreglo = $$[$0].arreglo;
			arreglo.push(instruccionesApi.nuevaDeclaracion(TIPO_VISIBILIDAD.LOCAL, id, null, null,lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
			for(let index=0; index<arreglo.length; index++){
				arreglo[index].tipo = $$[$0-2];
			}
		}else if($$[$0].rol == "asignacion"){
			//Asignaciones
			arreglo.push(instruccionesApi.nuevaAsignacionClase($$[$0-1], $$[$0], $$[$0-2], lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
		}
		this.$=instruccionesApi.nuevaVariable(arreglo, lenguaje, linea, columna);;
	
break;
case 19:
addSyntaxError("Esperaba un identificador",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 20:
this.$=instruccionesApi.nuevoClean(linea(this._$.first_line), columna(this._$.first_column));
break;
case 23:
this.$=instruccionesApi.nuevoGetch(linea(this._$.first_line), columna(this._$.first_column))
break;
case 26:

		var arreglo = [];
		arreglo.push($$[$0-2]);
		arreglo.push($$[$0]);
		this.$=arreglo;
	
break;
case 27:
addSyntaxError("Se esperaba \',\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 28: case 31: case 39:
addSyntaxError("Se esperaba una expresion", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 29:

		this.$=instruccionesApi.nuevoScan($$[$0-1][1], $$[$0-1][0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 32:
addSyntaxError("Se esperaba \')\'",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column));
break;
case 35:
addSyntaxError("Se esperaba una expresion", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 37:

		this.$=instruccionesApi.nuevoImprimir($$[$0-1],TIPO_PRINT.PRINTLN, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 41: case 49: case 150:

		$$[$0].push($$[$0-2]);
		this.$=reversaArreglo($$[$0]);
	
break;
case 42:
addSyntaxError("Se esperaba un valor de arreglo",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 43: case 152:
addSyntaxError("Se esperaba \']\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 44: case 51: case 154:

		$$[$0].push($$[$0-2]);
		this.$=$$[$0];
	
break;
case 45:
addSyntaxError("Se esperaba un valor de arreglo",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column)); this.$=$$[$0];
break;
case 46:
addSyntaxError("Se esperaba \']\'",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column)); this.$=$$[$0];
break;
case 48:

		this.$=instruccionesApi.nuevoValor($$[$0-1], $$[$0],TIPO_VALOR.IDENTIFICADOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 53:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.AND, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 54:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.OR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 55:
this.$=instruccionesApi.operacionUnaria($$[$0], TIPO_OPERACION.NOT, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 56:
this.$=instruccionesApi.operacionAritmetica($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 57:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.MENOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 58:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.COMPARACION, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 59:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 60:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.SUMA, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 61:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.RESTA, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 62:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 63:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 64:
this.$=instruccionesApi.operacionAritmetica($$[$0-2], $$[$0], TIPO_OPERACION.MOD, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 65:
this.$=instruccionesApi.operacionUnaria($$[$0], TIPO_OPERACION.NEGATIVO, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 66:
this.$=instruccionesApi.nuevoValor($$[$0], null, TIPO_VALOR.ENTERO, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 67:
this.$=instruccionesApi.nuevoValor($$[$0], null, TIPO_VALOR.DECIMAL, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 68:
this.$=instruccionesApi.nuevoValor($$[$0], null, TIPO_VALOR.CARACTER, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 69:
this.$=instruccionesApi.nuevoValor($$[$0], null, TIPO_VALOR.CADENA, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 70:
this.$=instruccionesApi.nuevoValor($$[$0],null, TIPO_VALOR.IDENTIFICADOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 71: case 115: case 116: case 117: case 120: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 149: case 212: case 213: case 214: case 217:
this.$=$$[$0];
break;
case 72:
this.$=instruccionesApi.nuevoValor($$[$0-1], $$[$0], TIPO_VALOR.PUNTERO_IDENTIFICADOR, lenguaje, linea(this._$.fist_line), columna(this._$.fist_column));
break;
case 73: case 74:
this.$=instruccionesApi.nuevoValor($$[$0], null, TIPO_VALOR.METODO, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 75: case 99: case 101: case 103: case 105: case 107: case 109: case 111: case 113: case 118: case 133: case 135: case 183: case 196: case 198: case 200: case 202: case 204: case 206: case 208: case 210: case 215:
this.$=$$[$0-1];
break;
case 76:
return reversaArreglo($$[$0-1]);
break;
case 77:
this.$=instruccionesApi.nuevoInclude($$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 78:
addSyntaxError("Se esperaba una direccion de paqueteria",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 80: case 82:
$$[$0].push($$[$0-2]);this.$=$$[$0];
break;
case 81:
addSyntaxError("Se esperaba \';\'", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column)); this.$=$$[$0];
break;
case 83:
addSyntaxError("Se esperaba \';\'", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 84:
$$[$0].push($$[$0-1]); this.$=$$[$0];
break;
case 85:
addSyntaxError("Se esperaba una instruccion de inicio, un main, variable o paqueteria", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column)); this.$=$$[$0];
break;
case 87:

		this.$=instruccionesApi.nuevoMain(reversaArreglo($$[$0]), lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 88:
addSyntaxError("Se esperaba la palabra \'main\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 91: case 180: case 191:
addSyntaxError("Se esperaba \'{\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 92: case 181: case 192:
addSyntaxError("Se esperaba \'}\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 95:
this.$=reversaArreglo($$[$0]);
break;
case 96:
this.$= $$[$0];
break;
case 100: case 102: case 104: case 106: case 108: case 110: case 112: case 114: case 119: case 122: case 124: case 197: case 199: case 201: case 203: case 205: case 207: case 209: case 211: case 216: case 219:
addSyntaxError("Se esperaba \';\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 121: case 218:
this.$=instruccionesApi.nuevoContinue(linea(this._$.first_line), columna(this._$.first_column));
break;
case 123:
this.$=instruccionesApi.nuevoBreak(linea(this._$.first_line), columna(this._$.first_column));
break;
case 137:

		this.$=instruccionesApi.nuevoFor($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 139:
addSyntaxError("Se esperaba una expresion de inicio", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 140:
addSyntaxError("Se esperaba una condicion", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 141:
addSyntaxError("Se esperaba una accion", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 142:
addSyntaxError("Se esperaba \')\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 143:
addSyntaxError("Se esperaba una declaracion", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 144:
this.$=TIPO_DATO.INT;
break;
case 145:
this.$=TIPO_DATO.FLOAT;
break;
case 146:
this.$=TIPO_DATO.CHAR;
break;
case 147:

		var arreglo = [];
		arreglo.push(TIPO_VISIBILIDAD.CONST);
		arreglo.push($$[$0]);
		this.$=arreglo;
	
break;
case 148:
addSyntaxError("Se esperaba un tipo de dato (int, float, char)",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 151:
addSyntaxError("Se esperaba una expresion",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 155:
addSyntaxError("Se esperaba una expresion",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 156:
addSyntaxError("Se esperaba \']\'",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 158:

		var arreglo = [];
		arreglo.push(instruccionesApi.nuevaAsignacion_O(null, null, TIPO_OPERACION.IGUAL, $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
		console.log("IGUAL EXPRESION");
		this.$=arreglo;
	
break;
case 159:

		var arreglo = [];
		arreglo.push(instruccionesApi.nuevaAsignacion_O(null, null, TIPO_OPERACION.IGUAL, $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
		console.log("IGUAL getch");
		this.$=arreglo;
	
break;
case 160:
addSyntaxError("Se esperaba un valor par asignar",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 161:

		var arreglo = [];
		arreglo.push(instruccionesApi.nuevaAsignacion_O(null, null, TIPO_OPERACION.INCREMENTO, null, lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
		console.log("INCREMENTO");
		this.$ = arreglo;
		
break;
case 162:

		var arreglo = [];
		arreglo.push(instruccionesApi.nuevaAsignacion_O(null, null, TIPO_OPERACION.DECREMENTO, null, lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
		console.log("DECREMENTO");
		this.$ = arreglo;
		
break;
case 164:

		var id = instruccionesApi.nuevoValor($$[$0-2],$$[$0-1], TIPO_VALOR.IDENTIFICADOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
		console.log(".....................................................................................");
		console.log($$[$0-2]);
		if($$[$0].length>0){
			$$[$0][0].id = id;
			$$[$0][0].magnitud = $$[$0-1];
		}
		var tipo = null;
		var visibilidad = null;
		if(!Array.isArray($$[$0-3])){
			tipo = $$[$0-3];
		}else{
			visibilidad = $$[$0-3][0];
			tipo = $$[$0-3][1];
		}
		$$[$0].push(instruccionesApi.nuevaDeclaracion(visibilidad, id, $$[$0-1], tipo, lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
		this.$=instruccionesApi.nuevaVariable(reversaArreglo($$[$0]), lenguaje, linea, columna);
	
break;
case 165: case 189:
addSyntaxError("Se esperaba un identificador",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 166:

		console.log(".....................................................................................");
		console.log($$[$0-2]);
		if($$[$0].length>0){
			$$[$0][0].id = instruccionesApi.nuevoValor($$[$0-2], $$[$0-1], TIPO_VALOR.IDENTIFICADOR,lenguaje, linea(this._$.first_line), columna(this._$.first_column));
			$$[$0][0].magnitud = $$[$0-1];
		}
		this.$=instruccionesApi.nuevaVariable(reversaArreglo($$[$0]), lenguaje, linea, columna);
	
break;
case 167:

		this.$=instruccionesApi.nuevoIf($$[$0-2], $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 169: case 176: case 185:
addSyntaxError("Se esperaba una condicion",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 171: case 173:
addSyntaxError("Se esperaba una declaracion o \'{\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 172:

		var else_stmt = instruccionesApi.nuevoElse(null, null, null, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
		if(!Array.isArray($$[$0])){
			if($$[$0].rol == TIPO_INSTRUCCION.IF){
				else_stmt.condicion = $$[$0].condicion;
			}
			else_stmt.instrucciones = $$[$0].instrucciones;
		}else{
			else_stmt.instrucciones = $$[$0];
		}
		this.$=else_stmt;
	
break;
case 174:

		this.$=instruccionesApi.nuevoWhile($$[$0-2], $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 178:
addSyntaxError("Se esperaba una condicion o \'{\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 179:
this.$=instruccionesApi.nuevoDoWhile(reversaArreglo($$[$0-2]), $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 182:
addSyntaxError("Se esperaba un while",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 187:

		this.$=instruccionesApi.nuevoSwitch($$[$0-4], reversaArreglo($$[$0-1]), lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 194:
var arreglo = []; arreglo.push($$[$0]); this.$=arreglo;
break;
case 222:
addSyntaxError("Se esperaba \';\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 225:
this.$=instruccionesApi.nuevoCase($$[$0-2], reversaArreglo($$[$0]), lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 226:
addSyntaxError("Se esperaba un valor de caso",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 227: case 230:
addSyntaxError("Se esperaba \':\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 228:
addSyntaxError("Se esperaba break;", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 229:
this.$=instruccionesApi.nuevoDefault(reversaArreglo($$[$0]), lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
}
},
table: [{2:$V0,15:$V1,17:5,18:$V2,54:1,55:2,56:$V3,57:3,58:$V4,59:4,61:6,62:$V5,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9},{1:[3]},{56:[1,18]},{2:$V0,15:$V1,17:5,18:$V2,55:19,56:$V3,57:3,58:$V4,59:4,61:6,62:$V5,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9},{2:[1,21],60:[1,20]},{2:[1,23],60:[1,22]},{2:$V0,15:$V1,17:5,18:$V2,55:24,56:$V3,57:3,58:$V4,59:4,61:6,62:$V5,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9},{2:$V0,15:$V1,17:5,18:$V2,55:25,56:$V3,57:3,58:$V4,59:4,61:6,62:$V5,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9},{2:[1,27],52:[1,26]},{2:[1,29],15:[1,28]},o($Va,$Vb,{87:30,31:$Vc}),{2:[1,33],15:[1,32]},{2:[1,35],63:[1,34]},{2:[1,37],81:36,82:$V6,83:$V7,84:$V8},o($Vd,[2,149]),o($Vd,[2,144]),o($Vd,[2,145]),o($Vd,[2,146]),{1:[2,76]},{56:[2,79]},{2:$V0,15:$V1,17:5,18:$V2,55:38,56:$V3,57:3,58:$V4,59:4,61:6,62:$V5,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9},{2:$V0,15:$V1,17:5,18:$V2,55:39,56:$V3,57:3,58:$V4,59:4,61:6,62:$V5,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9},{2:$V0,15:$V1,17:5,18:$V2,55:40,56:$V3,57:3,58:$V4,59:4,61:6,62:$V5,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9},{2:$V0,15:$V1,17:5,18:$V2,55:41,56:$V3,57:3,58:$V4,59:4,61:6,62:$V5,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9},{56:[2,84]},{56:[2,85]},o($Ve,[2,77]),o($Ve,[2,78]),o($Va,$Vb,{87:42,31:$Vc}),o($Vf,[2,165]),o($Vf,$Vg,{89:43,90:$Vh,91:$Vi,92:$Vj}),{2:[1,48],4:47,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($Vf,$Vv,{16:63,14:64,6:$Vw,10:[1,65]}),o($Vf,[2,19]),{2:[1,68],10:[1,67]},o($Ve,[2,88]),o($Vd,[2,147]),o($Vd,[2,148]),{56:[2,80]},{56:[2,81]},{56:[2,82]},{56:[2,83]},o($Vf,$Vg,{89:69,90:$Vh,91:$Vi,92:$Vj}),o($Vf,[2,166]),{2:[1,72],4:70,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,21:71,22:$Vx,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($Vf,[2,161]),o($Vf,[2,162]),{2:[1,75],32:[1,74],37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI},o($Va,[2,151]),{4:87,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{4:88,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($VJ,[2,66]),o($VJ,[2,67]),o($VJ,[2,68]),o($VJ,$VK),o($VJ,[2,70],{30:89,31:[1,90]}),o($VJ,[2,71]),{15:[1,91]},o($VJ,[2,73]),o($VJ,[2,74]),{4:92,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{2:[1,94],10:[1,93]},{2:[1,96],10:[1,95]},o($Vf,[2,18]),o($Vf,$Vd),o($VL,$VM,{34:56,8:58,12:59,3:97,4:98,9:$Vk,10:$Vl,13:$Vm,15:$Vn,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu}),{2:[1,100],15:[1,99]},{2:[1,102],11:[1,101]},o($Ve,[2,89]),o($Vf,[2,164]),o($Vf,[2,158],{37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI}),o($Vf,[2,159]),o($Vf,[2,160]),{2:[1,104],10:[1,103]},o($Va,$VN,{88:105,31:$VO}),o($Va,[2,152]),{4:107,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{4:108,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{4:109,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{4:110,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{4:111,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{4:112,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{4:113,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{4:114,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{4:115,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{4:116,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{4:117,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($VP,[2,55],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI}),o($VJ,[2,65]),o($VJ,[2,48]),{2:[1,119],4:118,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($VJ,[2,50],{35:120,31:[1,121]}),{11:[1,122],37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI},o($VL,$VM,{34:56,8:58,12:59,4:98,3:123,9:$Vk,10:$Vl,13:$Vm,15:$Vn,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu}),o($VJ,[2,7]),o($VL,$VM,{34:56,8:58,12:59,4:98,3:124,9:$Vk,10:$Vl,13:$Vm,15:$Vn,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu}),o($VJ,[2,10]),{2:[1,126],11:[1,125]},o($VL,$VQ,{5:127,6:$VR,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI}),o($Vf,$Vv,{14:129,6:$Vw}),o($Vf,$Vv,{14:130,6:$Vw}),{2:[1,132],64:[1,131]},o($Ve,[2,90]),{2:[1,134],11:[1,133]},o($Vf,[2,24]),o($Va,[2,150]),{2:[1,136],4:135,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o([2,6,11,32,37,38,60,106],[2,53],{40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI}),o([2,6,11,32,38,60,106],[2,54],{37:$Vy,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI}),o($VP,[2,56],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI}),o($VP,[2,57],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI}),o($VP,[2,58],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI}),o($VP,[2,59],{44:$VE,45:$VF,46:$VG,47:$VH,48:$VI}),o($VS,$VT,{46:$VG,47:$VH,48:$VI}),o($VS,[2,61],{46:$VG,47:$VH,48:$VI}),o($VJ,[2,62]),o($VJ,[2,63]),o($VJ,[2,64]),{2:[1,138],32:[1,137],37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI},o($VJ,[2,42]),o($VJ,[2,72]),{4:139,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($VJ,[2,75]),{2:[1,141],11:[1,140]},{2:[1,143],11:[1,142]},o($Vf,[2,16]),o($Vf,[2,17]),o($VL,[2,1]),{2:[1,145],4:144,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($Vf,[2,12]),o($Vf,[2,13]),{2:[1,147],8:155,9:$Vk,12:156,13:$Vm,15:$V1,17:157,18:$V2,19:153,20:$VU,21:154,22:$Vx,24:151,25:$VV,28:152,29:$VW,59:150,65:146,67:148,69:$VX,70:158,71:159,72:160,73:161,74:162,75:$VY,76:$VZ,80:$V_,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9,93:$V$,94:$V01,95:$V11,96:$V21,98:$V31},o($Ve,[2,91]),o($Vf,[2,23]),o($Vf,[2,25]),{2:[1,175],32:[1,174],37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI},o($Va,$VN,{88:176,31:$VO}),o($VJ,$V41,{33:177,31:$V51}),o($VJ,[2,43]),{32:[1,179],37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI},o($VJ,[2,6]),o($VJ,[2,8]),o($VJ,[2,9]),o($VJ,$VL),o($VL,$VQ,{5:180,6:$VR,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI}),{7:[1,181]},o($Ve,[2,87]),o($Ve,[2,92]),{8:155,9:$Vk,12:156,13:$Vm,15:$V1,17:157,18:$V2,19:153,20:$VU,21:154,22:$Vx,24:151,25:$VV,28:152,29:$VW,59:150,65:182,67:148,69:$VX,70:158,71:159,72:160,73:161,74:162,75:$VY,76:$VZ,80:$V_,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9,93:$V$,94:$V01,95:$V11,96:$V21,98:$V31},o($V61,[2,98]),{2:[1,184],60:[1,183]},{2:[1,186],60:[1,185]},{2:[1,188],60:[1,187]},{2:[1,190],60:[1,189]},{2:[1,192],60:[1,191]},{2:[1,194],60:[1,193]},{2:[1,196],60:[1,195]},{2:[1,198],60:[1,197]},o($V71,[2,115]),o($V71,[2,116]),o($V71,[2,117]),{2:[1,200],60:[1,199]},o($V71,[2,120]),{2:[1,202],60:[1,201]},{2:[1,204],60:[1,203]},{2:[1,206],10:[1,205]},{2:[1,208],10:[1,207]},{2:[1,210],10:[1,209]},{2:[1,212],10:[1,211]},{2:[1,214],8:155,9:$Vk,12:156,13:$Vm,15:$V1,17:157,18:$V2,19:153,20:$VU,21:154,22:$Vx,24:151,25:$VV,28:152,29:$VW,59:150,64:$V81,67:216,68:213,70:158,71:159,72:160,73:161,74:162,75:$VY,76:$VZ,80:$V_,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9,93:$V$,94:$V01,95:$V11,96:$V21,98:$V31},{2:[1,218],10:[1,217]},{2:[1,220],10:[1,219]},{2:[1,222],64:[1,221]},{2:[1,224],10:[1,223]},o($Va,$VN,{88:225,31:$VO}),o($Va,$VN,{88:226,31:$VO}),o($Va,[2,155]),o($VJ,[2,41]),{2:[1,228],4:227,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($VJ,$V91,{36:229,31:$Va1}),o($VL,[2,3]),o($VL,[2,4]),o($V61,[2,97]),o($V71,[2,99]),o($V71,[2,100]),o($V71,[2,101]),o($V71,[2,102]),o($V71,[2,103]),o($V71,[2,104]),o($V71,[2,105]),o($V71,[2,106]),o($V71,[2,107]),o($V71,[2,108]),o($V71,[2,109]),o($V71,[2,110]),o($V71,[2,111]),o($V71,[2,112]),o($V71,[2,113]),o($V71,[2,114]),o($V71,[2,118]),o($V71,[2,119]),o($V71,[2,121]),o($V71,[2,122]),o($V71,[2,123]),o($V71,[2,124]),{2:[1,232],4:233,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,23:231,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($Vf,[2,30]),{2:[1,235],4:236,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,26:234,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($Vf,[2,38]),{2:[1,238],11:[1,237]},o($Vf,[2,21]),{2:[1,240],4:239,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($V71,[2,168]),o($V71,[2,172]),o($V71,[2,173]),{8:155,9:$Vk,12:156,13:$Vm,15:$V1,17:157,18:$V2,19:153,20:$VU,21:154,22:$Vx,24:151,25:$VV,28:152,29:$VW,59:150,65:241,67:148,69:$VX,70:158,71:159,72:160,73:161,74:162,75:$VY,76:$VZ,80:$V_,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9,93:$V$,94:$V01,95:$V11,96:$V21,98:$V31},o($V71,[2,96]),{2:[1,243],15:$V1,59:244,78:242,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9},o($V71,[2,138]),{2:[1,246],4:245,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($V71,[2,175]),o($VK,$Vb1,{85:9,81:14,59:150,24:151,28:152,19:153,21:154,8:155,12:156,17:157,70:158,71:159,72:160,73:161,74:162,66:247,67:248,9:$Vk,13:$Vm,15:$V1,18:$V2,20:$VU,22:$Vx,25:$VV,29:$VW,75:$VY,76:$VZ,80:$V_,82:$V6,83:$V7,84:$V8,86:$V9,93:$V$,94:$V01,95:$V11,96:$V21,98:$V31}),o($VT,[2,180]),{2:[1,250],15:[1,249]},o($V71,[2,188]),o($Va,[2,154]),o($Va,[2,156]),{2:[1,252],32:[1,251],37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI},o($VJ,$V41,{33:253,31:$V51}),o($VJ,[2,49]),{4:254,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{2:[1,256],11:[1,255]},o($Vf,[2,31]),{2:[1,258],6:[1,257],37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI},{2:[1,260],11:[1,259]},o($Vf,[2,39]),o($VL,$Vc1,{27:261,6:$Vd1,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI}),o($Vf,[2,20]),o($Vf,[2,22]),{2:[1,264],11:[1,263],37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI},o($V71,[2,169]),o($V71,[2,95]),{2:[1,266],4:267,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu,79:265},o($V71,[2,139]),{2:[1,269],60:[1,268]},{2:[1,271],11:[1,270],37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI},o($V71,[2,176]),{2:[1,273],69:[1,272]},o($VK,$Vb1,{85:9,81:14,59:150,24:151,28:152,19:153,21:154,8:155,12:156,17:157,70:158,71:159,72:160,73:161,74:162,67:248,66:274,9:$Vk,13:$Vm,15:$V1,18:$V2,20:$VU,22:$Vx,25:$VV,29:$VW,75:$VY,76:$VZ,80:$V_,82:$V6,83:$V7,84:$V8,86:$V9,93:$V$,94:$V01,95:$V11,96:$V21,98:$V31}),{2:[1,276],11:[1,275]},o($V71,[2,189]),o($VJ,$V41,{33:277,31:$V51}),o($VJ,$V41,{33:278,31:$V51}),o($VJ,[2,45]),{32:[1,279],37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI},o($Vf,[2,29]),o($Vf,[2,32]),{2:[1,281],4:280,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($VL,[2,27]),o($Vf,[2,37]),o($Vf,[2,40]),o($VL,[2,33]),{2:[1,283],4:282,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{2:[1,285],8:155,9:$Vk,12:156,13:$Vm,15:$V1,17:157,18:$V2,19:153,20:$VU,21:154,22:$Vx,24:151,25:$VV,28:152,29:$VW,59:150,64:$V81,67:216,68:284,70:158,71:159,72:160,73:161,74:162,75:$VY,76:$VZ,80:$V_,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9,93:$V$,94:$V01,95:$V11,96:$V21,98:$V31},o($V71,[2,170]),{2:[1,287],8:289,9:$Vk,12:290,13:$Vm,15:$V1,17:291,18:$V2,19:294,20:$VU,21:295,22:$Vx,24:293,25:$VV,28:292,29:$VW,59:288,77:286,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9},o($V71,[2,140]),{2:[1,297],37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,60:[1,296]},o($Ve1,[2,133]),o($Ve1,[2,134]),{2:[1,299],8:155,9:$Vk,12:156,13:$Vm,15:$V1,17:157,18:$V2,19:153,20:$VU,21:154,22:$Vx,24:151,25:$VV,28:152,29:$VW,59:150,64:$V81,67:216,68:298,70:158,71:159,72:160,73:161,74:162,75:$VY,76:$VZ,80:$V_,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9,93:$V$,94:$V01,95:$V11,96:$V21,98:$V31},o($V71,[2,177]),{2:[1,301],95:[1,302],97:300},o($VT,[2,181]),o($VK,[2,93]),{2:[1,304],64:[1,303]},o($V71,[2,190]),o($VJ,[2,44]),o($VJ,[2,46]),o($VJ,$V91,{36:305,31:$Va1}),o($VL,[2,26],{37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI}),o($VL,[2,28]),o($VL,$Vc1,{27:306,6:$Vd1,37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI}),o($VL,$Vc1,{27:307,6:$Vd1}),o($V71,[2,167]),o($V71,[2,171]),{2:[1,309],11:[1,308]},o($V71,[2,141]),o($VL,[2,125]),o($VL,[2,126]),o($VL,[2,127]),o($VL,[2,128]),o($VL,[2,129]),o($VL,[2,130]),o($VL,[2,131]),o($VL,[2,132]),o($Vf1,[2,135]),o($Vf1,[2,136]),o($V71,[2,174]),o($V71,[2,178]),o($VT,[2,179]),o($VT,[2,182]),{2:[1,311],10:[1,310]},o($VK,$Vg1,{99:312,100:313,101:314,105:$Vh1,107:$Vi1}),o($V71,[2,191]),o($VJ,[2,51]),o($VL,[2,34]),o($VL,[2,35]),{2:[1,318],8:155,9:$Vk,12:156,13:$Vm,15:$V1,17:157,18:$V2,19:153,20:$VU,21:154,22:$Vx,24:151,25:$VV,28:152,29:$VW,59:150,64:$V81,67:216,68:317,70:158,71:159,72:160,73:161,74:162,75:$VY,76:$VZ,80:$V_,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9,93:$V$,94:$V01,95:$V11,96:$V21,98:$V31},o($V71,[2,142]),{2:[1,320],4:319,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},o($VT,[2,184]),{2:[1,322],69:[1,321]},o($VK,$Vg1,{100:313,101:314,99:323,105:$Vh1,107:$Vi1}),o($VK,[2,194]),{2:[1,325],4:324,8:58,9:$Vk,10:$Vl,12:59,13:$Vm,15:$Vn,34:56,39:$Vo,45:$Vp,49:$Vq,50:$Vr,51:$Vs,52:$Vt,53:$Vu},{2:[1,327],106:[1,326]},o($V71,[2,137]),o($V71,[2,143]),{2:[1,329],11:[1,328],37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI},o($VT,[2,185]),o($V71,[2,187]),o($V71,[2,192]),o($VK,[2,193]),{2:[1,331],37:$Vy,38:$Vz,40:$VA,41:$VB,42:$VC,43:$VD,44:$VE,45:$VF,46:$VG,47:$VH,48:$VI,106:[1,330]},o($Vj1,[2,226]),o($VK,$Vk1,{85:9,81:14,104:332,102:333,59:334,24:335,28:336,19:337,21:338,8:339,12:340,17:341,70:342,71:343,72:344,73:345,74:346,9:$Vk,13:$Vm,15:$V1,18:$V2,20:$VU,22:$Vx,25:$VV,29:$VW,75:$Vl1,80:$V_,82:$V6,83:$V7,84:$V8,86:$V9,93:$V$,94:$V01,95:$V11,96:$V21,98:$V31}),o($VK,[2,230]),o($VT,[2,183]),o($VT,[2,186]),{2:[1,349],8:339,9:$Vk,12:340,13:$Vm,15:$V1,17:341,18:$V2,19:337,20:$VU,21:338,22:$Vx,24:335,25:$VV,28:336,29:$VW,59:334,70:342,71:343,72:344,73:345,74:346,75:$Vl1,76:$Vm1,80:$V_,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9,93:$V$,94:$V01,95:$V11,96:$V21,98:$V31,102:350,103:348},o($Vj1,[2,227]),o($VK,[2,229]),o($VK,$Vk1,{85:9,81:14,102:333,59:334,24:335,28:336,19:337,21:338,8:339,12:340,17:341,70:342,71:343,72:344,73:345,74:346,104:352,9:$Vk,13:$Vm,15:$V1,18:$V2,20:$VU,22:$Vx,25:$VV,29:$VW,75:$Vl1,80:$V_,82:$V6,83:$V7,84:$V8,86:$V9,93:$V$,94:$V01,95:$V11,96:$V21,98:$V31}),{2:[1,354],60:[1,353]},{2:[1,356],60:[1,355]},{2:[1,358],60:[1,357]},{2:[1,360],60:[1,359]},{2:[1,362],60:[1,361]},{2:[1,364],60:[1,363]},{2:[1,366],60:[1,365]},{2:[1,368],60:[1,367]},o($V71,[2,212]),o($V71,[2,213]),o($V71,[2,214]),{2:[1,370],60:[1,369]},o($V71,[2,217]),{2:[1,372],60:[1,371]},o($Vj1,[2,225]),o($Vj1,[2,228]),{8:339,9:$Vk,12:340,13:$Vm,15:$V1,17:341,18:$V2,19:337,20:$VU,21:338,22:$Vx,24:335,25:$VV,28:336,29:$VW,59:334,70:342,71:343,72:344,73:345,74:346,75:$Vl1,76:$Vm1,80:$V_,81:14,82:$V6,83:$V7,84:$V8,85:9,86:$V9,93:$V$,94:$V01,95:$V11,96:$V21,98:$V31,102:350,103:373},{2:[1,375],60:[1,374]},o($VK,[2,223]),o($V71,[2,196]),o($V71,[2,197]),o($V71,[2,198]),o($V71,[2,199]),o($V71,[2,200]),o($V71,[2,201]),o($V71,[2,202]),o($V71,[2,203]),o($V71,[2,204]),o($V71,[2,205]),o($V71,[2,206]),o($V71,[2,207]),o($V71,[2,208]),o($V71,[2,209]),o($V71,[2,210]),o($V71,[2,211]),o($V71,[2,215]),o($V71,[2,216]),o($V71,[2,218]),o($V71,[2,219]),o($Vj1,[2,220]),o($Vj1,[2,221]),o($Vj1,[2,222])],
defaultActions: {18:[2,76],19:[2,79],24:[2,84],25:[2,85],38:[2,80],39:[2,81],40:[2,82],41:[2,83]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//import
	var ErrorLexico = require ('../../../error/LexicalError');
    var ErrorSintactico = require('../../../error/SyntaxError');
	//variables
	var erroresLexicos = [];
	var erroresSintacticos = [];
	var lineNumber=0;
	var columnNumber=0;

	module.exports.setErroresLexicos = function(errores){
		erroresLexicos = errores;
	}

	module.exports.setErroresSintacticos = function(errores){
		erroresSintacticos = errores;
	}

	module.exports.setLineNumber = function(line){
		lineNumber = line;
	}

	module.exports.setColumnNumber = function(column){
		columnNumber = column
	}

	function addLexicalError(lexema, linea, column){   
        try{
            var errorLexico = new ErrorLexico(lexema, linea, column);
            erroresLexicos.push(errorLexico);
        }catch(ex){
            console.log(ex);
        }                  
    }

    function addSyntaxError(descripcion, token, line, column){
		try{
			var errorSintactico = new ErrorSintactico(descripcion, token, line, column);
			erroresSintacticos.push(errorSintactico);
		}catch(ex){
			console.log(ex);
		}
	}

	const TIPO_VISIBILIDAD = require("../../../api/Instrucciones").TIPO_VISIBILIDAD;
	const TIPO_LENGUAJE = require("../../../api/Instrucciones").TIPO_LENGUAJE;
	const TIPO_DATO = require('../../../api/Instrucciones').TIPO_DATO;
    const TIPO_VALOR = require('../../../api/Instrucciones').TIPO_VALOR;
    const TIPO_OPERACION = require('../../../api/Instrucciones').TIPO_OPERACION;
    const TIPO_INSTRUCCION = require('../../../api/Instrucciones').TIPO_INSTRUCCION;
    const TIPO_SWITCH = require('../../../api/Instrucciones').TIPO_SWITCH;
    const TIPO_PRINT = require('../../../api/Instrucciones').TIPO_PRINT;
    const instruccionesApi = require('../../../api/InstruccionesApi').instruccionesApi;
    const lenguaje = TIPO_LENGUAJE.C;

	function reversaArreglo(arreglo){
		var aux = [];
		for(var index=arreglo.length-1; index>=0; index--){
			aux.push(arreglo[index]);
		}
		return aux;
	}

	function linea(line){
		return line + lineNumber;
	}

	function columna(column){
		return column + columnNumber;
	}


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:return 31;
break;
case 2:return 32;
break;
case 3:return 64;
break;
case 4:return 69;
break;
case 5:return 10;
break;
case 6:return 11;
break;
case 7:console.log("metodo clase: "+yy_.yytext);return 13;
break;
case 8:console.log("metodo: "+yy_.yytext);return 9;
break;
case 9:console.log("clas: "+yy_.yytext);return 18;
break;
case 10:return 93;
break;
case 11:return 94;
break;
case 12:return 98;
break;
case 13:return 95;
break;
case 14:return 58;
break;
case 15:return 80;
break;
case 16:return 96;
break;
case 17:return 82;
break;
case 18:return 84;
break;
case 19:return 83;
break;
case 20:return 86;
break;
case 21:return 105;
break;
case 22:return 76;
break;
case 23:return 107;
break;
case 24:return 75;
break;
case 25:return 25;
break;
case 26:return 29;
break;
case 27:return 20;
break;
case 28:return 22;
break;
case 29:return 62;
break;
case 30:return 63;
break;
case 31:return 49;
break;
case 32:return 50;
break;
case 33:
	yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
	return 51;

break;
case 34:
	yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);
	return 52;

break;
case 35:return 15;
break;
case 36:return 40;
break;
case 37:return 41;
break;
case 38:return 42;
break;
case 39:return 43;
break;
case 40:return 37;
break;
case 41:return 38;
break;
case 42:return 39;
break;
case 43:return 91;
break;
case 44:return 92;
break;
case 45:return 44;
break;
case 46:return 45;
break;
case 47:return 46;
break;
case 48:return 47;
break;
case 49:return 48;
break;
case 50:return 90;
break;
case 51:return 60;
break;
case 52:return 106;
break;
case 53:return 53;
break;
case 54:return 6;
break;
case 55:return 56;
break;
case 56:/*ignore*/;
break;
case 57:/*ignore*/;
break;
case 58: 
	addLexicalError(yy_.yytext, linea(yy_.yylloc.first_line), columna(yy_.yylloc.first_column));
	
break;
}
},
rules: [/^(?:\s+)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:(((JAVA)\.([aA-zZ|"_"|"$"][aA-zZ|0-9|"_"|"$"]*))\.([aA-zZ|"_"|"$"][aA-zZ|0-9|"_"|"$"]*)))/,/^(?:((PY)\.([aA-zZ|"_"|"$"][aA-zZ|0-9|"_"|"$"]*)))/,/^(?:((JAVA)\.([aA-zZ|"_"|"$"][aA-zZ|0-9|"_"|"$"]*)))/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:while\b)/,/^(?:#include\b)/,/^(?:for\b)/,/^(?:do\b)/,/^(?:int\b)/,/^(?:char\b)/,/^(?:float\b)/,/^(?:const\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:continue\b)/,/^(?:scanf\b)/,/^(?:printf\b)/,/^(?:clrscr\b)/,/^(?:getch\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:([0-9]+\b))/,/^(?:([0-9]+(\.[0-9]+)\b))/,/^(?:('[^\']'))/,/^(?:("[^\"]*"))/,/^(?:([aA-zZ|"_"|"$"][aA-zZ|0-9|"_"|"$"]*))/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:&)/,/^(?:,)/,/^(?:$)/,/^(?:(\/\/.*))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:.+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = C;
exports.Parser = C.Parser;
exports.parse = function () { return C.parse.apply(C, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}