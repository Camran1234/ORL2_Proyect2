/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Java = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,3],$V2=[1,4],$V3=[1,22],$V4=[1,26],$V5=[1,27],$V6=[1,21],$V7=[2,5,17],$V8=[2,17,18,39],$V9=[20,21,22,23,24,26],$Va=[1,44],$Vb=[1,45],$Vc=[32,34],$Vd=[9,54],$Ve=[2,65],$Vf=[1,48],$Vg=[2,26],$Vh=[1,53],$Vi=[1,54],$Vj=[1,55],$Vk=[1,56],$Vl=[1,57],$Vm=[1,59],$Vn=[1,60],$Vo=[1,65],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,80],$Vt=[1,64],$Vu=[1,71],$Vv=[1,72],$Vw=[1,73],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[2,10,12,13,17,18,20,21,22,23,24,32,34,39,55,56,98,100,105,116,120,121],$VC=[2,63],$VD=[1,86],$VE=[9,10,54,64],$VF=[1,87],$VG=[1,88],$VH=[9,10,54,64,71,72],$VI=[2,84],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,97],$VO=[1,98],$VP=[9,10,54,64,71,72,75,76,77,78,79,80],$VQ=[2,92],$VR=[1,100],$VS=[1,99],$VT=[1,101],$VU=[1,102],$VV=[1,103],$VW=[1,104],$VX=[9,10,54,64,71,72,75,76,77,78,79,80,84,89,90,91,92,93,108],$VY=[9,10,54,59,60,64,71,72,75,76,77,78,79,80,84,89,90,91,92,93,108],$VZ=[1,124],$V_=[1,134],$V$=[1,135],$V01=[1,113],$V11=[1,122],$V21=[1,123],$V31=[1,133],$V41=[1,128],$V51=[1,129],$V61=[1,130],$V71=[1,131],$V81=[1,137],$V91=[1,138],$Va1=[1,144],$Vb1=[1,145],$Vc1=[1,147],$Vd1=[1,154],$Ve1=[2,12,13,17,18,20,21,22,23,24,32,34,39,55,56,98,100,105,116,120,121],$Vf1=[2,12,13,20,21,22,23,24,32,34,39,55,56,98,100,105,116,120,121],$Vg1=[1,172],$Vh1=[1,173],$Vi1=[1,170],$Vj1=[2,12,13,20,21,22,23,24,32,34,39,55,56,98,105,116,120,121],$Vk1=[2,122],$Vl1=[1,177],$Vm1=[1,183],$Vn1=[9,10,54],$Vo1=[9,10,54,64,71,72,75,76,77,78,79,80,84,89,108],$Vp1=[9,10,54,64,71,72,75,76,77,78,79,80,84,89,90,91,92,108],$Vq1=[1,193],$Vr1=[1,194],$Vs1=[10,54],$Vt1=[15,32,34,73,82,83,84,85,86,87,88],$Vu1=[1,228],$Vv1=[1,229],$Vw1=[2,68],$Vx1=[1,231],$Vy1=[15,32,34,54,73,82,83,84,85,86,87,88],$Vz1=[1,237],$VA1=[1,238],$VB1=[2,12,13,20,21,22,23,24,32,34,36,55,56,98,105,116,120,121],$VC1=[1,256],$VD1=[1,254],$VE1=[1,255],$VF1=[1,286],$VG1=[1,276],$VH1=[1,285],$VI1=[1,289],$VJ1=[39,107,109];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"class_stmt":4,"EOF":5,"concatenate_values":6,"valor":7,"concatenate_values_re":8,"COMA":9,"CLOSE_PARENTHESIS":10,"print":11,"PRINT":12,"PRINTLN":13,"print_stmt":14,"OPEN_PARENTHESIS":15,"identifier":16,"PUBLIC":17,"PRIVATE":18,"data_type":19,"INT":20,"STRING":21,"CHAR":22,"BOOLEAN":23,"FLOAT":24,"data_type_func":25,"VOID":26,"entry_stmt":27,"INTINPUT":28,"FLOATINPUT":29,"CHARINPUT":30,"this_stmt":31,"THIS":32,"DOT":33,"IDENTIFICADOR":34,"CLASS":35,"OPEN_CURLY":36,"class_instructions":37,"class_instruction":38,"CLOSE_CURLY":39,"function_parameters":40,"function_parameters_re":41,"function_stmt":42,"instructions":43,"variable_stmt":44,"nombre_variables":45,"instruction":46,"variable":47,"if_stmt":48,"switch_stmt":49,"for_stmt":50,"while_stmt":51,"do_stmt":52,"metodo":53,"COLON":54,"CONTINUE":55,"BREAK":56,"stmt_enclusure":57,"increm":58,"INCREMENTO":59,"DECREMENTO":60,"valor_variable":61,"condition":62,"igualacion_re":63,"IGUAL":64,"asignacion_variable":65,"asignacion":66,"asignacion_post":67,"nombre_variables_re":68,"parameters":69,"parameters_re":70,"AND":71,"OR":72,"NOT":73,"comparation":74,"MENOR":75,"MENOR_IGUAL":76,"MAYOR":77,"MAYOR_IGUAL":78,"DIFERENTE":79,"IGUAL_IGUAL":80,"accion_increm":81,"ENTERO":82,"DECIMAL":83,"RESTA":84,"CADENA":85,"CARACTER":86,"TRUE":87,"FALSE":88,"SUMA":89,"POR":90,"DIV":91,"MOD":92,"POW":93,"block_condition":94,"block_if":95,"block_elseif":96,"block_else":97,"IF":98,"elseif_stmt":99,"ELSE":100,"else_stmt":101,"switch_instructions":102,"switch_instruction":103,"default_instructions":104,"SWITCH":105,"cases_stmt":106,"CASE":107,"SEMI_COLON":108,"DEFAULT":109,"declaraciones_re":110,"declaraciones":111,"declaraciones_post":112,"declaracion_for":113,"for_accion":114,"declaracion_post":115,"FOR":116,"for_inicio":117,"for_condition":118,"for_asignacion":119,"WHILE":120,"DO":121,"while_do":122,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"COMA",10:"CLOSE_PARENTHESIS",12:"PRINT",13:"PRINTLN",15:"OPEN_PARENTHESIS",17:"PUBLIC",18:"PRIVATE",20:"INT",21:"STRING",22:"CHAR",23:"BOOLEAN",24:"FLOAT",26:"VOID",28:"INTINPUT",29:"FLOATINPUT",30:"CHARINPUT",32:"THIS",33:"DOT",34:"IDENTIFICADOR",35:"CLASS",36:"OPEN_CURLY",39:"CLOSE_CURLY",54:"COLON",55:"CONTINUE",56:"BREAK",59:"INCREMENTO",60:"DECREMENTO",64:"IGUAL",71:"AND",72:"OR",73:"NOT",75:"MENOR",76:"MENOR_IGUAL",77:"MAYOR",78:"MAYOR_IGUAL",79:"DIFERENTE",80:"IGUAL_IGUAL",82:"ENTERO",83:"DECIMAL",84:"RESTA",85:"CADENA",86:"CARACTER",87:"TRUE",88:"FALSE",89:"SUMA",90:"POR",91:"DIV",92:"MOD",93:"POW",98:"IF",100:"ELSE",105:"SWITCH",107:"CASE",108:"SEMI_COLON",109:"DEFAULT",115:"declaracion_post",116:"FOR",120:"WHILE",121:"DO"},
productions_: [0,[3,2],[3,1],[6,2],[8,3],[8,1],[11,1],[11,1],[14,3],[16,1],[16,1],[19,1],[19,1],[19,1],[19,1],[19,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[27,1],[27,1],[27,1],[31,3],[31,1],[4,5],[4,5],[4,5],[4,5],[4,5],[37,2],[37,1],[37,1],[40,3],[40,1],[41,4],[41,1],[42,7],[44,3],[38,1],[38,1],[43,2],[43,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,2],[46,2],[46,2],[46,2],[46,1],[57,2],[57,1],[58,1],[58,1],[61,1],[61,1],[63,3],[63,0],[65,3],[65,0],[66,3],[66,1],[66,0],[67,3],[67,1],[45,3],[68,4],[68,1],[47,2],[47,3],[69,2],[69,1],[70,3],[70,1],[62,3],[62,3],[62,2],[62,3],[62,1],[74,3],[74,3],[74,3],[74,3],[74,3],[74,3],[74,3],[74,1],[81,1],[81,1],[7,1],[7,1],[7,2],[7,2],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[53,3],[94,2],[48,3],[95,4],[99,5],[96,2],[96,1],[101,2],[97,1],[97,0],[102,2],[102,2],[104,2],[104,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,2],[103,2],[103,2],[103,1],[49,6],[106,5],[106,3],[106,1],[110,4],[110,3],[110,2],[110,1],[111,3],[112,1],[112,2],[113,2],[113,1],[114,1],[114,2],[114,2],[50,4],[117,2],[118,3],[119,2],[51,4],[52,3],[122,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{2:$V0,3:1,4:2,5:$V1,17:$V2},{1:[3]},{2:$V0,3:6,4:2,5:$V1,17:$V2},{1:[2,2]},{2:[1,8],35:[1,7]},{35:[1,9]},{1:[2,1]},{2:[1,11],34:[1,10]},{34:[1,12]},{34:[1,13]},{2:[1,15],36:[1,14]},{36:[1,16]},{36:[1,17]},{36:[1,18]},{2:$V3,16:25,17:$V4,18:$V5,37:19,38:20,39:$V6,42:23,44:24},{2:$V3,16:25,17:$V4,18:$V5,37:28,38:20,39:$V6,42:23,44:24},{2:$V3,16:25,17:$V4,18:$V5,37:29,38:20,39:$V6,42:23,44:24},{2:$V3,16:25,17:$V4,18:$V5,37:30,38:20,39:$V6,42:23,44:24},{2:$V3,16:25,17:$V4,18:$V5,37:31,38:20,39:$V6,42:23,44:24},o($V7,[2,27]),{2:$V3,16:25,17:$V4,18:$V5,37:32,38:20,39:$V6,42:23,44:24},o($V7,[2,33]),o($V7,[2,34]),o($V8,[2,41]),o($V8,[2,42]),{19:34,20:[1,35],21:[1,36],22:[1,37],23:[1,38],24:[1,39],25:33,26:[1,40]},o($V9,[2,9]),o($V9,[2,10]),o($V7,[2,31]),o($V7,[2,30]),o($V7,[2,29]),o($V7,[2,28]),o($V7,[2,32]),{34:[1,41]},{31:43,32:$Va,34:$Vb,45:42},o($Vc,[2,16]),o($Vc,[2,17]),o($Vc,[2,18]),o($Vc,[2,19]),o($Vc,[2,20]),{34:[2,21]},{15:[1,46]},o($V8,[2,40]),o($Vd,$Ve,{65:47,64:$Vf}),{33:[1,49]},o([9,54,59,60,64],$Vg),{10:[1,52],19:51,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,40:50},{9:$Vm,54:$Vn,68:58},{7:70,15:$Vo,27:63,28:$Vp,29:$Vq,30:$Vr,31:74,32:$Va,34:$Vs,53:79,61:61,62:62,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{34:[1,81]},{36:[1,82]},{34:[1,83]},{36:[2,36]},o($Vc,[2,11]),o($Vc,[2,12]),o($Vc,[2,13]),o($Vc,[2,14]),o($Vc,[2,15]),o($VB,[2,71]),{31:84,32:$Va,34:$Vb},o($VB,[2,73]),o($Vd,$VC,{63:85,64:$VD}),o($VE,[2,60],{71:$VF,72:$VG}),o($VE,[2,61]),{7:70,15:$Vo,31:74,32:$Va,34:$Vs,53:79,62:89,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:92,15:$Vo,31:74,32:$Va,34:$Vs,53:79,62:90,73:$Vt,74:91,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},o($VH,$VI,{75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO}),o($VE,[2,22]),o($VE,[2,23]),o($VE,[2,24]),o($VP,$VQ,{84:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW}),o($VX,[2,95]),o($VX,[2,96]),{82:[1,105],83:[1,106]},o($VX,[2,100],{81:107,59:[1,108],60:[1,109]}),o($VX,[2,101]),o($VX,[2,102]),o($VX,[2,103]),o($VX,[2,104]),o($VX,[2,105]),o($VY,$Vg,{15:[1,110]}),o($VY,[2,25]),{2:$VZ,11:132,12:$V_,13:$V$,14:121,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,39:$V01,43:111,46:112,47:114,48:115,49:116,50:117,51:118,52:119,53:120,55:$V11,56:$V21,95:127,98:$V31,105:$V41,116:$V51,120:$V61,121:$V71},{9:$V81,10:$V91,41:136},o($Vd,$Ve,{65:139,64:$Vf}),o($Vd,[2,64]),{7:70,15:$Vo,27:63,28:$Vp,29:$Vq,30:$Vr,31:74,32:$Va,34:$Vs,53:79,61:140,62:62,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:70,15:$Vo,31:74,32:$Va,34:$Vs,53:79,62:141,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:70,15:$Vo,31:74,32:$Va,34:$Vs,53:79,62:142,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},o($VH,[2,82]),{10:[1,143],71:$VF,72:$VG},o([71,72],$VI,{10:$Va1,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO}),o([71,72,75,76,77,78,79,80],$VQ,{10:$Vb1,84:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW}),{7:70,15:$Vc1,31:74,32:$Va,34:$Vs,53:79,74:146,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:70,15:$Vc1,31:74,32:$Va,34:$Vs,53:79,74:148,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:70,15:$Vc1,31:74,32:$Va,34:$Vs,53:79,74:149,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:70,15:$Vc1,31:74,32:$Va,34:$Vs,53:79,74:150,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:70,15:$Vc1,31:74,32:$Va,34:$Vs,53:79,74:151,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:70,15:$Vc1,31:74,32:$Va,34:$Vs,53:79,74:152,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:153,15:$Vd1,31:74,32:$Va,34:$Vs,53:79,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:155,15:$Vd1,31:74,32:$Va,34:$Vs,53:79,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:156,15:$Vd1,31:74,32:$Va,34:$Vs,53:79,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:157,15:$Vd1,31:74,32:$Va,34:$Vs,53:79,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:158,15:$Vd1,31:74,32:$Va,34:$Vs,53:79,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:159,15:$Vd1,31:74,32:$Va,34:$Vs,53:79,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},o($VX,[2,97]),o($VX,[2,98]),o($VX,[2,99]),o($VX,[2,93]),o($VX,[2,94]),{7:70,10:[1,162],15:$Vo,31:74,32:$Va,34:$Vs,53:79,62:161,69:160,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},o($V8,[2,39]),{2:$VZ,11:132,12:$V_,13:$V$,14:121,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,39:$V01,43:163,46:112,47:114,48:115,49:116,50:117,51:118,52:119,53:120,55:$V11,56:$V21,95:127,98:$V31,105:$V41,116:$V51,120:$V61,121:$V71},o($Ve1,[2,44]),o($Vf1,[2,45]),o($Vf1,[2,46]),o($Vf1,[2,47]),o($Vf1,[2,48]),o($Vf1,[2,49]),o($Vf1,[2,50]),{54:[1,164]},{54:[1,165]},{54:[1,166]},{54:[1,167]},o($Vf1,[2,55]),{31:43,32:$Va,34:$Vb,45:168},{58:171,59:$Vg1,60:$Vh1,64:$Vi1,67:169},o($Vj1,$Vk1,{96:174,99:175,97:176,101:178,100:$Vl1}),{15:[1,179]},{15:[1,180]},{15:[1,181]},{2:$VZ,11:132,12:$V_,13:$V$,14:121,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,36:$Vm1,46:184,47:114,48:115,49:116,50:117,51:118,52:119,53:120,55:$V11,56:$V21,57:182,95:127,98:$V31,105:$V41,116:$V51,120:$V61,121:$V71},{15:[1,185]},{15:[1,186]},{15:[2,6]},{15:[2,7]},{36:[2,35]},{19:187,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl},{36:[2,38]},{9:$Vm,54:$Vn,68:188},o($Vn1,$VC,{63:189,64:$VD}),o($VH,[2,80]),o([9,10,54,64,72],[2,81],{71:$VF}),o($VH,[2,83]),o($VP,[2,91]),o($VX,[2,112]),o($VP,[2,85]),{7:92,15:$Vc1,31:74,32:$Va,34:$Vs,53:79,74:190,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},o($VP,[2,86]),o($VP,[2,87]),o($VP,[2,88]),o($VP,[2,89]),o($VP,[2,90]),o($Vo1,[2,106],{90:$VT,91:$VU,92:$VV,93:$VW}),{7:191,15:$Vd1,31:74,32:$Va,34:$Vs,53:79,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},o($Vo1,[2,107],{90:$VT,91:$VU,92:$VV,93:$VW}),o($Vp1,[2,108],{93:$VW}),o($Vp1,[2,109],{93:$VW}),o($Vp1,[2,110],{93:$VW}),o($VX,[2,111]),o($VX,[2,113]),{9:$Vq1,10:$Vr1,70:192,71:$VF,72:$VG},o($VX,[2,77]),o($Ve1,[2,43]),o($Vf1,[2,51]),o($Vf1,[2,52]),o($Vf1,[2,53]),o($Vf1,[2,54]),o($Vf1,[2,74]),{54:[1,195]},{7:70,15:$Vo,27:63,28:$Vp,29:$Vq,30:$Vr,31:74,32:$Va,34:$Vs,53:79,61:196,62:62,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},o($Vs1,[2,70]),o($Vn1,[2,58]),o($Vn1,[2,59]),o($Vj1,$Vk1,{101:178,97:197,100:[1,198]}),o($Vj1,$Vk1,{99:175,97:176,101:178,96:199,100:$Vl1}),o($Vf1,[2,119]),{2:$VZ,11:132,12:$V_,13:$V$,14:121,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,36:$Vm1,46:184,47:114,48:115,49:116,50:117,51:118,52:119,53:120,55:$V11,56:$V21,57:201,95:127,98:[1,200],105:$V41,116:$V51,120:$V61,121:$V71},o($Vf1,[2,121]),{34:[1,202]},{19:205,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:209,32:$Va,34:$Vs,53:208,111:207,112:206,113:204,117:203},{7:70,15:$Vo,31:74,32:$Va,34:$Vs,53:79,62:211,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,94:210},{120:[1,213],122:212},{2:$VZ,11:132,12:$V_,13:$V$,14:121,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,39:$V01,43:214,46:112,47:114,48:115,49:116,50:117,51:118,52:119,53:120,55:$V11,56:$V21,95:127,98:$V31,105:$V41,116:$V51,120:$V61,121:$V71},o($Vf1,[2,57]),{6:215,7:216,15:$Vd1,31:74,32:$Va,34:$Vs,53:79,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{7:70,15:$Vo,31:74,32:$Va,34:$Vs,53:79,62:211,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,94:217},{34:[1,218]},o($VB,[2,72]),o($Vn1,[2,62]),{10:$Va1,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO},{10:$Vb1,84:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW},o($VX,[2,76]),{7:70,15:$Vo,31:74,32:$Va,34:$Vs,53:79,62:219,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},o($VX,[2,79]),o($Vf1,[2,75]),o($Vs1,$VC,{63:220,64:$VD}),o($Vf1,[2,115]),{2:$VZ,11:132,12:$V_,13:$V$,14:121,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,36:$Vm1,46:184,47:114,48:115,49:116,50:117,51:118,52:119,53:120,55:$V11,56:$V21,57:201,95:127,98:$V31,105:$V41,116:$V51,120:$V61,121:$V71},o($Vf1,[2,118]),{15:[1,221]},o($Vf1,[2,120]),{10:[1,222]},{2:$VZ,11:132,12:$V_,13:$V$,14:121,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,36:$Vm1,46:184,47:114,48:115,49:116,50:117,51:118,52:119,53:120,55:$V11,56:$V21,57:223,95:127,98:$V31,105:$V41,116:$V51,120:$V61,121:$V71},{7:70,15:$Vo,31:74,32:$Va,34:$Vs,53:79,62:225,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,118:224},{31:209,32:$Va,34:$Vb,111:226},o($Vt1,[2,149]),o($Vt1,[2,146]),{9:$Vu1,54:$Vv1,110:227},o($Vd,$Vw1,{66:230,58:232,59:$Vg1,60:$Vh1,64:$Vx1}),{2:$VZ,11:132,12:$V_,13:$V$,14:121,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,36:$Vm1,46:184,47:114,48:115,49:116,50:117,51:118,52:119,53:120,55:$V11,56:$V21,57:233,95:127,98:$V31,105:$V41,116:$V51,120:$V61,121:$V71},{10:[1,234],71:$VF,72:$VG},o($Vf1,[2,158]),{15:[1,235]},o($Vf1,[2,56]),o($Vy1,[2,8]),{8:236,9:$Vz1,10:$VA1,84:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW},{2:$VZ,11:132,12:$V_,13:$V$,14:121,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,36:$Vm1,46:184,47:114,48:115,49:116,50:117,51:118,52:119,53:120,55:$V11,56:$V21,57:239,95:127,98:$V31,105:$V41,116:$V51,120:$V61,121:$V71},{9:$V81,10:$V91,41:240},{9:$Vq1,10:$Vr1,70:241,71:$VF,72:$VG},o($Vs1,[2,69]),{7:70,15:$Vo,31:74,32:$Va,34:$Vs,53:79,62:211,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,94:242},{36:[1,243]},o($Vf1,[2,153]),o($VB1,[2,154]),{54:[1,244],71:$VF,72:$VG},o($Vt1,[2,148]),o($Vt1,[2,147]),{11:132,12:$V_,13:$V$,14:247,31:245,32:$Va,34:$Vs,53:246},o($Vt1,[2,144]),{9:$Vu1,54:$Vv1,110:248},{7:70,15:$Vo,27:63,28:$Vp,29:$Vq,30:$Vr,31:74,32:$Va,34:$Vs,53:79,61:249,62:62,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},o($Vd,[2,67]),o($Vf1,[2,157]),o([2,12,13,20,21,22,23,24,32,34,36,54,55,56,98,105,116,120,121],[2,114]),{7:70,15:$Vo,31:74,32:$Va,34:$Vs,53:79,62:211,73:$Vt,74:66,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA,94:250},o($Vy1,[2,3]),{7:251,15:$Vd1,31:74,32:$Va,34:$Vs,53:79,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},o($Vy1,[2,5]),o($Vf1,[2,116]),{36:[2,37]},o($VX,[2,78]),{2:$VZ,11:132,12:$V_,13:$V$,14:121,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,36:$Vm1,46:184,47:114,48:115,49:116,50:117,51:118,52:119,53:120,55:$V11,56:$V21,57:252,95:127,98:$V31,105:$V41,116:$V51,120:$V61,121:$V71},{39:$VC1,106:253,107:$VD1,109:$VE1},{19:260,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,34:[1,261],114:258,115:[1,259],119:257},o($Vd,$Vw1,{58:232,66:262,59:$Vg1,60:$Vh1,64:$Vx1}),{9:$Vu1,54:$Vv1,110:263},o($Vt1,[2,143]),o($Vt1,[2,145]),o($Vd,$VC,{63:264,64:$VD}),{54:[1,265]},{8:266,9:$Vz1,10:$VA1,84:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW},o($Vf1,[2,117]),o($Vf1,[2,137]),{7:267,15:$Vd1,31:74,32:$Va,34:$Vs,53:79,82:$Vu,83:$Vv,84:$Vw,85:$Vx,86:$Vy,87:$Vz,88:$VA},{108:[1,268]},o($Vf1,[2,140]),o($VB1,[2,155]),{10:[1,269]},{10:[2,150]},{31:43,32:$Va,34:$Vb,45:270},{58:171,59:$Vg1,60:$Vh1,64:$Vi1,67:271},{9:$Vu1,54:$Vv1,110:272},o($Vt1,[2,142]),o($Vd,[2,66]),o($Vf1,[2,159]),o($Vy1,[2,4]),{84:$VR,89:$VS,90:$VT,91:$VU,92:$VV,93:$VW,108:[1,273]},{2:$VF1,11:132,12:$V_,13:$V$,14:284,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,39:$VG1,47:277,48:278,49:279,50:280,51:281,52:282,53:283,55:$VH1,95:127,98:$V31,103:275,104:274,105:$V41,116:$V51,120:$V61,121:$V71},o($VB1,[2,156]),{10:[2,151]},{10:[2,152]},o($Vt1,[2,141]),{2:$VF1,11:132,12:$V_,13:$V$,14:284,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,47:277,48:278,49:279,50:280,51:281,52:282,53:283,55:$VH1,56:$VI1,95:127,98:$V31,102:287,103:288,105:$V41,116:$V51,120:$V61,121:$V71},o($Vf1,[2,139]),{2:$VF1,11:132,12:$V_,13:$V$,14:284,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,39:$VG1,47:277,48:278,49:279,50:280,51:281,52:282,53:283,55:$VH1,95:127,98:$V31,103:275,104:290,105:$V41,116:$V51,120:$V61,121:$V71},o($Vf1,[2,126]),o($Vj1,[2,127]),o($Vj1,[2,128]),o($Vj1,[2,129]),o($Vj1,[2,130]),o($Vj1,[2,131]),o($Vj1,[2,132]),{54:[1,291]},{54:[1,292]},{54:[1,293]},o($Vj1,[2,136]),{39:$VC1,106:294,107:$VD1,109:$VE1},{2:$VF1,11:132,12:$V_,13:$V$,14:284,19:125,20:$Vh,21:$Vi,22:$Vj,23:$Vk,24:$Vl,31:126,32:$Va,34:$Vs,47:277,48:278,49:279,50:280,51:281,52:282,53:283,55:$VH1,56:$VI1,95:127,98:$V31,102:295,103:288,105:$V41,116:$V51,120:$V61,121:$V71},{54:[1,296]},o($Vf1,[2,125]),o($Vj1,[2,133]),o($Vj1,[2,134]),o($Vj1,[2,135]),o($Vf1,[2,138]),o($VJ1,[2,123]),o($VJ1,[2,124])],
defaultActions: {3:[2,2],6:[2,1],40:[2,21],52:[2,36],134:[2,6],135:[2,7],136:[2,35],138:[2,38],240:[2,37],259:[2,150],270:[2,151],271:[2,152]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};




/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 'PACKAGE';
break;
case 4:return 78;
break;
case 5:return 76;
break;
case 6:return 79;
break;
case 7:return 80;
break;
case 8:return 71;
break;
case 9:return 72;
break;
case 10:return 73;
break;
case 11:return 'O_MAS';
break;
case 12:return 'O_MENOS';
break;
case 13:return 'O_DIV';
break;
case 14:return 'O_POR';
break;
case 15:return 'O_MOD';
break;
case 16:return 'O_POW';
break;
case 17:return 64;
break;
case 18:return 59;
break;
case 19:return 60;
break;
case 20:return 89;
break;
case 21:return 84;
break;
case 22:return 90;
break;
case 23:return 91;
break;
case 24:return 92;
break;
case 25:return 93;
break;
case 26:return 77;
break;
case 27:return 75;
break;
case 28:return 20;
break;
case 29:return 24;
break;
case 30:return 'DOUBLE';
break;
case 31:return 23;
break;
case 32:return 22;
break;
case 33:return 21;
break;
case 34:return 26;
break;
case 35:return 87;
break;
case 36:return 88;
break;
case 37:return 15;
break;
case 38:return 10;
break;
case 39:return 'OPEN_BRACKET';
break;
case 40:return 'CLOSE_BRACKET';
break;
case 41:return 36;
break;
case 42:return 39;
break;
case 43:return 54;
break;
case 44:return 108;
break;
case 45:return 9;
break;
case 46:return 17;
break;
case 47:return 18;
break;
case 48:return 28;
break;
case 49:return 29;
break;
case 50:return 30;
break;
case 51:return 116;
break;
case 52:return 120;
break;
case 53:return 121;
break;
case 54:return 105;
break;
case 55:return 109;
break;
case 56:return 98;
break;
case 57:return 100;
break;
case 58:return 12;
break;
case 59:return 13;
break;
case 60:return 55;
break;
case 61:return 56;
break;
case 62:return 107;
break;
case 63:return 35;
break;
case 64:return 32;
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 85; 
break;
case 66: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 86; 
break;
case 67:return 83;
break;
case 68:return 82;
break;
case 69:return 34;
break;
case 70:return 33;
break;
case 71:return 5;
break;
case 72: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:package\b)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:==)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\/=)/,/^(?:\*=)/,/^(?:%=)/,/^(?:\^=)/,/^(?:=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:>)/,/^(?:<)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:intinput\b)/,/^(?:floatinput\b)/,/^(?:charinput\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:switch\b)/,/^(?:default\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:class\b)/,/^(?:this\b)/,/^(?:"[^\"]*")/,/^(?:'[^\']')/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:[aA-zZ|"_"|"$"]([aA-zZ]|[0-9]|_|\$)*)/,/^(?:\.)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Java;
exports.Parser = Java.Parser;
exports.parse = function () { return Java.parse.apply(Java, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}