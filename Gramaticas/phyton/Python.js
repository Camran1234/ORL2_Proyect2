/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Python = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,28,31,36,38,40,46,47,52,53,54,55,56,61,63],$V1=[1,2],$V2=[1,39],$V3=[1,40],$V4=[1,41],$V5=[1,42],$V6=[1,43],$V7=[1,44],$V8=[1,45],$V9=[1,58],$Va=[1,57],$Vb=[1,48],$Vc=[1,49],$Vd=[1,51],$Ve=[1,52],$Vf=[1,53],$Vg=[1,54],$Vh=[1,55],$Vi=[1,56],$Vj=[2,34,65,66,67,68,69,70,71],$Vk=[2,5],$Vl=[2,4,5,10,18,23,24,25,26,27,28],$Vm=[1,77],$Vn=[1,78],$Vo=[1,79],$Vp=[1,80],$Vq=[1,81],$Vr=[1,82],$Vs=[1,83],$Vt=[1,84],$Vu=[1,85],$Vv=[1,86],$Vw=[1,87],$Vx=[1,88],$Vy=[1,89],$Vz=[1,90],$VA=[2,6,8,9,11,12,13,14,15,16,17,18,19,20,21,22,34,37,38,49,65,66,67,68,69,70,71],$VB=[2,38,65,66,67,68,69,70,71],$VC=[2,6,17,18,19,20,21,22,34,37,38,49,65,66,67,68,69,70,71],$VD=[2,6,34],$VE=[2,6,11,12,13,14,15,16,17,18,19,20,21,22,34,37,38,49,65,66,67,68,69,70,71],$VF=[2,6],$VG=[2,6,17,18,34,37,38,49,65,66,67,68,69,70,71],$VH=[2,6,17,18,19,20,21,34,37,38,49,65,66,67,68,69,70,71],$VI=[2,37];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"input":3,"INPUT":4,"OPEN_PARENTHESIS":5,"CLOSE_PARENTHESIS":6,"expresion":7,"AND":8,"OR":9,"NOT":10,"MAYOR":11,"MAYOR_IGUAL":12,"MENOR":13,"MENOR_IGUAL":14,"DIFERENTE":15,"COMPARACION":16,"SUMA":17,"RESTA":18,"POR":19,"DIV":20,"MOD":21,"POW":22,"LIT_ENTERO":23,"LIT_DECIMAL":24,"LIT_CADENA":25,"LIT_TRUE":26,"LIT_FALSE":27,"IDENTIFICADOR":28,"ini":29,"statements":30,"EOF":31,"parameters":32,"parameters_re":33,"COMA":34,"function_stmt":35,"DEF":36,"SEMI_COLON":37,"SPACE":38,"statement":39,"INDENTATION":40,"var_stmt":41,"if_stmt":42,"for_stmt":43,"while_stmt":44,"print_stmt":45,"CONTINUE":46,"BREAK":47,"print_parameter":48,"print_stmt_re":49,"print_parameter_re":50,"print_method":51,"PRINT":52,"PRINTLN":53,"IF":54,"ELIF":55,"ELSE":56,"for_parameters":57,"for_parameters_re":58,"rango":59,"RANGE":60,"FOR":61,"IN":62,"WHILE":63,"igualaciones":64,"IGUALACION":65,"O_MAS":66,"O_RESTA":67,"O_POR":68,"O_DIV":69,"O_POW":70,"O_MOD":71,"nombre_variables":72,"nombre_variables_re":73,"asignacion":74,"asignacion_re":75,"$accept":0,"$end":1},
terminals_: {2:"error",4:"INPUT",5:"OPEN_PARENTHESIS",6:"CLOSE_PARENTHESIS",8:"AND",9:"OR",10:"NOT",11:"MAYOR",12:"MAYOR_IGUAL",13:"MENOR",14:"MENOR_IGUAL",15:"DIFERENTE",16:"COMPARACION",17:"SUMA",18:"RESTA",19:"POR",20:"DIV",21:"MOD",22:"POW",23:"LIT_ENTERO",24:"LIT_DECIMAL",25:"LIT_CADENA",26:"LIT_TRUE",27:"LIT_FALSE",28:"IDENTIFICADOR",31:"EOF",34:"COMA",36:"DEF",37:"SEMI_COLON",38:"SPACE",40:"INDENTATION",46:"CONTINUE",47:"BREAK",49:"print_stmt_re",52:"PRINT",53:"PRINTLN",54:"IF",55:"ELIF",56:"ELSE",60:"RANGE",61:"FOR",62:"IN",63:"WHILE",65:"IGUALACION",66:"O_MAS",67:"O_RESTA",68:"O_POR",69:"O_DIV",70:"O_POW",71:"O_MOD"},
productions_: [0,[3,3],[7,3],[7,3],[7,2],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,3],[7,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,3],[29,2],[29,2],[32,2],[32,0],[33,3],[33,2],[33,0],[35,7],[35,2],[35,3],[35,4],[35,6],[35,7],[30,2],[30,2],[30,2],[30,2],[30,2],[30,1],[30,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,2],[39,2],[39,2],[39,2],[48,2],[50,3],[50,2],[50,0],[51,1],[51,1],[45,5],[45,2],[45,3],[45,4],[45,5],[42,4],[42,3],[42,4],[42,2],[42,4],[42,4],[42,4],[42,4],[42,2],[42,3],[42,2],[42,3],[57,2],[58,3],[58,2],[58,0],[59,4],[59,2],[59,3],[43,6],[43,2],[43,3],[43,4],[43,5],[43,6],[44,4],[44,2],[44,3],[44,4],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[72,2],[73,3],[73,0],[74,3],[74,2],[75,3],[75,2],[75,0],[41,3],[41,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{2:[1,3],29:1,30:2,36:[1,4]},{1:[3],2:[1,5]},{2:[1,11],28:[1,27],31:[1,6],35:8,36:[1,19],38:[1,9],39:7,40:[1,10],41:12,42:13,43:14,44:15,45:16,46:[1,17],47:[1,18],51:26,52:[1,28],53:[1,29],54:[1,21],55:[1,22],56:[1,23],61:[1,24],63:[1,25],72:20},o($V0,[2,44]),o($V0,[2,45]),o($V1,[2,27]),o($V1,[2,26]),o($V0,[2,39]),o($V0,[2,40]),o($V0,[2,41]),o($V0,[2,42]),o($V0,[2,43]),o($V0,[2,46]),o($V0,[2,47]),o($V0,[2,48]),o($V0,[2,49]),o($V0,[2,50]),{2:[1,31],38:[1,30]},{2:[1,33],38:[1,32]},{2:[1,35],28:[1,34]},{2:[1,37],64:38,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8,74:36},{2:[1,47],3:50,4:$V9,5:$Va,7:46,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{2:[1,60],3:50,4:$V9,5:$Va,7:59,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{2:[1,62],37:[1,61]},{2:[1,64],28:[1,63]},{2:[1,66],3:50,4:$V9,5:$Va,7:65,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{2:[1,68],5:[1,67]},o($Vj,[2,104],{73:69}),o($Vk,[2,59]),o($Vk,[2,60]),o($V0,[2,51]),o($V0,[2,52]),o($V0,[2,53]),o($V0,[2,54]),{2:[1,71],5:[1,70]},o($V0,[2,34]),{38:[1,72]},o($V0,[2,111]),{2:[1,74],3:50,4:$V9,5:$Va,7:73,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},o($Vl,[2,95]),o($Vl,[2,96]),o($Vl,[2,97]),o($Vl,[2,98]),o($Vl,[2,99]),o($Vl,[2,100]),o($Vl,[2,101]),{2:[1,76],8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,37:[1,75]},o($V0,[2,69]),{3:50,4:$V9,5:$Va,7:91,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:92,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},o($VA,[2,18]),o($VA,[2,19]),o($VA,[2,20]),o($VA,[2,21]),o($VA,[2,22]),o($VA,[2,23]),o($VA,[2,24]),{3:50,4:$V9,5:$Va,7:93,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{5:[1,94]},{2:[1,96],8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,37:[1,95]},o($V0,[2,74],{37:[1,97]}),{2:[1,99],38:[1,98]},o($V0,[2,76]),{2:[1,101],62:[1,100]},o($V0,[2,86]),{2:[1,103],8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,37:[1,102]},o($V0,[2,92]),{2:[1,105],3:50,4:$V9,5:$Va,7:106,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi,48:104},o($V0,[2,62]),o([2,65,66,67,68,69,70,71],[2,102],{34:[1,107]}),{2:[1,109],6:[2,29],28:[1,110],32:108},o($V0,[2,35]),o($V0,[2,110]),o($VB,[2,109],{75:111,8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),{38:[2,106]},{2:[1,113],38:[1,112]},o($V0,[2,67]),{3:50,4:$V9,5:$Va,7:114,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:115,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:116,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:117,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:118,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:119,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:120,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:121,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:122,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:123,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:124,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:125,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:126,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},{3:50,4:$V9,5:$Va,7:127,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},o($VA,[2,4]),o($VC,[2,17],{8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt}),{6:[1,128],8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz},{6:[1,129]},{2:[1,131],38:[1,130]},{38:[1,132]},{38:[1,133]},o($V0,[2,75]),o($V0,[2,77]),{2:[1,135],59:134,60:[1,136]},o($V0,[2,87]),{2:[1,138],38:[1,137]},o($V0,[2,93]),{2:[1,140],6:[1,139]},o($V0,[2,63]),{8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz,49:[1,141]},{28:[1,142]},{6:[1,143]},o($V0,[2,36]),o($VD,[2,32],{33:144}),{2:[1,146],38:[2,105],64:145,65:$V2,66:$V3,67:$V4,68:$V5,69:$V6,70:$V7,71:$V8},o($V0,[2,66]),o($V0,[2,68]),o($VA,[2,2]),o([2,6,9,11,12,13,14,15,16,17,18,19,20,21,22,34,37,38,49,65,66,67,68,69,70,71],[2,3],{8:$Vm}),o($VE,$Vk,{8:$Vm,9:$Vn}),o($VE,$VF,{8:$Vm,9:$Vn}),o($VE,[2,7],{8:$Vm,9:$Vn}),o($VE,[2,8],{8:$Vm,9:$Vn}),o($VE,[2,9],{8:$Vm,9:$Vn}),o($VE,[2,10],{8:$Vm,9:$Vn}),o($VG,[2,11],{8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($VG,[2,12],{8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($VH,[2,13],{8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,22:$Vz}),o($VH,[2,14],{8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,22:$Vz}),o($VH,[2,15],{8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,22:$Vz}),o($VC,[2,16],{8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt}),o($VA,[2,25]),o($VA,[2,1]),o($V0,[2,70]),o($V0,[2,73]),o($V0,[2,72]),o($V0,[2,71]),{2:[1,148],37:[1,147]},o($V0,[2,88]),{2:[1,150],5:[1,149]},o($V0,[2,91]),o($V0,[2,94]),{2:[1,152],38:[1,151]},o($V0,[2,64]),o($VF,[2,55]),o($Vj,[2,103]),{2:[1,154],37:[1,153]},{2:[1,156],6:[2,28],34:[1,155]},{3:50,4:$V9,5:$Va,7:157,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},o($VB,[2,108]),{2:[1,159],38:[1,158]},o($V0,[2,89]),{2:[1,161],3:50,4:$V9,5:$Va,7:162,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi,57:160},o($VI,[2,83]),o($V0,[2,61]),o($V0,[2,65]),{2:[1,164],38:[1,163]},o($V0,$VI),{28:[1,165]},o($VD,[2,31]),o($VB,[2,107],{8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($V0,[2,85]),o($V0,[2,90]),{6:[1,166]},o($VI,[2,84]),o($VD,[2,81],{58:167,8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz}),o($V0,[2,33]),o($V0,[2,38]),o($VD,[2,30]),o($VI,[2,82]),{2:[1,169],6:[2,78],34:[1,168]},{3:50,4:$V9,5:$Va,7:170,10:$Vb,18:$Vc,23:$Vd,24:$Ve,25:$Vf,26:$Vg,27:$Vh,28:$Vi},o($VD,[2,80]),o($VD,[2,79],{8:$Vm,9:$Vn,11:$Vo,12:$Vp,13:$Vq,14:$Vr,15:$Vs,16:$Vt,17:$Vu,18:$Vv,19:$Vw,20:$Vx,21:$Vy,22:$Vz})],
defaultActions: {74:[2,106]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    let indentation=0;
    let estado=0;
    let lineNumber=0;
    let columnNumber=0;

    function setLineNumber(line){
        this.lineNumber=line;
    }

    function setColumnNumber(column){
        this.columnNumber=column;
    }

    



/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
        indentation=0;
            if(estado==0){
                /*ignore*/
            }else if(estado==1){
                estado=0;
            }else if(estado==2){
                estado=0;
            }
        return 38;
        
break;
case 1:
            if(estado==1){
                /*ignore*/
            }else if(estado==2){
                /*ignore*/
            }else{
                yy_.yytext = 4;
                console.log('TAB');
                return 40;
            }            
        
break;
case 2:
            if(estado==1){
                /*ignore*/
            }else if(estado==2){
                /*ignore*/
            }else{
                yy_.yytext=1;
                console.log("blank");
                return 40;
            }
        
break;
case 3:/*ignore*/;
break;
case 4:/*ignore*/;
break;
case 5:
                        if(estado==1){
                            /*ignore*/
                        }else if(estado==2){
                            yy_.yytext = yy_.yytext.substr(3,yy_.yyleng-6);
                            estado=2;
                        console.log(yy_.yytext);
                            return'LIT_CADENA';
                        }else{
                            indentation=0;
                            estado=1;
                        }
                    
break;
case 6:
                estado=2;
            console.log(yy_.yytext); return'DEF';

        
break;
case 7:
             estado=2;
console.log(yy_.yytext); return'PRINT';
            
break;
case 8:
                estado=2;
console.log(yy_.yytext); return'PRINTLN';
            
break;
case 9:
                estado=2;
console.log(yy_.yytext); return'IF';
                
break;
case 10:
                estado=2;
console.log(yy_.yytext); return'ELSE';
            
break;
case 11:
                estado=2;
console.log(yy_.yytext); return'ELIF';
            
break;
case 12:
                estado=2;
console.log(yy_.yytext); return'INPUT';
            
break;
case 13:
                estado=2;
console.log(yy_.yytext); return'RETURN';
                  
break;
case 14:
                estado=2;
console.log(yy_.yytext); return'WHILE';
            
break;
case 15:
                estado=2;
console.log(yy_.yytext); return'BREAK';
            
break;
case 16:

                estado=2;
console.log(yy_.yytext); return'CONTINUE';
            
break;
case 17:
                estado=2;
console.log(yy_.yytext); return'FOR';
            
break;
case 18:
                estado=2;
console.log(yy_.yytext); return'IN';
            
break;
case 19:
                estado=2;
console.log(yy_.yytext); return'RANGE';
            
break;
case 20:
                estado=2;
console.log(yy_.yytext); return'AND';
            
break;
case 21:
                estado=2;
console.log(yy_.yytext); return'OR';
            
break;
case 22:
                estado=2;
console.log(yy_.yytext); return'NOT';
            
break;
case 23:
                estado=2;
console.log(yy_.yytext); return'OPEN_PARENTHESIS';
            
break;
case 24:
                estado=2;
console.log(yy_.yytext); return'CLOSE_PARENTHESIS';
            
break;
case 25:
                estado=2;
console.log(yy_.yytext); return'OPEN_BRACKET';
            
break;
case 26:
                estado=2;
console.log(yy_.yytext); return'CLOSE_BRACKET';
            
break;
case 27:
                estado=2;
console.log(yy_.yytext); return'OPEN_CURLY';
            
break;
case 28:
                estado=2;
console.log(yy_.yytext); return'CLOSE_CURLY';
            
break;
case 29:
                estado=2;
console.log(yy_.yytext); return'COMA';
            
break;
case 30:
                estado=2;
console.log(yy_.yytext); return'MAYOR_IGUAL';
            
break;
case 31:
                estado=2;
console.log(yy_.yytext); return'MAYOR';
            
break;
case 32:
                estado=2;
console.log(yy_.yytext); return'MENOR';
            
break;
case 33:
                estado=2;
console.log(yy_.yytext); return'MENOR_IGUAL';
            
break;
case 34:
                estado=2;
console.log(yy_.yytext); return'DIFERENTE';
            
break;
case 35:
                estado=2;
console.log(yy_.yytext); return'COMPARACION';
            
break;
case 36:
                estado=2;
console.log(yy_.yytext); return'O_SUMA';
            
break;
case 37:
                estado=2;
console.log(yy_.yytext); return'O_RESTA';
            
break;
case 38:
                estado=2;
console.log(yy_.yytext); return'O_DIV';
            
break;
case 39:
                estado=2;
console.log(yy_.yytext); return'O_POR';
            
break;
case 40:
                estado=2;
console.log(yy_.yytext); return'O_MOD';
            
break;
case 41:
                estado=2;
console.log(yy_.yytext); return'O_POW';
            
break;
case 42:
                estado=2;
console.log(yy_.yytext); return'IGUAL';
            
break;
case 43:
                estado=2;
console.log(yy_.yytext); return'SEMI_COLON';
            
break;
case 44:
                estado=2;
console.log(yy_.yytext); return'SUMA';
            
break;
case 45:
                estado=2;
console.log(yy_.yytext); return'RESTA';
            
break;
case 46:
                estado=2;
console.log(yy_.yytext); return'DIV';
            
break;
case 47:
                estado=2;
console.log(yy_.yytext); return'POR';
            
break;
case 48:
                estado=2;
console.log(yy_.yytext); return'MOD';
            
break;
case 49:
                estado=2;
console.log(yy_.yytext); return'POW';
            
break;
case 50:
                estado=2;
console.log(yy_.yytext); return'LIT_DECIMAL';
            
break;
case 51:
                estado=2;
console.log(yy_.yytext); return'LIT_ENTERO';
            
break;
case 52:
                estado=2;
console.log(yy_.yytext); return'LIT_CADENA';
            
break;
case 53:
                estado=2;
console.log(yy_.yytext); return'LIT_TRUE';
            
break;
case 54:
                estado=2;
console.log(yy_.yytext); return'LIT_FALSE';
            
break;
case 55:
                estado=2;
console.log(yy_.yytext); return'IDENTIFICADOR';
            
break;
case 56:                             
        console.log("ERROR LEXICO "+yy_.yytext);
    
break;
case 57:return'EOF';
break;
}
},
rules: [/^(?:\n)/,/^(?:\t)/,/^(?: )/,/^(?:\s)/,/^(?:#[^\n])/,/^(?:([\"][\"][\"][^\"]*([^\"][^\"]*)*[\"][\"][\"]|[\'][\'][\'][^\']*([^\'][^\']*)*[\'][\'][\']))/,/^(?:def\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:elif\b)/,/^(?:input\b)/,/^(?:return\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:range\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:<=)/,/^(?:!=)/,/^(?:==)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\/=)/,/^(?:\*=)/,/^(?:%=)/,/^(?:\^=)/,/^(?:=)/,/^(?::)/,/^(?:\+)/,/^(?:-)/,/^(?:\/)/,/^(?:\*)/,/^(?:%)/,/^(?:\^)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:([\"[^\"]*"|[\'[^\']*'))/,/^(?:True\b)/,/^(?:False\b)/,/^(?:[aA-zZ|"_"]([aA-zZ]|[0-9]|_)*)/,/^(?:.+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Python;
exports.Parser = Python.Parser;
exports.parse = function () { return Python.parse.apply(Python, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}