/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var C = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,9],$V2=[2,79],$V3=[1,7],$V4=[1,10],$V5=[1,13],$V6=[1,14],$V7=[1,15],$V8=[1,11],$V9=[2,89,90,91],$Va=[2,146],$Vb=[1,26],$Vc=[2,15],$Vd=[2,15,54,56,59,81,82,83,85],$Ve=[2,11,15,54,56,59,67,81,82,83,85],$Vf=[1,34],$Vg=[1,35],$Vh=[1,36],$Vi=[1,51],$Vj=[1,50],$Vk=[1,52],$Vl=[1,45],$Vm=[1,39],$Vn=[1,40],$Vo=[1,41],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,47],$Vt=[1,60],$Vu=[1,63],$Vv=[1,64],$Vw=[1,65],$Vx=[1,66],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[1,70],$VC=[1,71],$VD=[1,72],$VE=[1,73],$VF=[2,6,11,15,32,35,36,38,39,40,41,42,43,44,45,46,54,56,59,67,81,82,83,85,102],$VG=[2,66],$VH=[2,67],$VI=[2,150],$VJ=[1,89],$VK=[2,6,11,15,32,35,36,38,39,40,41,54,56,59,67,81,82,83,85,102],$VL=[2,11],$VM=[2,2],$VN=[2,6,11,15,32,35,36,38,39,40,41,42,43,54,56,59,67,81,82,83,85,102],$VO=[2,5],$VP=[1,118],$VQ=[1,143],$VR=[1,142],$VS=[1,140],$VT=[1,141],$VU=[1,124],$VV=[1,138],$VW=[1,139],$VX=[1,146],$VY=[1,144],$VZ=[1,145],$V_=[1,147],$V$=[1,148],$V01=[1,149],$V11=[2,47],$V21=[1,154],$V31=[2,9,13,15,18,20,22,25,29,54,56,59,66,73,74,79,81,82,83,85,92,93,94,95,97,101,103],$V41=[2,9,13,15,18,20,22,25,29,66,73,74,79,81,82,83,85,92,93,94,95,97,101,103],$V51=[1,192],$V61=[2,11,67],$V71=[2,6,67],$V81=[2,87],$V91=[2,36],$Va1=[1,241],$Vb1=[2,66,101,103],$Vc1=[2,9,10,13,15,37,43,47,48,49,50,51],$Vd1=[2,9,13,15,20,22,25,29,76,81,82,83,85],$Ve1=[2,189],$Vf1=[1,298],$Vg1=[1,299];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"parametros":3,"expresion":4,"parametros_re":5,"COMA":6,"paremetros_re":7,"metodo_stmt":8,"METODO":9,"OPEN_PARENTHESIS":10,"CLOSE_PARENTHESIS":11,"metodo_clase_stmt":12,"METODO_CLASE":13,"variable_clase":14,"IDENTIFICADOR":15,"asignacion_clase":16,"clase_stmt":17,"CLASE":18,"clean_stmt":19,"CLEAN_SCREEN":20,"getch_stmt":21,"GETCH":22,"scan_parametros":23,"scan_stmt":24,"SCANF":25,"print_parametros":26,"print_parametros_re":27,"print_stmt":28,"PRINTF":29,"nuevo_arreglo":30,"OPEN_BRACKET":31,"CLOSE_BRACKET":32,"nuevo_arreglo_re":33,"arreglo_stmt":34,"AND":35,"OR":36,"NOT":37,"MAYOR":38,"MENOR":39,"COMPARACION":40,"DIFERENTE":41,"SUMA":42,"RESTA":43,"POR":44,"DIV":45,"MOD":46,"LIT_ENTERO":47,"LIT_DECIMAL":48,"LIT_CARACTER":49,"LIT_STRING":50,"PUNTERO":51,"ini":52,"code_c":53,"EOF":54,"paqueteria":55,"INCLUDE":56,"var_stmt":57,"main":58,"VOID":59,"MAIN":60,"OPEN_CURLY":61,"statements":62,"empty_statements":63,"statement":64,"block_statements":65,"CLOSE_CURLY":66,"COLON":67,"if_stmt":68,"for_stmt":69,"while_stmt":70,"do_stmt":71,"switch_stmt":72,"CONTINUE":73,"BREAK":74,"accion_for":75,"clase_Stmt":76,"for_inicio":77,"for_condicion":78,"FOR":79,"data_type":80,"INT":81,"FLOAT":82,"CHAR":83,"const_data":84,"CONST":85,"arreglo":86,"arreglo_re":87,"valor_asignacion":88,"IGUAL":89,"INCREMENTO":90,"DECREMENTO":91,"IF":92,"ELSE":93,"WHILE":94,"DO":95,"while_do":96,"SWITCH":97,"cases":98,"case_stmt":99,"default_stmt":100,"CASE":101,"SEMI_COLON":102,"DEFAULT":103,"$accept":0,"$end":1},
terminals_: {2:"error",6:"COMA",7:"paremetros_re",9:"METODO",10:"OPEN_PARENTHESIS",11:"CLOSE_PARENTHESIS",13:"METODO_CLASE",15:"IDENTIFICADOR",18:"CLASE",20:"CLEAN_SCREEN",22:"GETCH",25:"SCANF",29:"PRINTF",31:"OPEN_BRACKET",32:"CLOSE_BRACKET",35:"AND",36:"OR",37:"NOT",38:"MAYOR",39:"MENOR",40:"COMPARACION",41:"DIFERENTE",42:"SUMA",43:"RESTA",44:"POR",45:"DIV",46:"MOD",47:"LIT_ENTERO",48:"LIT_DECIMAL",49:"LIT_CARACTER",50:"LIT_STRING",51:"PUNTERO",54:"EOF",56:"INCLUDE",59:"VOID",60:"MAIN",61:"OPEN_CURLY",66:"CLOSE_CURLY",67:"COLON",73:"CONTINUE",74:"BREAK",76:"clase_Stmt",79:"FOR",81:"INT",82:"FLOAT",83:"CHAR",85:"CONST",89:"IGUAL",90:"INCREMENTO",91:"DECREMENTO",92:"IF",93:"ELSE",94:"WHILE",95:"DO",97:"SWITCH",101:"CASE",102:"SEMI_COLON",103:"DEFAULT"},
productions_: [0,[3,2],[3,0],[5,3],[5,3],[5,0],[8,4],[8,2],[8,4],[12,4],[12,2],[12,4],[14,3],[14,3],[14,0],[16,1],[16,3],[16,3],[17,3],[17,2],[19,3],[19,2],[19,3],[21,3],[21,2],[21,3],[23,3],[23,2],[23,3],[24,4],[24,2],[24,3],[24,4],[26,2],[27,3],[27,3],[27,0],[28,4],[28,2],[28,3],[28,4],[30,4],[30,2],[30,3],[33,4],[33,3],[33,4],[33,0],[34,2],[4,3],[4,3],[4,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,2],[4,1],[4,1],[4,3],[52,2],[55,2],[55,2],[53,2],[53,2],[53,2],[53,2],[53,0],[58,6],[58,2],[58,3],[58,4],[58,5],[58,6],[63,2],[63,0],[65,2],[65,1],[62,2],[62,1],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[64,2],[64,1],[64,1],[64,1],[64,2],[64,2],[64,1],[64,2],[64,2],[64,2],[64,2],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[77,2],[77,2],[78,2],[78,2],[69,7],[69,2],[69,3],[69,4],[69,5],[69,6],[69,7],[80,1],[80,1],[80,1],[84,2],[84,2],[84,1],[86,4],[86,2],[86,3],[86,0],[87,4],[87,3],[87,4],[87,0],[88,2],[88,2],[88,2],[88,1],[88,1],[57,4],[57,2],[57,4],[57,3],[57,3],[68,5],[68,2],[68,3],[68,4],[68,5],[68,2],[68,2],[70,5],[70,2],[70,3],[70,4],[70,5],[71,5],[71,2],[71,4],[71,5],[96,4],[96,2],[96,3],[96,4],[72,7],[72,2],[72,3],[72,4],[72,5],[72,7],[98,2],[98,1],[98,0],[99,4],[99,2],[99,3],[100,3],[100,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 33:

		$$[$0].push($$[$0-1]);
		this.$=reversaArreglo($$[$0]);
	
break;
case 2: case 5: case 36: case 47: case 79: case 87: case 91: case 146: case 150: case 189:
this.$=[];
break;
case 3: case 34: case 75: case 86:

		$$[$0].push($$[$0-1]);
		this.$=$$[$0];
	
break;
case 4:
addSyntaxError("Se esperaba un parametro",$$[$0],linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 6:
this.$ = instruccionesApi.nuevoMetodo($$[$0-3], $$[$0-1], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 7: case 10: case 21: case 24: case 30: case 38: case 82: case 131: case 162: case 169: case 178: case 182:
addSyntaxError("Se esperaba \'(\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 8: case 11: case 17: case 22: case 25: case 40: case 83: case 164: case 171: case 180: case 184:
addSyntaxError("Se esperaba \')\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 9:
this.$ = instruccionesApi.nuevoMetodo($$[$0-3],$$[$0-1], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 13: case 157: case 183:
addSyntaxError("Se esperaba un identificador",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 19:
addSyntaxError("Esperaba un identificador",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 20:
this.$=instruccionesApi.nuevoClean(linea(this._$.first_line), columna(this._$.first_column));
break;
case 23:
this.$=instruccionesApi.nuevoGetch(linea(this._$.first_line), columna(this._$.first_column))
break;
case 26:

		var arreglo = [];
		arreglo.push($$[$0-2]);
		arreglo.push($$[$0]);
		this.$=arreglo;
	
break;
case 27:
addSyntaxError("Se esperaba \',\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 28: case 31: case 39:
addSyntaxError("Se esperaba una expresion", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 29:

		this.$=instruccionesApi.nuevoScan($$[$0-1][1], $$[$0-1][0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 32:
addSyntaxError("Se esperaba \')\'",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column));
break;
case 35:
addSyntaxError("Se esperaba una expresion", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 37:

		this.$=instruccionesApi.nuevoImprimir($$[$0-1], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 41: case 143:

		$$[$0].push($$[$0-2]);
		this.$=reversaArreglo($$[$0]);
	
break;
case 42:
addSyntaxError("Se esperaba un valor de arreglo",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 43: case 145:
addSyntaxError("Se esperaba \']\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 44:

		$$[$0-1].push($$[$0-2]);
		this.$=$$[$0-1];
	
break;
case 45:
addSyntaxError("Se esperaba un valor de arreglo",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column)); this.$=$$[$0];
break;
case 46:
addSyntaxError("Se esperaba \']\'",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column)); this.$=$$[$0];
break;
case 48:

		this.$=instruccionesApi.nuevoValor($$[$0-1], $$[$0],TIPO_VALOR.IDENTIFICADOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 49:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.AND, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 50:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.OR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 51:
this.$=instruccionesApi.operacionUnaria($$[$0], TIPO_OPERACION.NOT, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 52:
this.$=instruccionesApi.operacionAritmetica($$[$0-2], $$[$0], TIPO_OPERACION.MAYOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 53:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.MENOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 54:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.COMPARACION, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 55:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 56:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.SUMA, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 57:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.RESTA, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 58:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.POR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 59:
this.$=instruccionesApi.operacionAritmetica($$[$0-2],$$[$0], TIPO_OPERACION.DIV, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 60:
this.$=instruccionesApi.operacionAritmetica($$[$0-2], $$[$0], TIPO_OPERACION.MOD, lenguaje, line(), columna(this._$.first_column));
break;
case 61:
this.$=instruccionesApi.operacionUnaria($$[$0], TIPO_OPERACION.RESTA, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 62:
this.$=instruccionesApi.nuevoValor($$[$0], null, TIPO_VALOR.ENTERO, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 63:
this.$=instruccionesApi.nuevoValor($$[$0], null, TIPO_VALOR.DECIMAL, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 64:
this.$=instruccionesApi.nuevoValor($$[$0], null, TIPO_VALOR.CARACTER, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 65:
this.$=instruccionesApi.nuevoValor($$[$0], null, TIPO_VALOR.CADENA, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 66:
this.$=instruccionesApi.nuevoValor($$[$0],null, TIPO_VALOR.IDENTIFICADOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 67: case 108: case 109: case 110: case 113: case 118: case 119: case 120: case 121: case 122: case 123: case 124: case 125: case 142:
this.$=$$[$0];
break;
case 68:
this.$=instruccionesApi.nuevoValor($$[$0], TIPO_VALOR.PUNTERO_IDENTIFICADOR);
break;
case 69: case 70:
this.$=instruccionesApi.nuevoValor($$[$0], null, TIPO_VALOR.METODO, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 71: case 92: case 94: case 96: case 98: case 100: case 102: case 104: case 106: case 111: case 126: case 128: case 177:
this.$=$$[$0-1];
break;
case 72:
return reversaArreglo($$[$0-1]);
break;
case 73:
this.$=instruccionesApi.nuevoInclude($$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 74:
addSyntaxError("Se esperaba una direccion de paqueteria",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 76:
$$[$0].push($$[$0-1]);this.$=$$[$0];
break;
case 77:
$$[$0].push($$[$0-1]); this.$=$$[$0];
break;
case 78:
addSyntaxError("Se esperaba una instruccion de inicio, un main, variable o paqueteria", $$[$0-1], linea(this._$.first_line), columna(this._$.first_column)); this.$=$$[$0];
break;
case 80:

		this.$=instruccionesApi.nuevoMain(reversaArreglo($$[$0]), lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 81:
addSyntaxError("Se esperaba la palabra \'main\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 84: case 174: case 185:
addSyntaxError("Se esperaba \'{\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 85: case 175: case 186:
addSyntaxError("Se esperaba \'}\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 88:
this.$=reversaArreglo($$[$0]);
break;
case 89:
this.$= $$[$0];
break;
case 90:

		checkInstruction($$[$0-1],$$[$0]);
		this.$=$$[$0];
	
break;
case 93: case 95: case 97: case 99: case 101: case 103: case 105: case 107: case 112: case 115: case 117:
addSyntaxError("Se esperaba \';\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 114:
this.$=instruccionesApi.nuevoContinue(linea(this._$.first_line), columna(this._$.first_column));
break;
case 116:
this.$=instruccionesApi.nuevoBreak(linea(this._$.first_line), columna(this._$.first_column));
break;
case 130:

		this.$=instruccionesApi.nuevoFor($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 132:
addSyntaxError("Se esperaba una expresion de inicio", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 133:
addSyntaxError("Se esperaba una condicion", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 134:
addSyntaxError("Se esperaba una accion", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 135:
addSyntaxError("Se esperaba \')\'", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 136:
addSyntaxError("Se esperaba una declaracion", $$[$0], linea(this._$.first_line), columna(this._$.first_column));
break;
case 137:
this.$=TIPO_DATO.INT;
break;
case 138:
this.$=TIPO_DATO.FLOAT;
break;
case 139:
this.$=TIPO_DATO.CHAR;
break;
case 140:

		var arreglo = [];
		arreglo.push(TIPO_VISIBILIDAD.CONST);
		arreglo.push($$[$0]);
		this.$=arreglo;
	
break;
case 141:
addSyntaxError("Se esperaba un tipo de dato (int, float, char)",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 144:
addSyntaxError("Se esperaba una expresion",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 147:

		$$[$0].push($$[$0-2]);
		this.$=$$[$0];
	
break;
case 148:
addSyntaxError("Se esperaba una expresion",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 149:
addSyntaxError("Se esperaba \']\'",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column));this.$=$$[$0];
break;
case 151: case 152:

		var arreglo = [];
		arreglo.push(instruccionesApi.nuevaAsignacion_O(null, null, TIPO_OPERACION.IGUAL, $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
		this.$=arreglo;
	
break;
case 153:
addSyntaxError("Se esperaba un valor par asignar",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 154:

		var arreglo = [];
		arreglo.push(instruccionesApi.nuevaAsignacion_O(null, null, TIPO_OPERACION.INCREMENTO, expresion, lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
		this.$ = arreglo;
		
break;
case 155:

		var arreglo = [];
		arreglo.push(instruccionesApi.nuevaAsignacion_O(null, null, TIPO_OPERACION.DECREMENTO, expresion, lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
		this.$ = arreglo;
		
break;
case 156:

		var id = instruccionesApi.nuevoValor($$[$0-3],null, TIPO_VALOR.IDENTIFICADOR, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
		$$[$0][0].id = id;
		var tipo = null;
		var visibilidad = null;
		if(!Array.isArray($$[$0-3])){
			tipo = $$[$0-3];
		}else{
			visibilidad = $$[$0-3][0];
			tipo = $$[$0-3][1];
		}
		$$[$0].push(instruccionesApi.nuevaDeclaracion(visibilidad, id, $$[$0-1], tipo, lenguaje, linea(this._$.first_line), columna(this._$.first_column)));
		this.$=$$[$0];
	
break;
case 158:
addSyntaxError("Se esperaba un valor para asignar",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 159:

		$$[$0][0].id = instruccionesApi.nuevoValor($$[$0-2], null, TIPO_VALOR.IDENTIFICADOR,lenguaje, linea(this._$.first_line), columna(this._$.first_column));
		this.$=$$[$01];
	
break;
case 160:
addSyntaxError("Se espera un valor para asignar",$$[$0-1],linea(this._$.first_line), columna(this._$.first_column));
break;
case 161:

		this.$=instruccionesApi.nuevoIf($$[$0-3], $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 163: case 170: case 179:
addSyntaxError("Se esperaba una condicion",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 165: case 167:
addSyntaxError("Se esperaba una declaracion o \'{\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 166:

		var else_stmt = instruccionesApi.nuevoElse(null, null, null, lenguaje, linea(this._$.first_line), columna(this._$.first_column));
		if(!Array.isArray($$[$0])){
			if($$[$0].rol == TIPO_INSTRUCCION.IF){
				else_stmt.codicion = $$[$0].condicion;
			}
			else_stmt.instrucciones = $$[$0].instrucciones;
		}else{
			else_stmt.instrucciones = $$[$0];
		}
		this.$=else_stmt;
	
break;
case 168:

		this.$=instruccionesApi.nuevoWhile($$[$0-2], $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 172:
addSyntaxError("Se esperaba una condicion o \'{\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 173:
this.$=instruccionesApi.nuevoDoWhile(reversaArreglo($$[$0-2]), $$[$0], lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 176:
addSyntaxError("Se esperaba un while",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 181:

		this.$=instruccionesApi.nuevoSwitch($$[$0-4], reversaArreglo($$[$0-1]), lenguaje, linea(this._$.first_line), columna(this._$.first_column));
	
break;
case 187:

		$$[$0-1].push($$[$0]);
		this.$=$$[$0-1];
	
break;
case 188:
var arreglo = []; arreglo.push($$[$0]); this.$=arreglo;
break;
case 190:
this.$=instruccionesApi.nuevoCase($$[$0-2], reversaArreglo($$[$0]), lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
case 191:
addSyntaxError("Se esperaba un valor de caso",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 192: case 194:
addSyntaxError("Se esperaba \':\'",$$[$0],linea(this._$.first_line), columna(this._$.first_column));
break;
case 193:
this.$=instruccionesApi.nuevoDefault(reversaArreglo($$[$0]), lenguaje, linea(this._$.first_line), columna(this._$.first_column));
break;
}
},
table: [{2:$V0,15:$V1,52:1,53:2,54:$V2,55:3,56:$V3,57:4,58:5,59:$V4,80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8},{1:[3]},{54:[1,16]},{2:$V0,15:$V1,53:17,54:$V2,55:3,56:$V3,57:4,58:5,59:$V4,80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8},{2:$V0,15:$V1,53:18,54:$V2,55:3,56:$V3,57:4,58:5,59:$V4,80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8},{2:$V0,15:$V1,53:19,54:$V2,55:3,56:$V3,57:4,58:5,59:$V4,80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8},{2:$V0,15:$V1,53:20,54:$V2,55:3,56:$V3,57:4,58:5,59:$V4,80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8},{2:[1,22],50:[1,21]},{2:[1,24],15:[1,23]},o($V9,$Va,{86:25,31:$Vb}),{2:[1,28],60:[1,27]},{2:[1,30],80:29,81:$V5,82:$V6,83:$V7},o($Vc,[2,142]),o($Vc,[2,137]),o($Vc,[2,138]),o($Vc,[2,139]),{1:[2,72]},{54:[2,75]},{54:[2,76]},{54:[2,77]},{54:[2,78]},o($Vd,[2,73]),o($Vd,[2,74]),o($V9,$Va,{86:31,31:$Vb}),o($Ve,[2,157]),{2:[1,33],88:32,89:$Vf,90:$Vg,91:$Vh},{2:[1,38],4:37,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{2:[1,54],10:[1,53]},o($Vd,[2,81]),o($Vc,[2,140]),o($Vc,[2,141]),{2:[1,56],88:55,89:$Vf,90:$Vg,91:$Vh},o($Ve,[2,159]),o($Ve,[2,160]),{2:[1,59],4:57,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,21:58,22:$Vt,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},o($Ve,[2,154]),o($Ve,[2,155]),{2:[1,62],32:[1,61],35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE},o($V9,[2,144]),{4:74,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{4:75,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},o($VF,[2,62]),o($VF,[2,63]),o($VF,[2,64]),o($VF,[2,65]),o($VF,$VG,{30:76,31:[1,77]}),o($VF,$VH),{15:[1,78]},o($VF,[2,69]),o($VF,[2,70]),{4:79,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{2:[1,81],10:[1,80]},{2:[1,83],10:[1,82]},{2:[1,85],11:[1,84]},o($Vd,[2,82]),o($Ve,[2,156]),o($Ve,[2,158]),o($Ve,[2,151],{35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($Ve,[2,152]),o($Ve,[2,153]),{2:[1,87],10:[1,86]},o($V9,$VI,{87:88,31:$VJ}),o($V9,[2,145]),{4:90,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{4:91,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{4:92,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{4:93,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{4:94,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{4:95,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{4:96,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{4:97,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{4:98,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{4:99,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{4:100,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},o($VK,[2,51],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VF,[2,61]),o($VF,[2,48]),{2:[1,102],4:101,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},o($VF,[2,68]),{11:[1,103],35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE},o($VL,$VM,{34:46,8:48,12:49,3:104,4:105,9:$Vi,10:$Vj,13:$Vk,15:$Vl,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs}),o($VF,[2,7]),o($VL,$VM,{34:46,8:48,12:49,4:105,3:106,9:$Vi,10:$Vj,13:$Vk,15:$Vl,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs}),o($VF,[2,10]),{2:[1,108],61:[1,107]},o($Vd,[2,83]),{2:[1,110],11:[1,109]},o($Ve,[2,24]),o($V9,[2,143]),{2:[1,112],4:111,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},o([2,6,11,15,32,35,36,54,56,59,67,81,82,83,85,102],[2,49],{38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o([2,6,11,15,32,36,54,56,59,67,81,82,83,85,102],[2,50],{35:$Vu,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VK,[2,52],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VK,[2,53],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VK,[2,54],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VK,[2,55],{42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VN,[2,56],{44:$VC,45:$VD,46:$VE}),o($VN,[2,57],{44:$VC,45:$VD,46:$VE}),o($VF,[2,58]),o($VF,[2,59]),o($VF,[2,60]),{2:[1,114],32:[1,113],35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE},o($VF,[2,42]),o($VF,[2,71]),{2:[1,116],11:[1,115]},o($VL,$VO,{5:117,6:$VP,35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),{2:[1,120],11:[1,119]},{2:[1,122],8:130,9:$Vi,12:131,13:$Vk,15:$V1,17:132,18:$VQ,19:128,20:$VR,21:129,22:$Vt,24:126,25:$VS,28:127,29:$VT,57:125,62:121,64:123,66:$VU,68:133,69:134,70:135,71:136,72:137,73:$VV,74:$VW,79:$VX,80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8,92:$VY,93:$VZ,94:$V_,95:$V$,97:$V01},o($Vd,[2,84]),o($Ve,[2,23]),o($Ve,[2,25]),{2:[1,151],32:[1,150],35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE},o($V9,$VI,{87:152,31:$VJ}),o($VF,$V11,{33:153,31:$V21}),o($VF,[2,43]),o($VF,[2,6]),o($VF,[2,8]),o($VL,[2,1]),{2:[1,156],4:155,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},o($VF,[2,9]),o($VF,$VL),o($Vd,[2,80]),o($Vd,[2,85]),{8:130,9:$Vi,12:131,13:$Vk,15:$V1,17:132,18:$VQ,19:128,20:$VR,21:129,22:$Vt,24:126,25:$VS,28:127,29:$VT,57:125,62:157,64:123,66:$VU,68:133,69:134,70:135,71:136,72:137,73:$VV,74:$VW,79:$VX,80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8,92:$VY,93:$VZ,94:$V_,95:$V$,97:$V01},o($V31,[2,91]),{2:[1,159],67:[1,158]},{2:[1,161],67:[1,160]},{2:[1,163],67:[1,162]},{2:[1,165],67:[1,164]},{2:[1,167],67:[1,166]},{2:[1,169],67:[1,168]},{2:[1,171],67:[1,170]},{2:[1,173],67:[1,172]},o($V41,[2,108]),o($V41,[2,109]),o($V41,[2,110]),{2:[1,175],67:[1,174]},o($V41,[2,113]),{2:[1,177],67:[1,176]},{2:[1,179],67:[1,178]},{2:[1,181],10:[1,180]},{2:[1,183],10:[1,182]},{2:[1,185],10:[1,184]},{2:[1,187],15:[1,186]},{2:[1,189],10:[1,188]},{2:[1,191],8:130,9:$Vi,12:131,13:$Vk,15:$V1,17:132,18:$VQ,19:128,20:$VR,21:129,22:$Vt,24:126,25:$VS,28:127,29:$VT,57:125,61:$V51,64:193,65:190,68:133,69:134,70:135,71:136,72:137,73:$VV,74:$VW,79:$VX,80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8,92:$VY,93:$VZ,94:$V_,95:$V$,97:$V01},{2:[1,195],10:[1,194]},{2:[1,197],10:[1,196]},{2:[1,199],61:[1,198]},{2:[1,201],10:[1,200]},o($V9,$VI,{87:202,31:$VJ}),o($V9,$VI,{87:203,31:$VJ}),o($V9,[2,148]),o($VF,[2,41]),{2:[1,205],4:204,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},o($VL,$VO,{5:206,6:$VP,35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),{7:[1,207]},o($V31,[2,90]),o($V41,[2,92]),o($V41,[2,93]),o($V41,[2,94]),o($V41,[2,95]),o($V41,[2,96]),o($V41,[2,97]),o($V41,[2,98]),o($V41,[2,99]),o($V41,[2,100]),o($V41,[2,101]),o($V41,[2,102]),o($V41,[2,103]),o($V41,[2,104]),o($V41,[2,105]),o($V41,[2,106]),o($V41,[2,107]),o($V41,[2,111]),o($V41,[2,112]),o($V41,[2,114]),o($V41,[2,115]),o($V41,[2,116]),o($V41,[2,117]),{2:[1,209],4:210,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,23:208,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},o($V61,[2,30]),{2:[1,212],4:213,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,26:211,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},o($V61,[2,38]),{2:[1,215],11:[1,214]},o($V61,[2,21]),o($V71,[2,14],{16:216,14:217,10:[1,218]}),o($VH,[2,19]),{2:[1,220],4:219,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},o($V41,[2,162]),o($V41,[2,166]),o($V41,[2,167]),{8:130,9:$Vi,12:131,13:$Vk,15:$V1,17:132,18:$VQ,19:128,20:$VR,21:129,22:$Vt,24:126,25:$VS,28:127,29:$VT,57:125,62:221,64:123,66:$VU,68:133,69:134,70:135,71:136,72:137,73:$VV,74:$VW,79:$VX,80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8,92:$VY,93:$VZ,94:$V_,95:$V$,97:$V01},o($V41,[2,89]),{2:[1,223],15:$V1,57:224,77:222,80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8},o($V41,[2,131]),{2:[1,226],4:225,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},o($V41,[2,169]),o($VG,$V81,{84:8,80:12,57:125,24:126,28:127,19:128,21:129,8:130,12:131,17:132,68:133,69:134,70:135,71:136,72:137,63:227,64:228,9:$Vi,13:$Vk,15:$V1,18:$VQ,20:$VR,22:$Vt,25:$VS,29:$VT,73:$VV,74:$VW,79:$VX,81:$V5,82:$V6,83:$V7,85:$V8,92:$VY,93:$VZ,94:$V_,95:$V$,97:$V01}),o($VH,[2,174]),{2:[1,230],15:[1,229]},o($V41,[2,182]),o($V9,[2,147]),o($V9,[2,149]),{2:[1,232],32:[1,231],35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE},o($VF,$V11,{33:233,31:$V21}),o($VL,[2,3]),o($VL,[2,4]),{2:[1,235],11:[1,234]},o($V61,[2,31]),{2:[1,237],6:[1,236],35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE},{2:[1,239],11:[1,238]},o($V61,[2,39]),o($VL,$V91,{27:240,6:$Va1,35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($V61,[2,20]),o($V61,[2,22]),o($VH,[2,18]),o($VH,$Vc,{6:[1,242]}),o($VL,$VM,{34:46,8:48,12:49,4:105,3:243,9:$Vi,10:$Vj,13:$Vk,15:$Vl,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs}),{2:[1,245],11:[1,244],35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE},o($V41,[2,163]),o($V41,[2,88]),{2:[1,247],4:248,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs,78:246},o($V41,[2,132]),{2:[1,250],67:[1,249]},{2:[1,252],11:[1,251],35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE},o($V41,[2,170]),{2:[1,254],66:[1,253]},o($Vb1,$V81,{84:8,80:12,57:125,24:126,28:127,19:128,21:129,8:130,12:131,17:132,68:133,69:134,70:135,71:136,72:137,64:228,63:255,9:$Vi,13:$Vk,15:$V1,18:$VQ,20:$VR,22:$Vt,25:$VS,29:$VT,73:$VV,74:$VW,79:$VX,81:$V5,82:$V6,83:$V7,85:$V8,92:$VY,93:$VZ,94:$V_,95:$V$,97:$V01}),{2:[1,257],11:[1,256]},o($V41,[2,183]),o($VF,$V11,{33:258,31:$V21}),o($VF,$V11,{33:259,31:$V21}),o($VF,[2,45]),o($V61,[2,29]),o($V61,[2,32]),{2:[1,261],4:260,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},o($VL,[2,27]),o($V61,[2,37]),o($V61,[2,40]),o($VL,[2,33]),{2:[1,263],4:262,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{2:[1,265],15:[1,264]},{2:[1,267],11:[1,266]},{2:[1,269],8:130,9:$Vi,12:131,13:$Vk,15:$V1,17:132,18:$VQ,19:128,20:$VR,21:129,22:$Vt,24:126,25:$VS,28:127,29:$VT,57:125,61:$V51,64:193,65:268,68:133,69:134,70:135,71:136,72:137,73:$VV,74:$VW,79:$VX,80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8,92:$VY,93:$VZ,94:$V_,95:$V$,97:$V01},o($V41,[2,164]),{2:[1,271],8:273,9:$Vi,12:274,13:$Vk,15:$V1,19:278,20:$VR,21:279,22:$Vt,24:277,25:$VS,28:276,29:$VT,57:272,75:270,76:[1,275],80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8},o($V41,[2,133]),{2:[1,281],35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,67:[1,280]},o($Vc1,[2,126]),o($Vc1,[2,127]),{2:[1,283],8:130,9:$Vi,12:131,13:$Vk,15:$V1,17:132,18:$VQ,19:128,20:$VR,21:129,22:$Vt,24:126,25:$VS,28:127,29:$VT,57:125,61:$V51,64:193,65:282,68:133,69:134,70:135,71:136,72:137,73:$VV,74:$VW,79:$VX,80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8,92:$VY,93:$VZ,94:$V_,95:$V$,97:$V01},o($V41,[2,171]),{2:[1,285],94:[1,286],96:284},o($VH,[2,175]),o($Vb1,[2,86]),{2:[1,288],61:[1,287]},o($V41,[2,184]),o($VF,[2,44]),o($VF,[2,46]),o($VL,[2,26],{35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VL,[2,28]),o($VL,$V91,{27:289,6:$Va1,35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE}),o($VL,$V91,{27:290,6:$Va1}),o($V71,[2,12]),o($V71,[2,13]),o($VH,[2,16]),o($VH,[2,17]),o($V41,[2,161]),o($V41,[2,165]),{2:[1,292],11:[1,291]},o($V41,[2,134]),o($VL,[2,118]),o($VL,[2,119]),o($VL,[2,120]),o($VL,[2,121]),o($VL,[2,122]),o($VL,[2,123]),o($VL,[2,124]),o($VL,[2,125]),o($Vd1,[2,128]),o($Vd1,[2,129]),o($V41,[2,168]),o($V41,[2,172]),o($VH,[2,173]),o($VH,[2,176]),{2:[1,294],10:[1,293]},o($VG,$Ve1,{98:295,99:296,100:297,101:$Vf1,103:$Vg1}),o($V41,[2,185]),o($VL,[2,34]),o($VL,[2,35]),{2:[1,301],8:130,9:$Vi,12:131,13:$Vk,15:$V1,17:132,18:$VQ,19:128,20:$VR,21:129,22:$Vt,24:126,25:$VS,28:127,29:$VT,57:125,61:$V51,64:193,65:300,68:133,69:134,70:135,71:136,72:137,73:$VV,74:$VW,79:$VX,80:12,81:$V5,82:$V6,83:$V7,84:8,85:$V8,92:$VY,93:$VZ,94:$V_,95:$V$,97:$V01},o($V41,[2,135]),{2:[1,303],4:302,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},o($VH,[2,178]),{2:[1,305],66:[1,304]},o($VG,$Ve1,{99:296,100:297,98:306,101:$Vf1,103:$Vg1}),o($VG,[2,188]),{2:[1,308],4:307,8:48,9:$Vi,10:$Vj,12:49,13:$Vk,15:$Vl,34:46,37:$Vm,43:$Vn,47:$Vo,48:$Vp,49:$Vq,50:$Vr,51:$Vs},{2:[1,310],102:[1,309]},o($V41,[2,130]),o($V41,[2,136]),{2:[1,312],11:[1,311],35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE},o($VH,[2,179]),o($V41,[2,181]),o($V41,[2,186]),o($VG,[2,187]),{2:[1,314],35:$Vu,36:$Vv,38:$Vw,39:$Vx,40:$Vy,41:$Vz,42:$VA,43:$VB,44:$VC,45:$VD,46:$VE,102:[1,313]},o($Vb1,[2,191]),o($VG,$V81,{84:8,80:12,57:125,24:126,28:127,19:128,21:129,8:130,12:131,17:132,68:133,69:134,70:135,71:136,72:137,64:228,63:315,9:$Vi,13:$Vk,15:$V1,18:$VQ,20:$VR,22:$Vt,25:$VS,29:$VT,73:$VV,74:$VW,79:$VX,81:$V5,82:$V6,83:$V7,85:$V8,92:$VY,93:$VZ,94:$V_,95:$V$,97:$V01}),o($VG,[2,194]),o($VH,[2,177]),o($VH,[2,180]),o($Vb1,$V81,{84:8,80:12,57:125,24:126,28:127,19:128,21:129,8:130,12:131,17:132,68:133,69:134,70:135,71:136,72:137,64:228,63:316,9:$Vi,13:$Vk,15:$V1,18:$VQ,20:$VR,22:$Vt,25:$VS,29:$VT,73:$VV,74:$VW,79:$VX,81:$V5,82:$V6,83:$V7,85:$V8,92:$VY,93:$VZ,94:$V_,95:$V$,97:$V01}),o($Vb1,[2,192]),o($VG,[2,193]),o($Vb1,[2,190])],
defaultActions: {16:[2,72],17:[2,75],18:[2,76],19:[2,77],20:[2,78]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	//import
	var ErrorLexico = require ('../../../error/LexicalError');
    var ErrorSintactico = require('../../../error/SyntaxError');
	//variables
	var erroresLexicos = [];
	var erroresSintacticos = [];
	var lineNumber=0;
	var columnNumber=0;

	module.exports.setErroresLexicos = function(errores){
		erroresLexicos = errores;
	}

	module.exports.setErroresSintacticos = function(errores){
		erroresSintacticos = errores;
	}

	module.exports.setLineNumber = function(line){
		lineNumber = line;
	}

	module.exports.setColumnNumber = function(column){
		columnNumber = column
	}

	function addLexicalError(lexema, linea, column){   
        try{
            var errorLexico = new ErrorLexico(lexema, linea, column);
            erroresLexicos.push(errorLexico);
        }catch(ex){
            console.log(ex);
        }                  
    }

    function addSyntaxError(descripcion, token, line, column){
		try{
			var errorSintactico = new ErrorSintactico(descripcion, token, line, column);
			erroresSintacticos.push(errorSintactico);
		}catch(ex){
			console.log(ex);
		}
	}

	const TIPO_VISIBILIDAD = require("../../../api/Instrucciones").TIPO_VISIBILIDAD;
	const TIPO_LENGUAJE = require("../../../api/Instrucciones").TIPO_LENGUAJE;
	const TIPO_DATO = require('../../../api/Instrucciones').TIPO_DATO;
    const TIPO_VALOR = require('../../../api/Instrucciones').TIPO_VALOR;
    const TIPO_OPERACION = require('../../../api/Instrucciones').TIPO_OPERACION;
    const TIPO_INSTRUCCION = require('../../../api/Instrucciones').TIPO_INSTRUCCION;
    const TIPO_SWITCH = require('../../../api/Instrucciones').TIPO_SWITCH;
    const TIPO_PRINT = require('../../../api/Instrucciones').TIPO_PRINT;
    const instruccionesApi = require('../../../api/InstruccionesApi').instruccionesApi;
    const lenguaje = TIPO_LENGUAJE.C;

	function reversaArreglo(arreglo){
		var aux = [];
		for(var index=arreglo.length-1; index>=0; index--){
			aux.push(arreglo[index]);
		}
		return aux;
	}

	function checkInstruction(stmt, arreglo){
		var flag = true;
		if(stmt.rol == TIPO_INSTRUCCION.ELSE){
            if(arreglo.length>=1){
                if(arreglo[arreglo.length-1].rol == TIPO_INSTRUCCION.IF ||
                arreglo[arreglo.length-1].rol == TIPO_INSTRUCCION.ELSE){
                    if(arreglo[arreglo.length-1].rol == TIPO_INSTRUCCION.IF){
                        stmt.if = arreglo[arreglo.length-1];
                    }else{
                        if(arreglo[arreglo.length-1].if != null){
                            stmt.if = arreglo[arreglo.length-1].if;
                        }else{
                            flag=false;
                            addSyntaxError("Se esperaba un else o if antes", stmt.rol, stmt.linea, stmt.columna);
                        }
                    }
                }
            }
        }
		if(flag){
			arreglo.push(stmt);
		}
	}

	function linea(line){
		return line + lineNumber;
	}

	function columna(column){
		return column + columnNumber;
	}


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:console.log("metodo clase: "+yy_.yytext);return 13;
break;
case 2:console.log("metodo: "+yy_.yytext);return 9;
break;
case 3:console.log("clas: "+yy_.yytext);return 18;
break;
case 4:return 92;
break;
case 5:return 93;
break;
case 6:return 97;
break;
case 7:return 94;
break;
case 8:return 56;
break;
case 9:return 'PAQUETERIA';
break;
case 10:return 79;
break;
case 11:return 95;
break;
case 12:return 81;
break;
case 13:return 83;
break;
case 14:return 82;
break;
case 15:return 85;
break;
case 16:return 101;
break;
case 17:return 74;
break;
case 18:return 103;
break;
case 19:return 73;
break;
case 20:return 25;
break;
case 21:return 29;
break;
case 22:return 20;
break;
case 23:return 22;
break;
case 24:return 59;
break;
case 25:return 60;
break;
case 26:return 47;
break;
case 27:return 48;
break;
case 28:return 49;
break;
case 29:return 50;
break;
case 30:return 15;
break;
case 31:return 38;
break;
case 32:return 39;
break;
case 33:return 40;
break;
case 34:return 41;
break;
case 35:return 35;
break;
case 36:return 36;
break;
case 37:return 37;
break;
case 38:return 90;
break;
case 39:return 91;
break;
case 40:return 42;
break;
case 41:return 43;
break;
case 42:return 44;
break;
case 43:return 45;
break;
case 44:return 46;
break;
case 45:return 89;
break;
case 46:return 31;
break;
case 47:return 32;
break;
case 48:return 61;
break;
case 49:return 66;
break;
case 50:return 10;
break;
case 51:return 11;
break;
case 52:return 67;
break;
case 53:return 102;
break;
case 54:return 51;
break;
case 55:return 6;
break;
case 56:return 54;
break;
case 57:/*ignore*/;
break;
case 58:/*ignore*/;
break;
case 59: 
	addLexicalError(yy_.yytext, linea(yy_.yylloc.first_line), columna(yy_.yylloc.first_column));
	
break;
}
},
rules: [/^(?:\s+)/,/^(?:(((JAVA)(\.([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*)))(\.([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*))))/,/^(?:((PY)(\.([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*))))/,/^(?:((JAVA)(\.([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*))))/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:while\b)/,/^(?:#include\b)/,/^(?:("["PY"|"JAVA"]((\.([aA-zZ|"_"|"-"|0-9|","|"$"|"\("|"\)"|"\["|"\]"|"\{"|"\}"]+))+|\.\*)"))/,/^(?:for\b)/,/^(?:do\b)/,/^(?:int\b)/,/^(?:char\b)/,/^(?:float\b)/,/^(?:const\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:continue\b)/,/^(?:scanf\b)/,/^(?:printf\b)/,/^(?:clrscr\b)/,/^(?:getch\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:([0-9]+\b))/,/^(?:([0-9]+(\.[0-9]+)\b))/,/^(?:('[^\']'))/,/^(?:("[^\"]*"))/,/^(?:([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*))/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?::)/,/^(?:&)/,/^(?:,)/,/^(?:$)/,/^(?:(\/\/.*))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:.+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = C;
exports.Parser = C.Parser;
exports.parse = function () { return C.parse.apply(C, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}