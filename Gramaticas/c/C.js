/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var C = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,50],$V1=[2,50,54],$V2=[2,65],$V3=[1,45],$V4=[1,46],$V5=[1,40],$V6=[1,47],$V7=[1,43],$V8=[1,44],$V9=[1,41],$Va=[1,42],$Vb=[1,23],$Vc=[1,37],$Vd=[1,38],$Ve=[1,50],$Vf=[1,56],$Vg=[1,57],$Vh=[1,58],$Vi=[1,54],$Vj=[1,48],$Vk=[1,49],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[2,9,13,15,18,20,22,24,26,50,54,62,63,71,72,76,78,79,80,82,89,90,91,92,94,98],$Vp=[2,9,13,15,18,20,22,24,26,62,71,72,76,78,79,80,82,89,90,91,92,94],$Vq=[1,88],$Vr=[1,89],$Vs=[1,90],$Vt=[2,15],$Vu=[2,86,87,88],$Vv=[2,11,65],$Vw=[1,134],$Vx=[1,129],$Vy=[1,123],$Vz=[1,124],$VA=[1,125],$VB=[1,126],$VC=[1,127],$VD=[1,128],$VE=[1,131],$VF=[2,11],$VG=[2,2],$VH=[2,6,7,11,29,32,33,35,36,37,38,39,40,41,42,43,65,99],$VI=[2,6,65],$VJ=[2,75],$VK=[1,161],$VL=[1,162],$VM=[1,163],$VN=[1,164],$VO=[1,165],$VP=[1,166],$VQ=[1,167],$VR=[1,168],$VS=[1,169],$VT=[1,170],$VU=[1,171],$VV=[2,6,11],$VW=[2,6,7,11,29,32,33,35,36,37,38,65,99],$VX=[2,9,13,15,18,20,22,24,26,63,71,72,76,78,79,80,82,89,90,91,92,94,98],$VY=[2,28,86,87,88],$VZ=[2,6,7,11,29,32,33,35,36,37,38,39,40,65,99],$V_=[2,63,98],$V$=[2,6,7,11,28,29,32,33,35,36,37,38,39,40,41,42,43,65,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"parametros":3,"expresion":4,"parametros_re":5,"COMA":6,"paremetros_re":7,"metodo_stmt":8,"METODO":9,"OPEN_PARENTHESIS":10,"CLOSE_PARENTHESIS":11,"metodo_clase_stmt":12,"METODO_CLASE":13,"variable_clase":14,"IDENTIFICADOR":15,"asignacion_clase":16,"clase_stmt":17,"CLASE":18,"clean_stmt":19,"CLEAN_SCREEN":20,"getch_stmt":21,"GETCH":22,"scan_stmt":23,"SCANF":24,"print_stmt":25,"PRINTF":26,"nuevo_arreglo":27,"OPEN_BRACKET":28,"CLOSE_BRACKET":29,"nuevo_arreglo_re":30,"arreglo_stmt":31,"AND":32,"OR":33,"NOT":34,"MAYOR":35,"MENOR":36,"COMPARACION":37,"DIFERENTE":38,"SUMA":39,"RESTA":40,"POR":41,"DIV":42,"MOD":43,"LIT_ENTERO":44,"LIT_DECIMAL":45,"LIT_CARACTER":46,"LIT_STRING":47,"PUNTERO":48,"paqueteria":49,"INCLUDE":50,"PAQUETERIA":51,"ini":52,"code_c":53,"EOF":54,"main":55,"VOID":56,"MAIN":57,"block_statements":58,"empty_statements":59,"statement":60,"statements":61,"OPEN_CURLY":62,"CLOSE_CURLY":63,"var_stmt":64,"COLON":65,"if_stmt":66,"for_stmt":67,"while_stmt":68,"do_stmt":69,"switch_stmt":70,"CONTINUE":71,"BREAK":72,"accion_for":73,"clase_Stmt":74,"for_params":75,"FOR":76,"data_type":77,"INT":78,"FLOAT":79,"CHAR":80,"const_data":81,"CONST":82,"arreglo":83,"arreglo_re":84,"valor_asignacion":85,"IGUAL":86,"INCREMENTO":87,"DECREMENTO":88,"IF":89,"ELSE":90,"WHILE":91,"DO":92,"while_do":93,"SWITCH":94,"cases":95,"case_stmt":96,"default_stmt":97,"CASE":98,"SEMI_COLON":99,"DEFAULT":100,"$accept":0,"$end":1},
terminals_: {2:"error",6:"COMA",7:"paremetros_re",9:"METODO",10:"OPEN_PARENTHESIS",11:"CLOSE_PARENTHESIS",13:"METODO_CLASE",15:"IDENTIFICADOR",18:"CLASE",20:"CLEAN_SCREEN",22:"GETCH",24:"SCANF",26:"PRINTF",28:"OPEN_BRACKET",29:"CLOSE_BRACKET",32:"AND",33:"OR",34:"NOT",35:"MAYOR",36:"MENOR",37:"COMPARACION",38:"DIFERENTE",39:"SUMA",40:"RESTA",41:"POR",42:"DIV",43:"MOD",44:"LIT_ENTERO",45:"LIT_DECIMAL",46:"LIT_CARACTER",47:"LIT_STRING",48:"PUNTERO",50:"INCLUDE",51:"PAQUETERIA",54:"EOF",56:"VOID",57:"MAIN",62:"OPEN_CURLY",63:"CLOSE_CURLY",65:"COLON",71:"CONTINUE",72:"BREAK",74:"clase_Stmt",76:"FOR",78:"INT",79:"FLOAT",80:"CHAR",82:"CONST",86:"IGUAL",87:"INCREMENTO",88:"DECREMENTO",89:"IF",90:"ELSE",91:"WHILE",92:"DO",94:"SWITCH",98:"CASE",99:"SEMI_COLON",100:"DEFAULT"},
productions_: [0,[3,2],[3,0],[5,3],[5,3],[5,0],[8,4],[8,2],[8,4],[12,4],[12,2],[12,4],[14,3],[14,3],[14,0],[16,1],[16,3],[16,3],[17,3],[17,2],[19,3],[19,2],[19,3],[21,3],[21,2],[21,3],[23,4],[23,2],[23,4],[25,4],[27,4],[27,2],[27,3],[30,4],[30,3],[30,4],[30,0],[31,2],[4,3],[4,3],[4,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,1],[4,1],[4,1],[4,1],[4,1],[4,1],[4,2],[4,1],[4,1],[4,3],[49,2],[49,2],[52,2],[52,2],[53,2],[53,2],[53,1],[53,1],[55,5],[55,2],[55,3],[55,4],[55,5],[59,2],[59,0],[58,2],[58,1],[61,2],[61,2],[61,1],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,2],[60,1],[60,1],[60,1],[60,2],[60,2],[60,1],[60,2],[60,2],[60,2],[60,2],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[75,5],[75,2],[75,3],[75,4],[75,5],[67,5],[67,2],[67,3],[67,4],[67,5],[77,1],[77,1],[77,1],[81,2],[81,2],[81,1],[83,4],[83,2],[83,3],[83,0],[84,4],[84,3],[84,4],[84,0],[85,2],[85,2],[85,2],[85,1],[85,1],[64,4],[64,2],[64,4],[64,2],[64,2],[66,5],[66,2],[66,3],[66,4],[66,5],[66,2],[66,2],[68,5],[68,2],[68,3],[68,4],[68,5],[69,5],[69,2],[69,4],[69,5],[93,4],[93,2],[93,3],[93,4],[70,7],[70,2],[70,3],[70,4],[70,5],[70,7],[95,2],[95,1],[95,0],[96,4],[96,2],[96,3],[97,3],[97,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{2:[1,3],52:1,53:2,55:4,56:[1,5]},{1:[3]},{2:[1,8],49:7,50:[1,9],54:[1,6]},o($V0,[2,68],{54:[1,10]}),o($V1,[2,67]),{2:[1,12],57:[1,11]},{1:[2,63]},o($V1,$V2),o($V1,[2,66]),{2:[1,14],51:[1,13]},{1:[2,64]},{2:[1,16],10:[1,15]},o($V1,[2,70]),o($V1,[2,61]),o($V1,[2,62]),{2:[1,18],11:[1,17]},o($V1,[2,71]),{2:[1,20],8:29,9:$V3,12:30,13:$V4,15:$V5,17:31,18:$V6,19:27,20:$V7,21:28,22:$V8,23:25,24:$V9,25:26,26:$Va,58:19,60:22,61:21,63:$Vb,64:24,66:32,67:33,68:34,69:35,70:36,71:$Vc,72:$Vd,76:$Ve,77:55,78:$Vf,79:$Vg,80:$Vh,81:39,82:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,94:$Vn},o($V1,[2,72]),o($V1,[2,69]),o($V1,[2,73]),{2:[1,61],8:29,9:$V3,12:30,13:$V4,15:$V5,17:31,18:$V6,19:27,20:$V7,21:28,22:$V8,23:25,24:$V9,25:26,26:$Va,60:60,62:[1,59],64:24,66:32,67:33,68:34,69:35,70:36,71:$Vc,72:$Vd,76:$Ve,77:55,78:$Vf,79:$Vg,80:$Vh,81:39,82:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,94:$Vn},o($Vo,[2,77]),o($Vp,[2,80]),{2:[1,63],65:[1,62]},{2:[1,65],65:[1,64]},{2:[1,67],65:[1,66]},{2:[1,69],65:[1,68]},{2:[1,71],65:[1,70]},{2:[1,73],65:[1,72]},{2:[1,75],65:[1,74]},{2:[1,77],65:[1,76]},o($Vo,[2,97]),o($Vo,[2,98]),o($Vo,[2,99]),{2:[1,79],65:[1,78]},o($Vo,[2,102]),{2:[1,81],65:[1,80]},{2:[1,83],65:[1,82]},{2:[1,85],15:[1,84]},{2:[1,87],85:86,86:$Vq,87:$Vr,88:$Vs},{2:[1,92],10:[1,91]},{10:[1,93]},{2:[1,95],10:[1,94]},{2:[1,97],10:[1,96]},{2:[1,99],10:[1,98]},{2:[1,101],10:[1,100]},{2:[1,103],15:[1,102]},{2:[1,105],10:[1,104]},{2:[1,107],8:29,9:$V3,12:30,13:$V4,15:$V5,17:31,18:$V6,19:27,20:$V7,21:28,22:$V8,23:25,24:$V9,25:26,26:$Va,58:106,60:22,61:21,63:$Vb,64:24,66:32,67:33,68:34,69:35,70:36,71:$Vc,72:$Vd,76:$Ve,77:55,78:$Vf,79:$Vg,80:$Vh,81:39,82:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,94:$Vn},{2:[1,109],10:[1,108]},{2:[1,111],10:[1,110]},{2:[1,113],62:[1,112]},{2:[1,115],10:[1,114]},{2:[1,117],77:116,78:$Vf,79:$Vg,80:$Vh},o($Vt,[2,130]),o($Vt,[2,125]),o($Vt,[2,126]),o($Vt,[2,127]),o($Vo,[2,76]),o($Vp,[2,78]),o($Vp,[2,79]),o($Vo,[2,81]),o($Vo,[2,82]),o($Vo,[2,83]),o($Vo,[2,84]),o($Vo,[2,85]),o($Vo,[2,86]),o($Vo,[2,87]),o($Vo,[2,88]),o($Vo,[2,89]),o($Vo,[2,90]),o($Vo,[2,91]),o($Vo,[2,92]),o($Vo,[2,93]),o($Vo,[2,94]),o($Vo,[2,95]),o($Vo,[2,96]),o($Vo,[2,100]),o($Vo,[2,101]),o($Vo,[2,103]),o($Vo,[2,104]),o($Vo,[2,105]),o($Vo,[2,106]),o($Vu,[2,134],{83:118,28:[1,119]}),o($Vv,[2,145]),o($Vv,[2,147]),o($Vv,[2,148]),{2:[1,122],4:120,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,21:121,22:$V8,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},o($Vv,[2,142]),o($Vv,[2,143]),o($VF,$VG,{31:130,8:132,12:133,3:135,4:136,9:$V3,10:$Vw,13:$V4,15:$Vx,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE}),o($Vv,[2,27]),{3:137,4:136,8:132,9:$V3,10:$Vw,11:$VG,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{2:[1,139],11:[1,138]},o($Vv,[2,21]),{2:[1,141],11:[1,140]},o($Vv,[2,24]),o($VF,$VG,{31:130,8:132,12:133,4:136,3:142,9:$V3,10:$Vw,13:$V4,15:$Vx,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE}),o($VH,[2,7]),o($VF,$VG,{31:130,8:132,12:133,4:136,3:143,9:$V3,10:$Vw,13:$V4,15:$Vx,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE}),o($VH,[2,10]),o($VI,[2,14],{16:144,14:145,10:[1,146]}),o($V2,[2,19]),{2:[1,148],4:147,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},o($Vo,[2,150]),o($Vo,[2,154]),o($Vo,[2,155]),{2:[1,150],15:$V5,64:151,75:149,77:55,78:$Vf,79:$Vg,80:$Vh,81:39,82:$Vi},o($Vo,[2,121]),{2:[1,153],4:152,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},o($Vo,[2,157]),o([2,9,13,15,18,20,22,24,26,63,71,72,76,78,79,80,82,89,90,91,92,94],$VJ,{59:154}),o($V2,[2,162]),{2:[1,156],15:[1,155]},o($Vo,[2,170]),o($Vt,[2,128]),o($Vt,[2,129]),{2:[1,158],85:157,86:$Vq,87:$Vr,88:$Vs},{2:[1,160],4:159,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},o($Vv,[2,139],{32:$VK,33:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU}),o($Vv,[2,140]),o($Vv,[2,141]),{4:172,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{4:173,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},o($VH,[2,51]),o($VH,[2,52]),o($VH,[2,53]),o($VH,[2,54]),o($VH,[2,55],{27:174,28:[1,175]}),o($VH,[2,56]),{15:[1,176]},o($VH,[2,58]),o($VH,[2,59]),{4:177,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{2:[1,179],11:[1,178]},o($VV,[2,5],{5:180,7:[1,181],32:$VK,33:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU}),{11:[1,182]},o($Vv,[2,20]),o($Vv,[2,22]),o($Vv,[2,23]),o($Vv,[2,25]),{2:[1,184],11:[1,183]},{2:[1,186],11:[1,185]},o($V2,[2,18]),o($V2,$Vt,{6:[1,187]}),o($VF,$VG,{31:130,8:132,12:133,4:136,3:188,9:$V3,10:$Vw,13:$V4,15:$Vx,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE}),{2:[1,190],11:[1,189],32:$VK,33:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU},o($Vo,[2,151]),{2:[1,192],11:[1,191]},o($Vo,[2,122]),{2:[1,194],65:[1,193]},{2:[1,196],11:[1,195],32:$VK,33:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU},o($Vo,[2,158]),{2:[1,198],8:29,9:$V3,12:30,13:$V4,15:$V5,17:31,18:$V6,19:27,20:$V7,21:28,22:$V8,23:25,24:$V9,25:26,26:$Va,60:199,63:[1,197],64:24,66:32,67:33,68:34,69:35,70:36,71:$Vc,72:$Vd,76:$Ve,77:55,78:$Vf,79:$Vg,80:$Vh,81:39,82:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,94:$Vn},{2:[1,201],11:[1,200]},o($Vo,[2,171]),o($Vv,[2,144]),o($Vv,[2,146]),{2:[1,203],29:[1,202],32:$VK,33:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU},o($Vu,[2,132]),{4:204,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{4:205,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{4:206,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{4:207,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{4:208,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{4:209,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{4:210,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{4:211,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{4:212,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{4:213,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{4:214,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},o($VW,[2,40],{39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU}),o($VH,$V0),o($VH,[2,37]),{2:[1,216],4:215,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},o($VH,[2,57]),{11:[1,217],32:$VK,33:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU},o($Vv,[2,26]),o($Vv,[2,28]),o($VF,[2,1],{6:[1,218]}),{6:[1,219]},o($Vv,[2,29]),o($VH,[2,6]),o($VH,[2,8]),o($VH,[2,9]),o($VH,$VF),{2:[1,221],15:[1,220]},{2:[1,223],11:[1,222]},{2:[1,225],8:29,9:$V3,12:30,13:$V4,15:$V5,17:31,18:$V6,19:27,20:$V7,21:28,22:$V8,23:25,24:$V9,25:26,26:$Va,58:224,60:22,61:21,63:$Vb,64:24,66:32,67:33,68:34,69:35,70:36,71:$Vc,72:$Vd,76:$Ve,77:55,78:$Vf,79:$Vg,80:$Vh,81:39,82:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,94:$Vn},o($Vo,[2,152]),{2:[1,227],8:29,9:$V3,12:30,13:$V4,15:$V5,17:31,18:$V6,19:27,20:$V7,21:28,22:$V8,23:25,24:$V9,25:26,26:$Va,58:226,60:22,61:21,63:$Vb,64:24,66:32,67:33,68:34,69:35,70:36,71:$Vc,72:$Vd,76:$Ve,77:55,78:$Vf,79:$Vg,80:$Vh,81:39,82:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,94:$Vn},o($Vo,[2,123]),{2:[1,229],4:228,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},o($VF,[2,116]),{2:[1,231],8:29,9:$V3,12:30,13:$V4,15:$V5,17:31,18:$V6,19:27,20:$V7,21:28,22:$V8,23:25,24:$V9,25:26,26:$Va,58:230,60:22,61:21,63:$Vb,64:24,66:32,67:33,68:34,69:35,70:36,71:$Vc,72:$Vd,76:$Ve,77:55,78:$Vf,79:$Vg,80:$Vh,81:39,82:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,94:$Vn},o($Vo,[2,159]),{2:[1,233],91:[1,234],93:232},o($V2,[2,163]),o($VX,[2,74]),{2:[1,236],62:[1,235]},o($Vo,[2,172]),o($VY,[2,138],{84:237}),o($Vu,[2,133]),o([2,6,7,11,29,32,33,65,99],[2,38],{35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU}),o([2,6,7,11,29,33,65,99],[2,39],{32:$VK,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU}),o($VW,[2,41],{39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU}),o($VW,[2,42],{39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU}),o($VW,[2,43],{39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU}),o($VW,[2,44],{39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU}),o($VZ,[2,45],{41:$VS,42:$VT,43:$VU}),o($VZ,[2,46],{41:$VS,42:$VT,43:$VU}),o($VH,[2,47]),o($VH,[2,48]),o($VH,[2,49]),{2:[1,239],29:[1,238],32:$VK,33:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU},o($VH,[2,31]),o($VH,[2,60]),{4:240,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},{2:[1,241]},o($VI,[2,12]),o($VI,[2,13]),o($V2,[2,16]),o($V2,[2,17]),o($Vo,[2,149]),o($Vo,[2,153]),o($Vo,[2,120]),o($Vo,[2,124]),{2:[1,243],32:$VK,33:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU,65:[1,242]},o($VF,[2,117]),o($Vo,[2,156]),o($Vo,[2,160]),o($V2,[2,161]),o($V2,[2,164]),{2:[1,245],10:[1,244]},o($V_,[2,177],{95:246,97:247,100:[1,248]}),o($Vo,[2,173]),o($Vu,[2,131],{28:[1,249]}),o($V$,[2,36],{30:250}),o($VH,[2,32]),o($VV,[2,3],{32:$VK,33:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU}),o($VV,[2,4]),{2:[1,252],8:254,9:$V3,12:255,13:$V4,15:$V5,19:259,20:$V7,21:260,22:$V8,23:258,24:$V9,25:257,26:$Va,64:253,73:251,74:[1,256],77:55,78:$Vf,79:$Vg,80:$Vh,81:39,82:$Vi},o($VF,[2,118]),{2:[1,262],4:261,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},o($V2,[2,166]),{2:[1,264],63:[1,263],96:265,98:[1,266]},o($V_,[2,176]),{2:[1,268],99:[1,267]},{2:[1,270],4:269,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},o($VH,[2,30],{28:[1,271]}),o($VF,[2,115]),o($VF,[2,119]),o($VF,[2,107]),o($VF,[2,108]),o($VF,[2,109]),o($VF,[2,110]),o($VF,[2,111]),o($VF,[2,112]),o($VF,[2,113]),o($VF,[2,114]),{2:[1,273],11:[1,272],32:$VK,33:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU},o($V2,[2,167]),o($Vo,[2,169]),o($Vo,[2,174]),o($V_,[2,175]),{2:[1,275],4:274,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},o($VX,$VJ,{59:276}),o($V_,[2,182]),{2:[1,278],29:[1,277],32:$VK,33:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU},o($VY,[2,136]),{2:[1,280],4:279,8:132,9:$V3,10:$Vw,12:133,13:$V4,15:$Vx,31:130,34:$Vy,40:$Vz,44:$VA,45:$VB,46:$VC,47:$VD,48:$VE},o($V2,[2,165]),o($V2,[2,168]),{2:[1,282],32:$VK,33:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU,99:[1,281]},o($V_,[2,179]),o($V_,[2,181],{64:24,23:25,25:26,19:27,21:28,8:29,12:30,17:31,66:32,67:33,68:34,69:35,70:36,81:39,77:55,60:199,9:$V3,13:$V4,15:$V5,18:$V6,20:$V7,22:$V8,24:$V9,26:$Va,71:$Vc,72:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,82:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,94:$Vn}),o($VY,[2,135]),o($VY,[2,137]),{2:[1,284],29:[1,283],32:$VK,33:$VL,35:$VM,36:$VN,37:$VO,38:$VP,39:$VQ,40:$VR,41:$VS,42:$VT,43:$VU},o($V$,[2,34]),o($VX,$VJ,{59:285}),o($V_,[2,180]),o($V$,[2,33]),o($V$,[2,35]),o($V_,[2,178],{64:24,23:25,25:26,19:27,21:28,8:29,12:30,17:31,66:32,67:33,68:34,69:35,70:36,81:39,77:55,60:199,9:$V3,13:$V4,15:$V5,18:$V6,20:$V7,22:$V8,24:$V9,26:$Va,71:$Vc,72:$Vd,76:$Ve,78:$Vf,79:$Vg,80:$Vh,82:$Vi,89:$Vj,90:$Vk,91:$Vl,92:$Vm,94:$Vn})],
defaultActions: {6:[2,63],10:[2,64]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:console.log("metodo clase: "+yy_.yytext);return 13;
break;
case 2:console.log("metodo: "+yy_.yytext);return 9;
break;
case 3:console.log("clas: "+yy_.yytext);return 18;
break;
case 4:return 89;
break;
case 5:return 90;
break;
case 6:return 94;
break;
case 7:return 91;
break;
case 8:return 50;
break;
case 9:return 51;
break;
case 10:return 76;
break;
case 11:return 92;
break;
case 12:return 78;
break;
case 13:return 80;
break;
case 14:return 79;
break;
case 15:return 82;
break;
case 16:return 98;
break;
case 17:return 72;
break;
case 18:return 100;
break;
case 19:return 71;
break;
case 20:return 24;
break;
case 21:return 26;
break;
case 22:return 20;
break;
case 23:return 22;
break;
case 24:return 56;
break;
case 25:return 57;
break;
case 26:return 44;
break;
case 27:return 45;
break;
case 28:return 46;
break;
case 29:return 47;
break;
case 30:return 15;
break;
case 31:return 35;
break;
case 32:return 36;
break;
case 33:return 37;
break;
case 34:return 38;
break;
case 35:return 32;
break;
case 36:return 33;
break;
case 37:return 34;
break;
case 38:return 87;
break;
case 39:return 88;
break;
case 40:return 39;
break;
case 41:return 40;
break;
case 42:return 41;
break;
case 43:return 42;
break;
case 44:return 43;
break;
case 45:return 86;
break;
case 46:return 28;
break;
case 47:return 29;
break;
case 48:return 62;
break;
case 49:return 63;
break;
case 50:return 10;
break;
case 51:return 11;
break;
case 52:return 65;
break;
case 53:return 99;
break;
case 54:return 48;
break;
case 55:return 6;
break;
case 56:return 54;
break;
case 57:/*ignore*/;
break;
case 58:/*ignore*/;
break;
case 59: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:(((JAVA)(\.([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*)))(\.([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*))))/,/^(?:((PY)(\.([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*))))/,/^(?:((JAVA)(\.([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*))))/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:while\b)/,/^(?:#include\b)/,/^(?:("["PY"|"JAVA"]((\.([aA-zZ|"_"|"-"|0-9|","|"$"|"\("|"\)"|"\["|"\]"|"\{"|"\}"]+))+|\.\*)"))/,/^(?:for\b)/,/^(?:do\b)/,/^(?:int\b)/,/^(?:char\b)/,/^(?:float\b)/,/^(?:const\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:default\b)/,/^(?:continue\b)/,/^(?:scanf\b)/,/^(?:printf\b)/,/^(?:clrscr\b)/,/^(?:getch\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:([0-9]+\b))/,/^(?:([0-9]+(\.[0-9]+)\b))/,/^(?:('[^\']'))/,/^(?:("[^\"]*"))/,/^(?:([aA-zZ|"_"|]([aA-zZ]|[0-9]|_)*))/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?::)/,/^(?:&)/,/^(?:,)/,/^(?:$)/,/^(?:(\/\/.*))/,/^(?:([/][*][^*]*[*]+([^/*][^*]*[*]+)*[/]))/,/^(?:.+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = C;
exports.Parser = C.Parser;
exports.parse = function () { return C.parse.apply(C, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}